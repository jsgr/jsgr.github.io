<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[SVG系列（十三） transform]]></title>
      <url>http://jsgrblog.win/2017/01/04/SVG%E7%B3%BB%E5%88%97%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89transform/</url>
      <content type="html"><![CDATA[<h2 id="transform-属性"><a href="#transform-属性" class="headerlink" title="transform 属性"></a>transform 属性</h2><p>SVG元素可以被缩放,移动,倾斜,旋转和CSS的transform相似<br><a id="more"></a></p>
<h3 id="缩放-scale-x-y"><a href="#缩放-scale-x-y" class="headerlink" title="缩放 : scale(x,y)"></a>缩放 : scale(x,y)</h3><p>1.x : 在X轴缩放比例<br>2.y : 在Y轴缩放比例</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 500px;&quot;&gt;
    &lt;rect x=&quot;50&quot; y=&quot;50&quot; width=&quot;100&quot; height=&quot;100&quot; style=&quot;fill: #00ff00;&quot;&gt;&lt;/rect&gt;
    &lt;rect x=&quot;100&quot; y=&quot;100&quot; width=&quot;100&quot; height=&quot;100&quot;  transform=&quot;scale(1.5,1.5)&quot; style=&quot;fill: #00ff00;&quot;&gt;&lt;/rect&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg066.png" alt="svg066"></p>
<h3 id="缩放-translate-x-y"><a href="#缩放-translate-x-y" class="headerlink" title="缩放 : translate(x,y)"></a>缩放 : translate(x,y)</h3><p>1.x : 在X轴偏移<br>2.y : 在Y轴偏移</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 500px;&quot;&gt;
    &lt;rect x=&quot;50&quot; y=&quot;50&quot; width=&quot;100&quot; height=&quot;100&quot; style=&quot;fill: #00ff00;&quot;&gt;&lt;/rect&gt;
    &lt;rect x=&quot;50&quot; y=&quot;50&quot; width=&quot;100&quot; height=&quot;100&quot; transform= &quot;translate(100,100)&quot; style=&quot;fill: #0000ff;&quot;&gt;&lt;/rect&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg067.png" alt="svg067"></p>
<h3 id="倾斜-skew"><a href="#倾斜-skew" class="headerlink" title="倾斜 : skew"></a>倾斜 : skew</h3><p>1.skewX(倾斜角度) : 在X轴倾斜角度</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 500px;&quot;&gt;
    &lt;rect x=&quot;50&quot; y=&quot;50&quot; width=&quot;100&quot; height=&quot;100&quot; style=&quot;fill: #00ff00;&quot;&gt;&lt;/rect&gt;
    &lt;rect x=&quot;150&quot; y=&quot;50&quot; width=&quot;100&quot; height=&quot;100&quot; transform= &quot;skewX(45)&quot; style=&quot;fill: #0000ff;&quot;&gt;&lt;/rect&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg068.png" alt="svg068"></p>
<p>2.skewY(倾斜角度) : 在Y轴倾斜角度</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 500px;&quot;&gt;
    &lt;rect x=&quot;50&quot; y=&quot;50&quot; width=&quot;100&quot; height=&quot;100&quot; style=&quot;fill: #00ff00;&quot;&gt;&lt;/rect&gt;
    &lt;rect x=&quot;150&quot; y=&quot;50&quot; width=&quot;100&quot; height=&quot;100&quot; transform= &quot;skewY(45)&quot; style=&quot;fill: #0000ff;&quot;&gt;&lt;/rect&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg069.png" alt="svg069"></p>
<h3 id="旋转-rotate-rotate-angle-x-y"><a href="#旋转-rotate-rotate-angle-x-y" class="headerlink" title="旋转 : rotate(rotate-angle x y)"></a>旋转 : rotate(rotate-angle x y)</h3><p>1.rotate-angle : 旋转角度<br>2.x ：绕x轴旋转的点<br>3.y ：绕y轴旋转的点</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 500px;&quot;&gt;
    &lt;rect x=&quot;50&quot; y=&quot;50&quot; width=&quot;100&quot; height=&quot;100&quot; style=&quot;fill: #00ff00;&quot;&gt;&lt;/rect&gt;
    &lt;rect x=&quot;150&quot; y=&quot;50&quot; width=&quot;100&quot; height=&quot;100&quot; transform= &quot;rotate(45 200 150)&quot; style=&quot;fill: #0000ff;&quot;&gt;&lt;/rect&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg070.png" alt="svg070"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVG系列（十二） fill]]></title>
      <url>http://jsgrblog.win/2017/01/04/SVG%E7%B3%BB%E5%88%97%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%20fill/</url>
      <content type="html"><![CDATA[<h2 id="fill-属性"><a href="#fill-属性" class="headerlink" title="fill 属性"></a>fill 属性</h2><p>stroke : 定义图形的填充样式<br><a id="more"></a></p>
<h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot;&gt;
    &lt;rect x=&quot;50&quot; y=&quot;50&quot; width=&quot;200&quot; height=&quot;200&quot; style=&quot;fill: #00ff00;&quot;&gt;&lt;/rect&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg062.png" alt="svg062"></p>
<h3 id="fill-stroke"><a href="#fill-stroke" class="headerlink" title="fill+stroke"></a>fill+stroke</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 300px;&quot;&gt;
    &lt;rect x=&quot;50&quot; y=&quot;50&quot; width=&quot;200&quot; height=&quot;200&quot; style=&quot;fill: #00ff00; stroke: #0000ff;&quot;&gt;&lt;/rect&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg061.png" alt="svg061"></p>
<h3 id="fill-opacity-透明度"><a href="#fill-opacity-透明度" class="headerlink" title="fill-opacity(透明度)"></a>fill-opacity(透明度)</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 300px;&quot;&gt;
    &lt;rect x=&quot;50&quot; y=&quot;50&quot; width=&quot;50&quot; height=&quot;50&quot; style=&quot;fill: #00ff00; fill-opacity: 0.1;&quot;&gt;&lt;/rect&gt;
    &lt;rect x=&quot;120&quot; y=&quot;50&quot; width=&quot;50&quot; height=&quot;50&quot; style=&quot;fill: #00ff00; fill-opacity: 0.5;&quot;&gt;&lt;/rect&gt;
    &lt;rect x=&quot;190&quot; y=&quot;50&quot; width=&quot;50&quot; height=&quot;50&quot; style=&quot;fill: #00ff00; fill-opacity: 1;&quot;&gt;&lt;/rect&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg063.png" alt="svg063"></p>
<h3 id="fill-rule"><a href="#fill-rule" class="headerlink" title="fill-rule"></a>fill-rule</h3><p>1.nonzero</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 500px;&quot;&gt;
    &lt;path d=&quot;M50,50 L250,50 L250,250 L50,250 M100,100 L150,100 L150,150 L100 150&quot; style=&quot;fill: #00ff00; fill-rule: nonzero;&quot;&gt;&lt;/path&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg064.png" alt="svg064"></p>
<p>2.evenodd</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 500px;&quot;&gt;
        &lt;path d=&quot;M50,50 L250,50 L250,250 L50,250 M100,100 L150,100 L150,150 L100 150&quot; style=&quot;fill: #00ff00; fill-rule: evenodd;&quot;&gt;&lt;/path&gt;
    &lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg065.png" alt="svg065"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVG系列（十一） stroke]]></title>
      <url>http://jsgrblog.win/2017/01/04/SVG%E7%B3%BB%E5%88%97%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%20stroke/</url>
      <content type="html"><![CDATA[<h2 id="stroke-属性"><a href="#stroke-属性" class="headerlink" title="stroke 属性"></a>stroke 属性</h2><p>stroke : 定义图形的描边样式<br><a id="more"></a></p>
<h3 id="stroke"><a href="#stroke" class="headerlink" title="stroke"></a>stroke</h3><pre><code>&lt;svg xmlns=&quot;htttp://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 300px;&quot;&gt;
    &lt;rect x=&quot;50&quot; y=&quot;50&quot; width=&quot;150&quot; height=&quot;150&quot; style=&quot;stroke: #00ff00; fill: none;&quot;&gt;&lt;/rect&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg053.png" alt="svg053"></p>
<h3 id="stroke-width"><a href="#stroke-width" class="headerlink" title="stroke-width"></a>stroke-width</h3><pre><code>&lt;svg xmlns=&quot;htttp://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 300px;&quot;&gt;
    &lt;rect x=&quot;50&quot; y=&quot;50&quot; width=&quot;150&quot; height=&quot;150&quot; style=&quot;stroke: #00ff00; stroke-width: 5px; fill: none;&quot;&gt;&lt;/rect&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg054.png" alt="svg054"></p>
<h3 id="stroke-linecap-线头类型"><a href="#stroke-linecap-线头类型" class="headerlink" title="stroke-linecap (线头类型)"></a>stroke-linecap (线头类型)</h3><p>1.butt<br>2.round<br>3.square</p>
<pre><code>&lt;svg xmlns=&quot;htttp://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 300px;&quot;&gt;
    &lt;line x1=&quot;50&quot; y1=&quot;50&quot; x2=&quot;300&quot; y2=&quot;50&quot; style=&quot;stroke: #00ff00; stroke-width: 10px; stroke-linecap: butt; fill: none;&quot;&gt;&lt;/line&gt;
    &lt;line x1=&quot;50&quot; y1=&quot;80&quot; x2=&quot;300&quot; y2=&quot;80&quot; style=&quot;stroke: #00ff00; stroke-width: 10px; stroke-linecap: round ;fill: none;&quot;&gt;&lt;/line&gt;
    &lt;line x1=&quot;50&quot; y1=&quot;110&quot; x2=&quot;300&quot; y2=&quot;110&quot; style=&quot;stroke: #00ff00; stroke-width: 10px; stroke-linecap: square; fill: none;&quot;&gt;&lt;/line&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg055.png" alt="svg055"></p>
<h3 id="stroke-linejoin-连线类型"><a href="#stroke-linejoin-连线类型" class="headerlink" title="stroke-linejoin (连线类型)"></a>stroke-linejoin (连线类型)</h3><p>1.miter<br>2.round<br>3.bevel</p>
<pre><code>&lt;svg xmlns=&quot;htttp://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 300px;&quot;&gt;
    &lt;path d=&quot;M10,10 L10,150 L100,150&quot; style=&quot;stroke: #00ff00; stroke-width: 10px; stroke-linejoin: miter; fill: none;&quot;&gt;&lt;/path&gt;
    &lt;path d=&quot;M130,10 L130,150 L220,150&quot; style=&quot;stroke: #00ff00; stroke-width: 10px; stroke-linejoin: round; fill: none;&quot;&gt;&lt;/path&gt;
    &lt;path d=&quot;M250,10 L250,150 L340,150&quot; style=&quot;stroke: #00ff00; stroke-width: 10px; stroke-linejoin: bevel; fill: none;&quot;&gt;&lt;/path&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg056.png" alt="svg056"></p>
<h3 id="stroke-dasharray-虚线"><a href="#stroke-dasharray-虚线" class="headerlink" title="stroke-dasharray (虚线)"></a>stroke-dasharray (虚线)</h3><p>stroke-dasharray: 20 10</p>
<ol>
<li>20 : 虚线的长度</li>
<li>10 : 两条虚线的间距</li>
</ol>
<pre><code>&lt;svg xmlns=&quot;htttp://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 300px;&quot;&gt;
    &lt;line x1=&quot;50&quot; y1=&quot;50&quot; x2=&quot;300&quot; y2=&quot;50&quot; style=&quot;stroke: #00ff00; stroke-width: 10px; stroke-dasharray: 20 10; fill: none;&quot;&gt;&lt;/line&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg057.png" alt="svg057"></p>
<h3 id="stroke-dashoffset-指定位置开始执行指定的虚线模式"><a href="#stroke-dashoffset-指定位置开始执行指定的虚线模式" class="headerlink" title="stroke-dashoffset (指定位置开始执行指定的虚线模式)"></a>stroke-dashoffset (指定位置开始执行指定的虚线模式)</h3><pre><code>&lt;svg xmlns=&quot;htttp://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 300px;&quot;&gt;
    &lt;line x1=&quot;50&quot; y1=&quot;50&quot; x2=&quot;300&quot; y2=&quot;50&quot; style=&quot;stroke: #00ff00; stroke-width: 10px; stroke-dasharray: 20 10; stroke-dashoffset: 10; fill: none;&quot;&gt;&lt;/line&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg058.png" alt="svg058"></p>
<h3 id="stroke-opacity-透明度"><a href="#stroke-opacity-透明度" class="headerlink" title="stroke-opacity (透明度)"></a>stroke-opacity (透明度)</h3><pre><code>&lt;svg xmlns=&quot;htttp://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 300px;&quot;&gt;
    &lt;line x1=&quot;50&quot; y1=&quot;50&quot; x2=&quot;300&quot; y2=&quot;50&quot; style=&quot;stroke: #00ff00; stroke-width: 10px; stroke-linecap: butt; stroke-opacity: 0.1; fill: none;&quot;&gt;&lt;/line&gt;
    &lt;line x1=&quot;50&quot; y1=&quot;80&quot; x2=&quot;300&quot; y2=&quot;80&quot; style=&quot;stroke: #00ff00; stroke-width: 10px; stroke-linecap: round ;stroke-opacity: 0.5;fill: none;&quot;&gt;&lt;/line&gt;
    &lt;line x1=&quot;50&quot; y1=&quot;110&quot; x2=&quot;300&quot; y2=&quot;110&quot; style=&quot;stroke: #00ff00; stroke-width: 10px; stroke-linecap: square;stroke-opacity: 1; fill: none;&quot;&gt;&lt;/line&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg059.png" alt="svg059"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVG系列（十） path元素]]></title>
      <url>http://jsgrblog.win/2017/01/03/SVG%E7%B3%BB%E5%88%97%EF%BC%88%E5%8D%81%EF%BC%89%20path/</url>
      <content type="html"><![CDATA[<h2 id="path-元素"><a href="#path-元素" class="headerlink" title="path 元素"></a>path 元素</h2><p><code>&lt;path&gt;</code> : 定义一些复杂的图形</p>
<p>1.大写的指令通常将参数坐标解析为绝对坐标<br>2.小写的指令通常将参数坐标解析为相对坐标<br><a id="more"></a></p>
<h3 id="指令大全-大小写间隔，便于区分"><a href="#指令大全-大小写间隔，便于区分" class="headerlink" title="指令大全(大小写间隔，便于区分)"></a>指令大全(大小写间隔，便于区分)</h3><p>以下列出大写字母的作用，小写字母只写出与大写字母的不同之处（个人觉得作用比较方便理解）</p>
<p>1.M(指令)</p>
<ol>
<li>参数：x,y</li>
<li>名称 ：moveto</li>
<li>描述 ：移动虚拟画笔到指定的（x,y）坐标，仅移动不绘制</li>
</ol>
<p>2.m (指令)</p>
<ol>
<li>坐标是相对于当前画笔的坐标</li>
</ol>
<p>3.L(指令)</p>
<ol>
<li>参数：x,y</li>
<li>名称 ：lineto</li>
<li>描述 ：从当前画笔所在位置绘制一条直线到指定的（x,y）坐标</li>
</ol>
<p>4.l (指令)</p>
<ol>
<li>坐标是相对于当前画笔的坐标</li>
</ol>
<p>5.H(指令)</p>
<ol>
<li>参数：x</li>
<li>名称 ：horizontal lineto</li>
<li>描述 ：绘制一条水平直线到参数指定的x坐标</li>
</ol>
<p>6.h (指令)</p>
<ol>
<li>坐标是相对于当前画笔的坐标</li>
</ol>
<p>7.V(指令)</p>
<ol>
<li>参数：y</li>
<li>名称 ：vertical lineto</li>
<li>描述 ：绘制一条垂直直线到参数指定的y坐标</li>
</ol>
<p>8.v (指令)</p>
<ol>
<li>坐标是相对于当前画笔的坐标</li>
</ol>
<p>9.C(指令)</p>
<ol>
<li>参数：x1,y1 x2,y2 x,y curveto</li>
<li>名称 ：三次贝兹曲线</li>
<li>描述 ：绘制一条三次贝兹曲线到参数（x,y）指定的坐标,x1，y1和x2,y2是曲线的开始和结束控制点,控制曲线的弧度</li>
</ol>
<p>10.c (指令)</p>
<ol>
<li>坐标是相对于当前画笔的坐标</li>
</ol>
<p>11.Q(指令)</p>
<ol>
<li>参数：x1,y1 x,y</li>
<li>名称 ：二次贝兹曲线</li>
<li>描述 ：绘制一条二次贝兹曲线到参数（x,y）指定的坐标,x1,y1是控制点,用于控制曲线的弧度</li>
</ol>
<p>12.q (指令)</p>
<ol>
<li>坐标是相对于当前画笔的坐标</li>
</ol>
<p>13.T(指令)</p>
<ol>
<li>参数：x,y</li>
<li>名称 ：平滑的二次贝兹曲线</li>
<li>描述 ：绘制一条二次贝兹曲线到参数（x,y）指定的坐标,控制点被假定为最后一次使用的控制点</li>
</ol>
<p>14.t (指令)</p>
<ol>
<li>坐标是相对于当前画笔的坐标</li>
</ol>
<p>15.A(指令)</p>
<ol>
<li>参数：rx,ry x-axis-rotation large-arc-flag,sweepflag x,y</li>
<li>名称 ：椭圆弧线</li>
<li>描述 ：绘制一条椭圆弧线到（x,y）指定的坐标; rx(x轴半径)和ry(y轴半径); x-axis-rotation(绕x轴旋转的度数); large-arc-flag(取值0或1) 大弧(1)还是小弧(0); sweep-flag(弧线绘制的方向)</li>
</ol>
<p>16.a (指令)</p>
<ol>
<li>坐标是相对于当前画笔的坐标</li>
</ol>
<p>17.Z (z) 大小写作用相同 ：闭合路径</p>
<h3 id="M-L-指令"><a href="#M-L-指令" class="headerlink" title="M L 指令"></a>M L 指令</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot;&gt;
    &lt;path d=&quot;M50 50 L150 150 L250 50&quot; style=&quot;stroke: #00ff00;stroke-width: 5; fill: none;&quot;&gt;&lt;/path&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg043.png" alt="svg043"></p>
<h3 id="M-L-Z-指令"><a href="#M-L-Z-指令" class="headerlink" title="M L Z 指令"></a>M L Z 指令</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot;&gt;
&lt;path d=&quot;M50 50 L150 150 L250 50 Z&quot; style=&quot;stroke: #00ff00;stroke-width: 5; fill: none;&quot;&gt;&lt;/path&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg044.png" alt="svg044"></p>
<h3 id="M-H-指令"><a href="#M-H-指令" class="headerlink" title="M H 指令"></a>M H 指令</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot;&gt;
    &lt;path d=&quot;M50 50 H250&quot; style=&quot;stroke: #00ff00;stroke-width: 5; fill: none;&quot;&gt;&lt;/path&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg045.png" alt="svg045"></p>
<h3 id="M-V-指令"><a href="#M-V-指令" class="headerlink" title="M V 指令"></a>M V 指令</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot;&gt;
    &lt;path d=&quot;M10 10 V150&quot; style=&quot;stroke: #00ff00;stroke-width: 5; fill: none;&quot;&gt;&lt;/path&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg046.png" alt="svg046"></p>
<h3 id="M-C-指令"><a href="#M-C-指令" class="headerlink" title="M C 指令"></a>M C 指令</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;height: 300px;&quot;&gt;
    &lt;path d=&quot;M50 50 C100,100 0,150 50,250&quot; style=&quot;stroke: #00ff00;stroke-width: 5; fill: none;&quot;&gt;&lt;/path&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg047.png" alt="svg047"></p>
<h3 id="M-S-指令"><a href="#M-S-指令" class="headerlink" title="M S 指令"></a>M S 指令</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;height: 300px;&quot;&gt;
    &lt;path d=&quot;M50 50 S200,125 50,250&quot; style=&quot;stroke: #00ff00;stroke-width: 5; fill: none;&quot;&gt;&lt;/path&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg048.png" alt="svg048"></p>
<h3 id="M-Q-指令"><a href="#M-Q-指令" class="headerlink" title="M Q 指令"></a>M Q 指令</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;height: 300px;&quot;&gt;
    &lt;path d=&quot;M50 50 Q200,125 50,250&quot; style=&quot;stroke: #00ff00;stroke-width: 5; fill: none;&quot;&gt;&lt;/path&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg049.png" alt="svg049"></p>
<h3 id="M-T-指令"><a href="#M-T-指令" class="headerlink" title="M T 指令"></a>M T 指令</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;height: 300px;&quot;&gt;
    &lt;path d=&quot;M50 50 T250,250&quot; style=&quot;stroke: #00ff00;stroke-width: 5; fill: none;&quot;&gt;&lt;/path&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg050.png" alt="svg050"></p>
<h3 id="M-A-指令"><a href="#M-A-指令" class="headerlink" title="M A 指令"></a>M A 指令</h3><p>1.<code>A50,50 0 0,1 250,250</code><br>2.<code>A50,50 0 1,1 250,250</code></p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;height: 300px;&quot;&gt;
    &lt;path d=&quot;M50 50 A50,50 0 0,1 250,250&quot; style=&quot;stroke: #00ff00;stroke-width: 5; fill: none;&quot;&gt;&lt;/path&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg051.png" alt="svg051"></p>
<p>3.<code>A50,50 0 1,0 250,250</code><br>4.<code>A50,50 0 0,0 250,250</code></p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;height: 300px;&quot;&gt;
    &lt;path d=&quot;M50 50 A50,50 0 1,0 250,250&quot; style=&quot;stroke: #00ff00;stroke-width: 5; fill: none;&quot;&gt;&lt;/path&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg052.png" alt="svg052"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVG系列（九） defs ,symbol ,use元素]]></title>
      <url>http://jsgrblog.win/2017/01/03/SVG%E7%B3%BB%E5%88%97%EF%BC%88%E4%B9%9D%EF%BC%89%20def%20,symbol%20,use%E5%85%83%E7%B4%A0%20/</url>
      <content type="html"><![CDATA[<p>1.defs元素 ：定义一个可以重复使用元素</p>
<p>2.symbol元素 : 定义可重复使用的符号</p>
<p>3.use元素 : 多次重用一个预定义的SVG图形</p>
<a id="more"></a>
<h3 id="defs元素-（包含-任何图形元素-g-symbol）"><a href="#defs元素-（包含-任何图形元素-g-symbol）" class="headerlink" title="defs元素 （包含 任何图形元素,g,symbol）"></a>defs元素 （包含 任何图形元素,g,symbol）</h3><p>1.基本样式</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot;&gt;
    &lt;defs&gt;
        &lt;g&gt;
            &lt;line x1=&quot;50&quot; y1=&quot;50&quot; x2=&quot;50&quot; y2=&quot;150&quot; style=&quot;stroke: #00ff00; stroke-width: 5;&quot;&gt;&lt;/line&gt;
        &lt;/g&gt;
    &lt;/defs&gt;
&lt;/svg&gt;
</code></pre><p>defs元素中定义的图形不会直接显示在SVG图像上，要使用<code>&lt;use&gt;</code>元素来引用</p>
<p>2.使用<code>use</code>引用</p>
<p>引用<code>&lt;g&gt;</code>元素，必须在<code>&lt;g&gt;</code>设置一个ID，通过ID来引用,<code>&lt;use&gt;</code>元素通过<code>xlink:href</code>属性来引入<code>&lt;g&gt;</code>元素<br>在<code>&lt;use&gt;</code>元素中，通过x和y属性来指定重用图形的显示位置 案例中直线所在的位置是 <code>line</code> 和 <code>use</code>坐标的叠加 x = x1(50)+ x(0) = 50 ; y = y1(50)+ y(50) = 100</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot; width: 100%;height: 300px;&quot;&gt;
    &lt;defs&gt;
        &lt;g id=&quot;line&quot;&gt;
            &lt;line x1=&quot;50&quot; y1=&quot;50&quot; x2=&quot;50&quot; y2=&quot;150&quot; style=&quot;stroke: #00ff00; stroke-width: 5;&quot;&gt;&lt;/line&gt;
        &lt;/g&gt;
    &lt;/defs&gt;
    &lt;use xlink:href=&quot;#line&quot; x=&quot;0&quot; y=&quot;50&quot;&gt;&lt;/use&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg040.png" alt="svg040"></p>
<h3 id="symbol元素"><a href="#symbol元素" class="headerlink" title="symbol元素"></a>symbol元素</h3><p><code>symbol</code> 和 <code>defs</code> 类似 定义的图形不会直接显示在SVG图像上，要使用<code>&lt;use&gt;</code>元素来引用</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot; width: 100%;height: 300px;&quot;&gt;
    &lt;symbol&gt;
        &lt;g id=&quot;rect&quot;&gt;
            &lt;rect x=&quot;50&quot; y=&quot;50&quot; width=&quot;100&quot; height=&quot;100&quot; style=&quot;stroke: #00ff00; fill: #00ffff;&quot;&gt;&lt;/rect&gt;
        &lt;/g&gt;
    &lt;/symbol&gt;
    &lt;use xlink:href=&quot;#rect&quot; x=&quot;0&quot; y=&quot;50&quot;&gt;&lt;/use&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg041.png" alt="svg041"></p>
<h3 id="use元素"><a href="#use元素" class="headerlink" title="use元素"></a>use元素</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot; width: 100%;height: 300px;&quot;&gt;
    &lt;symbol&gt;
        &lt;g id=&quot;rect&quot;&gt;
            &lt;rect x=&quot;50&quot; y=&quot;50&quot; width=&quot;100&quot; height=&quot;100&quot; style=&quot;stroke: #00ff00; fill: #00ffff;&quot;&gt;&lt;/rect&gt;
        &lt;/g&gt;
        &lt;g id=&quot;line&quot;&gt;
            &lt;line x1=&quot;50&quot; y1=&quot;50&quot; x2=&quot;50&quot; y2=&quot;150&quot; style=&quot;stroke: #00ff00; stroke-width: 5;&quot;&gt;&lt;/line&gt;
        &lt;/g&gt;
    &lt;/symbol&gt;
    &lt;use xlink:href=&quot;#rect&quot; x=&quot;0&quot; y=&quot;50&quot;&gt;&lt;/use&gt;
    &lt;use xlink:href=&quot;#line&quot; x=&quot;50&quot; y=&quot;150&quot;&gt;&lt;/use&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg042.png" alt="svg042"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVG系列（八）图片]]></title>
      <url>http://jsgrblog.win/2017/01/03/SVG%E7%B3%BB%E5%88%97%EF%BC%88%E5%85%AB%EF%BC%89%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<h2 id="image元素"><a href="#image元素" class="headerlink" title="image元素"></a>image元素</h2><p><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 300px;&quot;&gt;
            &lt;image x=&quot;50&quot; y=&quot;50&quot; width=&quot;200&quot; height=&quot;200&quot; xlink:href=&quot;http://ohyo58iyo.bkt.clouddn.com/svg001.jpg&quot;&gt;&lt;/image&gt;
        &lt;/svg&gt;</code></p>
<p><code>&lt;image&gt;</code>元素用于在SVG图像中嵌入位图</p>
<a id="more"></a>
<h3 id="image-基本样式"><a href="#image-基本样式" class="headerlink" title="image-基本样式"></a>image-基本样式</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 300px;&quot;&gt;
    &lt;image x=&quot;50&quot; y=&quot;50&quot; width=&quot;200&quot; height=&quot;200&quot; xlink:href=&quot;http://ohyo58iyo.bkt.clouddn.com/svg001.jpg&quot;&gt;&lt;/image&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg001.jpg" alt="svg039"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVG系列（七）textspan]]></title>
      <url>http://jsgrblog.win/2017/01/03/SVG%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%83%EF%BC%89textspan/</url>
      <content type="html"><![CDATA[<h2 id="tspan元素"><a href="#tspan元素" class="headerlink" title="tspan元素"></a>tspan元素</h2><p><code>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;defs&gt;&lt;path id=&quot;textPath&quot; d=&quot;M100,30 a1,1 0 0,0 150,0&quot;&gt;&lt;/path&gt;&lt;/defs&gt;&lt;text x=&quot;10&quot; y=&quot;100&quot; style=&quot;stroke: #00ff00;&quot;&gt;&lt;textPath xlink:href=&quot;#textPath&quot; &gt;SVG rendering text&lt;/textPath&gt;&lt;/text&gt;&lt;/svg&gt;</code></p>
<p><code>tspan</code>元素用于将一串文本放置到一条指定的路径上</p>
<a id="more"></a>
<h3 id="textspan-基本样式"><a href="#textspan-基本样式" class="headerlink" title="textspan-基本样式"></a>textspan-基本样式</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
    &lt;defs&gt;
        &lt;path id=&quot;textPath&quot; d=&quot;M100,30 a1,1 0 0,0 150,0&quot;&gt;&lt;/path&gt;
    &lt;/defs&gt;

    &lt;text x=&quot;10&quot; y=&quot;100&quot; style=&quot;stroke: #00ff00;&quot;&gt;
        &lt;textPath xlink:href=&quot;#textPath&quot; &gt;SVG rendering text&lt;/textPath&gt;
    &lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg039.png" alt="svg039"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVG系列（六）tspan]]></title>
      <url>http://jsgrblog.win/2017/01/03/SVG%E7%B3%BB%E5%88%97%EF%BC%88%E5%85%AD%EF%BC%89tspan/</url>
      <content type="html"><![CDATA[<h2 id="tspan元素"><a href="#tspan元素" class="headerlink" title="tspan元素"></a>tspan元素</h2><p><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot;&gt;&lt;text x=&quot;50&quot; y=&quot;50&quot;&gt;&lt;tspan&gt;SVG rendering text 1&lt;/tspan&gt;&lt;tspan&gt;SVG rendering text 2&lt;/tspan&gt;&lt;/text&gt;&lt;/svg&gt;</code></p>
<p>1.绘制多行文本<br>2.使一行文本相对于另一行文本来定位<br>3.可以添加样式</p>
<a id="more"></a>
<h3 id="tspan-基本样式"><a href="#tspan-基本样式" class="headerlink" title="tspan-基本样式"></a>tspan-基本样式</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%;&quot;&gt;
    &lt;text x=&quot;50&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;letter-spacing:5;stroke:#000;fill:#00ff00;&quot;&gt;
        &lt;tspan&gt;SVG rendering text 1&lt;/tspan&gt;
        &lt;tspan&gt;SVG rendering text 2&lt;/tspan&gt;
    &lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg034.png" alt="svg034"></p>
<h3 id="tspan-添加样式"><a href="#tspan-添加样式" class="headerlink" title="tspan-添加样式"></a>tspan-添加样式</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%;&quot;&gt;
    &lt;text x=&quot;50&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;letter-spacing:5;stroke:#000;fill:#00ff00;&quot;&gt;
        &lt;tspan style=&quot;font-size: 20px;&quot;&gt;SVG rendering text 1&lt;/tspan&gt;
        &lt;tspan&gt;SVG rendering text 2&lt;/tspan&gt;
    &lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg035.png" alt="svg035"></p>
<h3 id="tspan-设置文字（上标-下标）"><a href="#tspan-设置文字（上标-下标）" class="headerlink" title="tspan-设置文字（上标 下标）"></a>tspan-设置文字（上标 下标）</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%;&quot;&gt;
    &lt;text x=&quot;50&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;letter-spacing:5;stroke:#000;fill:#00ff00;&quot;&gt;
        SVG rendering text&lt;tspan style=&quot;baseline-shift: super;&quot;&gt;上标&lt;/tspan&gt;
        SVG rendering text&lt;tspan style=&quot;baseline-shift: sub;&quot;&gt;下标&lt;/tspan&gt;
    &lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg036.png" alt="svg036"></p>
<h3 id="tspan-定位-dx-dy-只有一个值"><a href="#tspan-定位-dx-dy-只有一个值" class="headerlink" title="tspan-定位(dx dy) 只有一个值"></a>tspan-定位(dx dy) 只有一个值</h3><p>1.dx : 在X轴的偏移(相对于上一个 tspan 标签)<br>2.dy : 在Y轴的偏移(相对于上一个 tspan 标签)</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%;&quot;&gt;
    &lt;text x=&quot;50&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;stroke:#000;fill:#00ff00;&quot;&gt;
        &lt;tspan&gt;SVG rendering text&lt;/tspan&gt;
        &lt;tspan dx=&quot;30&quot; dy=&quot;30&quot;&gt;SVG rendering text&lt;/tspan&gt;
        &lt;tspan dx=&quot;30&quot; dy=&quot;30&quot;&gt;SVG rendering text&lt;/tspan&gt;
    &lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg037.png" alt="svg037"></p>
<h3 id="tspan-定位-dx-dy-多个值"><a href="#tspan-定位-dx-dy-多个值" class="headerlink" title="tspan-定位(dx dy) 多个值"></a>tspan-定位(dx dy) 多个值</h3><p>每一个数字会被应用到<code>&lt;tspan&gt;</code>元素的每一个字符上</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%;height: 800px;&quot;&gt;
    &lt;text x=&quot;50&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;stroke:#000;fill:#00ff00;&quot;&gt;
        &lt;tspan&gt;SVG&lt;/tspan&gt;
        &lt;tspan dx=&quot;30 40 50&quot; dy=&quot;30 40 50&quot;&gt;SVG&lt;/tspan&gt;
        &lt;tspan dx=&quot;30 40 50&quot; dy=&quot;30 40 50&quot;&gt;SVG&lt;/tspan&gt;
    &lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg038.png" alt="svg038"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVG系列（五）绘制文字]]></title>
      <url>http://jsgrblog.win/2017/01/03/SVG%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89%E7%BB%98%E5%88%B6%E6%96%87%E5%AD%97/</url>
      <content type="html"><![CDATA[<h2 id="绘制文字"><a href="#绘制文字" class="headerlink" title="绘制文字"></a>绘制文字</h2><p><code>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;text x=&quot;50&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;letter-spacing : 5;word-spacing :5;writing-mode: none;direction: ltr;text-decoration :none;text-anchor: start;stroke:#000;fill:#00ff00;&quot;&gt; SVG 绘制文字&lt;/text&gt;&lt;/svg&gt;</code></p>
<p>1.x ：文字X轴起始位置<br>2.y ：文字Y轴起始位置<br>3.font-family ：设置字体<br>4.font-size ：设置字体大小<br>5.letter-spacing ：设置字间距<br>6.word-spacing ：单词间距<br>7.writing-mode : 制作垂直的SVG文字 例 ：tb（top to bottom）<br>8.direction ：文字的方向 例 ：rtl（right to Left）<br>9.text-decoration ：下划线 可选值（none、underline、overline、line-through）<br>10.text-anchor : 决定哪个部分的文字放置在text元素中的x属性定义的位置 可选值（start、middle、end）<br>11.textLength : 文字长度<br>12.stroke ：描边颜色<br>13.stroke-width    ：描边宽度<br>14.fill ：填充颜色</p>
<a id="more"></a>
<h3 id="绘制文字-设置字间距"><a href="#绘制文字-设置字间距" class="headerlink" title="绘制文字-设置字间距"></a>绘制文字-设置字间距</h3><p>1.letter-spacing ：正值</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%;&quot;&gt;
    &lt;text x=&quot;50&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
    &lt;text x=&quot;50&quot; y=&quot;80&quot; style=&quot;font-family: Arial;font-size : 30;letter-spacing:5;stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg020.png" alt="svg020"></p>
<p>1.letter-spacing ：负值</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%;&quot;&gt;
    &lt;text x=&quot;50&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
    &lt;text x=&quot;50&quot; y=&quot;80&quot; style=&quot;font-family: Arial;font-size : 30;letter-spacing:-5;stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg021.png" alt="svg021"></p>
<h3 id="单词间距"><a href="#单词间距" class="headerlink" title="单词间距"></a>单词间距</h3><p>1.word-spacing : 正值</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%;&quot;&gt;
    &lt;text x=&quot;50&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
    &lt;text x=&quot;50&quot; y=&quot;80&quot; style=&quot;font-family: Arial;font-size : 30;word-spacing:15;stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg022.png" alt="svg022"></p>
<p>2.word-spacing : 负值</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%;&quot;&gt;
    &lt;text x=&quot;50&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
    &lt;text x=&quot;50&quot; y=&quot;80&quot; style=&quot;font-family: Arial;font-size : 30;word-spacing:-15;stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg023.png" alt="svg023"></p>
<h3 id="writing-mode-制作垂直的SVG文字"><a href="#writing-mode-制作垂直的SVG文字" class="headerlink" title="writing-mode : 制作垂直的SVG文字"></a>writing-mode : 制作垂直的SVG文字</h3><p>1.writing-mode: tb</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 500px;&quot;&gt;
    &lt;text x=&quot;50&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;writing-mode: tb; stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg024.png" alt="svg024"></p>
<p>2.writing-mode: tb （英文垂直方向改正）</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 800px;&quot;&gt;
    &lt;text x=&quot;50&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;writing-mode: tb;glyph-orientation-vertical: 0; stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
    &lt;text x=&quot;100&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;writing-mode: tb;glyph-orientation-vertical: 0; stroke:#000;fill:#00ff00;&quot;&gt;SVG 绘制文字&lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg025.png" alt="svg025"></p>
<h3 id="direction-：文字的方向"><a href="#direction-：文字的方向" class="headerlink" title="direction ：文字的方向"></a>direction ：文字的方向</h3><p>1.direction : ltr 从左往右（默认）</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 500px;&quot;&gt;
    &lt;text x=&quot;50&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;direction: ltr; stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
    &lt;text x=&quot;50&quot; y=&quot;100&quot; style=&quot;font-family: Arial;font-size : 30;direction: ltr; stroke:#000;fill:#00ff00;&quot;&gt;SVG 绘制文字&lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg027.png" alt="svg027"></p>
<p>2.direction : rtl 从右往左</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 500px;&quot;&gt;
    &lt;text x=&quot;300&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;direction: rtl; stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
    &lt;text x=&quot;300&quot; y=&quot;100&quot; style=&quot;font-family: Arial;font-size : 30;direction: rtl; stroke:#000;fill:#00ff00;&quot;&gt;SVG 绘制文字&lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg028.png" alt="svg028"></p>
<h3 id="text-decoration-：下划线"><a href="#text-decoration-：下划线" class="headerlink" title="text-decoration ：下划线"></a>text-decoration ：下划线</h3><p>1.text-decoration ：none</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 500px;&quot;&gt;
    &lt;text x=&quot;50&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;text-decoration: none; stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
    &lt;text x=&quot;50&quot; y=&quot;100&quot; style=&quot;font-family: Arial;font-size : 30;text-decoration: none; stroke:#000;fill:#00ff00;&quot;&gt;SVG 绘制文字&lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg027.png" alt="svg027"></p>
<p>2.text-decoration ：underline</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 500px;&quot;&gt;
    &lt;text x=&quot;50&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;text-decoration: none; stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
    &lt;text x=&quot;50&quot; y=&quot;100&quot; style=&quot;font-family: Arial;font-size : 30;text-decoration: underline; stroke:#000;fill:#00ff00;&quot;&gt;SVG 绘制文字&lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg029.png" alt="svg029"></p>
<p>3.text-decoration ：overline</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 500px;&quot;&gt;
    &lt;text x=&quot;50&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;text-decoration: none; stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
    &lt;text x=&quot;50&quot; y=&quot;100&quot; style=&quot;font-family: Arial;font-size : 30;text-decoration: overline; stroke:#000;fill:#00ff00;&quot;&gt;SVG 绘制文字&lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg030.png" alt="svg030"></p>
<p>3.text-decoration ：line-through</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 500px;&quot;&gt;
    &lt;text x=&quot;50&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;text-decoration: none; stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
    &lt;text x=&quot;50&quot; y=&quot;100&quot; style=&quot;font-family: Arial;font-size : 30;text-decoration: line-through; stroke:#000;fill:#00ff00;&quot;&gt;SVG 绘制文字&lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg031.png" alt="svg031"></p>
<h3 id="text-anchor-决定哪个部分的文字放置在text元素中的x属性定义的位置"><a href="#text-anchor-决定哪个部分的文字放置在text元素中的x属性定义的位置" class="headerlink" title="text-anchor : 决定哪个部分的文字放置在text元素中的x属性定义的位置"></a>text-anchor : 决定哪个部分的文字放置在text元素中的x属性定义的位置</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 500px;&quot;&gt;
    &lt;line x1=&quot;250&quot; y1=&quot;10&quot; x2=&quot;250&quot; y2=&quot;170&quot; style=&quot;stroke: #000;&quot; &gt;&lt;/line&gt;
    &lt;text x=&quot;250&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;text-anchor: start;stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
    &lt;text x=&quot;250&quot; y=&quot;100&quot; style=&quot;font-family: Arial;font-size : 30;text-anchor: middle;stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
    &lt;text x=&quot;250&quot; y=&quot;150&quot; style=&quot;font-family: Arial;font-size : 30;text-anchor: end;stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg032.png" alt="svg032"></p>
<h3 id="textLength-文字长度"><a href="#textLength-文字长度" class="headerlink" title="textLength : 文字长度"></a>textLength : 文字长度</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;width: 100%; height: 500px;&quot;&gt;
    &lt;text x=&quot;50&quot; y=&quot;50&quot; style=&quot;font-family: Arial;font-size : 30;stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
    &lt;text x=&quot;50&quot; y=&quot;100&quot; textLength=&quot;180&quot; style=&quot;font-family: Arial;font-size : 30;stroke:#000;fill:#00ff00;&quot;&gt;SVG rendering text&lt;/text&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg033.png" alt="svg033"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVG系列（四）绘制直线，折线，多边形]]></title>
      <url>http://jsgrblog.win/2016/12/28/SVG%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89%E7%BB%98%E5%88%B6%E7%9B%B4%E7%BA%BF%EF%BC%8C%E6%8A%98%E7%BA%BF%EF%BC%8C%E5%A4%9A%E8%BE%B9%E5%BD%A2/</url>
      <content type="html"><![CDATA[<h2 id="SVG直线"><a href="#SVG直线" class="headerlink" title="SVG直线"></a>SVG直线</h2><p><code>&lt;line x1=&quot;0&quot; y1=&quot;10&quot; x2=&quot;0&quot; y2=&quot;100&quot; style=&quot;stroke:#ff0000; stroke-width: 5;&quot; /&gt;</code></p>
<p>1.x1 : X轴起始点<br>2.y1 : Y轴起始点<br>3.x2 : X轴终点<br>4.stroke ： 描边颜色<br>5.troke-width : 描边宽度<br><a id="more"></a></p>
<h3 id="绘制基本直线"><a href="#绘制基本直线" class="headerlink" title="绘制基本直线"></a>绘制基本直线</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
    &lt;line x1=&quot;10&quot; y1=&quot;10&quot; x2=&quot;10&quot; y2=&quot;100&quot; style=&quot;stroke:#ff0000; stroke-width: 5;&quot;&gt;&lt;/line&gt;
    &lt;line x1=&quot;40&quot; y1=&quot;10&quot; x2=&quot;60&quot; y2=&quot;120&quot; style=&quot;stroke:#ff0000; stroke-width: 8;&quot;&gt;&lt;/line&gt;
    &lt;line x1=&quot;100&quot; y1=&quot;10&quot; x2=&quot;60&quot; y2=&quot;120&quot; style=&quot;stroke:#ff0000; stroke-width: 8;&quot;&gt;&lt;/line&gt;
    &lt;line x1=&quot;10&quot; y1=&quot;140&quot; x2=&quot;200&quot; y2=&quot;140&quot; style=&quot;stroke: #00ff00; stroke-width: 10;&quot;&gt;&lt;/line&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg015.jpg" alt="svg015"></p>
<h2 id="SVG折线"><a href="#SVG折线" class="headerlink" title="SVG折线"></a>SVG折线</h2><p><code>&lt;polyline points=&quot;0,0  30,0  15,30 0,0&quot; style=&quot;stroke:#ff0000; stroke-width: 10; fill: #00ff00;&quot;/&gt;</code></p>
<p><code>&lt;polyline&gt;</code>元素用于绘制SVG折线</p>
<h3 id="绘制基本折线-描边"><a href="#绘制基本折线-描边" class="headerlink" title="绘制基本折线-描边"></a>绘制基本折线-描边</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
    &lt;polyline points=&quot;10,50  30,10  50,50&quot; style=&quot;stroke:#ff0000;fill: none;&quot;&gt;&lt;/polyline&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg016.jpg" alt="svg016"></p>
<h3 id="绘制基本折线-描边-填充"><a href="#绘制基本折线-描边-填充" class="headerlink" title="绘制基本折线-描边+填充"></a>绘制基本折线-描边+填充</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
    &lt;polyline points=&quot;10,50  30,10  50,50&quot; style=&quot;stroke:#ff0000;fill: #00ff00;&quot;&gt;&lt;/polyline&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg017.jpg" alt="svg017"></p>
<h3 id="绘制基本折线-描边-填充-闭合路径"><a href="#绘制基本折线-描边-填充-闭合路径" class="headerlink" title="绘制基本折线-描边+填充(闭合路径)"></a>绘制基本折线-描边+填充(闭合路径)</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
    &lt;polyline points=&quot;10,50  30,10  50,50 10,50&quot; style=&quot;stroke:#ff0000;stroke-width: 5; fill: #00ff00;&quot;&gt;&lt;/polyline&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg018.jpg" alt="svg018"></p>
<h3 id="绘制多边形"><a href="#绘制多边形" class="headerlink" title="绘制多边形"></a>绘制多边形</h3><p><code>&lt;polygon points=&quot;100,10  150,10  250,140 10,140&quot; style=&quot;stroke:#ff0000;stroke-width: 5; fill: #00ff00;&quot;&gt;&lt;/polygon&gt;</code></p>
<p><code>&lt;polygon&gt;</code>元素用于绘制SVG多边形，多边形是指三条或三条边以上的几何图形</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
    &lt;polygon points=&quot;100,10  150,10  250,140 10,140&quot; style=&quot;stroke:#ff0000;stroke-width: 5; fill: #00ff00;&quot;&gt;&lt;/polygon&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg019.jpg" alt="svg019"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVG系列（三）绘制圆形和椭圆]]></title>
      <url>http://jsgrblog.win/2016/12/28/SVG%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%E7%BB%98%E5%88%B6%E5%9C%86%E5%BD%A2/</url>
      <content type="html"><![CDATA[<h2 id="绘制SVG圆形和椭圆"><a href="#绘制SVG圆形和椭圆" class="headerlink" title="绘制SVG圆形和椭圆"></a>绘制SVG圆形和椭圆</h2><p>1.circle ：绘制圆形<br><code>&lt;circle cx=&quot;100&quot; cy=&quot;100&quot; r=&quot;40&quot; style=&quot;stroke:#006600;stroke-dasharray: 20 10;stroke-width: 5; fill:#00cc00&quot;/&gt;</code></p>
<p>2.ellipse ：绘制椭圆<br><code>&lt;ellipse cx=&quot;100&quot; cy=&quot;100&quot; rx=&quot;40&quot; ry=&quot;60&quot; style=&quot;stroke:#006600;stroke-dasharray: 20 10;stroke-width: 5; fill:#00cc00&quot;/&gt;</code></p>
<p>cx ：圆心X轴起始位置<br>cy ：圆心Y轴起始位置<br>r : 半径<br>stroke ：描边的颜色<br>stroke-width ：描边的宽度<br>stroke-dasharray ：边框设置为虚线（第一个值：虚线长度，第二个值：虚线间距）<br>fill ：填充的颜色</p>
<a id="more"></a>
<h3 id="绘制基本圆形"><a href="#绘制基本圆形" class="headerlink" title="绘制基本圆形"></a>绘制基本圆形</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot;&gt;
    &lt;circle cx=&quot;100&quot; cy=&quot;100&quot; r=&quot;50&quot; style=&quot;stroke: #ff0000; fill: #00ff00;&quot;&gt;&lt;/circle&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg011.jpg" alt="svg011"></p>
<h3 id="圆形描边-实线"><a href="#圆形描边-实线" class="headerlink" title="圆形描边-实线"></a>圆形描边-实线</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot;&gt;
    &lt;circle cx=&quot;80&quot; cy=&quot;80&quot; r=&quot;50&quot; style=&quot;stroke: #ff0000;stroke-width: 5; fill: #00ff00;&quot;&gt;&lt;/circle&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg012.jpg" alt="svg012"></p>
<h3 id="圆形描边-虚线"><a href="#圆形描边-虚线" class="headerlink" title="圆形描边-虚线"></a>圆形描边-虚线</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot;&gt;
    &lt;circle cx=&quot;80&quot; cy=&quot;80&quot; r=&quot;50&quot; style=&quot;stroke: #ff0000;stroke-width: 5;stroke-dasharray: 20 10; fill: #00ff00;&quot;&gt;&lt;/circle&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg013.jpg" alt="svg013"></p>
<h3 id="圆形填充-设置透明度"><a href="#圆形填充-设置透明度" class="headerlink" title="圆形填充-设置透明度"></a>圆形填充-设置透明度</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;height: 300px;&quot;&gt;
    &lt;circle cx=&quot;80&quot; cy=&quot;80&quot; r=&quot;50&quot; style=&quot;fill: #ff00ff;&quot;&gt;&lt;/circle&gt;
    &lt;circle cx=&quot;110&quot; cy=&quot;110&quot; r=&quot;50&quot; style=&quot;fill: #00ff00; fill-opacity: 0.5;&quot;&gt;&lt;/circle&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg014.jpg" alt="svg014"></p>
<h3 id="SVG椭圆"><a href="#SVG椭圆" class="headerlink" title="SVG椭圆"></a>SVG椭圆</h3><p>SVG椭圆和圆形类似，只是它的半径不相等 rx!=ry<br>具体案例参考圆形的绘制</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVG系列（二）绘制矩形]]></title>
      <url>http://jsgrblog.win/2016/12/28/SVG%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%E7%BB%98%E5%88%B6%E7%9F%A9%E5%BD%A2/</url>
      <content type="html"><![CDATA[<h2 id="绘制SVG矩形"><a href="#绘制SVG矩形" class="headerlink" title="绘制SVG矩形"></a>绘制SVG矩形</h2><p><code>&lt;rect x=&quot;10&quot; y=&quot;10&quot; width=&quot;100&quot; height=&quot;100&quot; rx=&quot;10&quot; ry=&quot;10&quot; style=&quot;stroke:#ff0000; stroke-width: 5; stroke-dasharray: 10 5; fill: #00ffff&quot; /&gt;</code></p>
<p>x ：X轴起始位置<br>y ：Y轴起始位置<br>width : 矩形的宽度<br>height : 矩形的高度<br>rx ：圆角的宽度<br>ry ：圆角的高度<br>stroke ：描边的颜色<br>stroke-width ：描边的宽度<br>stroke-dasharray ：边框设置为虚线（第一个值：虚线长度，第二个值：虚线间距）<br>fill ：填充的颜色<br><a id="more"></a></p>
<h3 id="基本矩形"><a href="#基本矩形" class="headerlink" title="基本矩形"></a>基本矩形</h3><pre><code>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
    &lt;rect x=&quot;10&quot; y=&quot;10&quot; height=&quot;120&quot; width=&quot;120&quot; style=&quot;stroke:#ff0000; fill: #00ffff&quot; /&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg004.jpg" alt="svg004"></p>
<h3 id="圆角矩形"><a href="#圆角矩形" class="headerlink" title="圆角矩形"></a>圆角矩形</h3><p>1.rx=ry</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;height: 500px;&quot;&gt;
    &lt;rect x=&quot;10&quot; y=&quot;10&quot; width=&quot;100&quot; height=&quot;100&quot; rx=&quot;10&quot; ry=&quot;10&quot; style=&quot;stroke:#ff0000;stroke-width:5;fill: #00ff00;&quot;&gt;&lt;/rect&gt;
    &lt;rect x=&quot;10&quot; y=&quot;120&quot; width=&quot;100&quot; height=&quot;100&quot; rx=&quot;20&quot; ry=&quot;20&quot; style=&quot;stroke:#ff0000;stroke-width:5;fill: #00ff00;&quot;&gt;&lt;/rect&gt;
    &lt;rect x=&quot;10&quot; y=&quot;230&quot; width=&quot;100&quot; height=&quot;100&quot; rx=&quot;30&quot; ry=&quot;30&quot; style=&quot;stroke:#ff0000;stroke-width:5;fill: #00ff00;&quot;&gt;&lt;/rect&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg005.jpg" alt="svg005"></p>
<p>2.rx!=ry</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3c.org/2000/svg&quot; style=&quot;height: 500px;&quot;&gt;
    &lt;rect x=&quot;10&quot; y=&quot;10&quot; width=&quot;100&quot; height=&quot;100&quot; rx=&quot;10&quot; ry=&quot;30&quot; style=&quot;stroke:#ff0000;stroke-width:5;fill: #00ff00;&quot;&gt;&lt;/rect&gt;
    &lt;rect x=&quot;10&quot; y=&quot;120&quot; width=&quot;100&quot; height=&quot;100&quot; rx=&quot;30&quot; ry=&quot;10&quot; style=&quot;stroke:#ff0000;stroke-width:5;fill: #00ff00;&quot;&gt;&lt;/rect&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg006.jpg" alt="svg006"></p>
<h3 id="填充矩形"><a href="#填充矩形" class="headerlink" title="填充矩形"></a>填充矩形</h3><p>1.不透明</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
    &lt;rect x=&quot;10&quot; y=&quot;10&quot; height=&quot;120&quot; width=&quot;120&quot; style=&quot;fill: #00ffff&quot;&gt;&lt;/rect&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg007.jpg" alt="svg007"></p>
<p>2.设置透明度</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; style=&quot;height: 300px;&quot;&gt;
    &lt;rect x=&quot;10&quot; y=&quot;10&quot; height=&quot;120&quot; width=&quot;120&quot; style=&quot;fill: #ff0000;&quot;&gt;&lt;/rect&gt;
    &lt;rect x=&quot;60&quot; y=&quot;60&quot; height=&quot;120&quot; width=&quot;120&quot; style=&quot;fill: #00ff00;fill-opacity: 0.5;&quot;&gt;&lt;/rect&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg010.jpg" alt="svg010"></p>
<h3 id="描边矩形"><a href="#描边矩形" class="headerlink" title="描边矩形"></a>描边矩形</h3><p>1.边框实线</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
    &lt;rect x=&quot;10&quot; y=&quot;10&quot; height=&quot;120&quot; width=&quot;120&quot; style=&quot;stroke: #00ffff;fill:none;&quot;&gt;&lt;/rect&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg008.jpg" alt="svg008"></p>
<p>2.边框虚线</p>
<pre><code>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
    &lt;rect x=&quot;10&quot; y=&quot;10&quot; height=&quot;120&quot; width=&quot;120&quot; style=&quot;stroke: #00ffff;stroke-dasharray:15 10;fill:none;&quot;&gt;&lt;/rect&gt;
&lt;/svg&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg009.jpg" alt="svg009"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVG系列（一）学习前言]]></title>
      <url>http://jsgrblog.win/2016/12/28/SVG%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%E5%AD%A6%E4%B9%A0%E5%89%8D%E8%A8%80/</url>
      <content type="html"><![CDATA[<h2 id="什么是SVG"><a href="#什么是SVG" class="headerlink" title="什么是SVG"></a>什么是SVG</h2><p>SVG是”Scalable Vector Graphics”的简称。中文可以理解成“可缩放矢量图形”</p>
<p>1.可伸缩矢量图形<br>2.定义用于网络的基于矢量的图形<br>3.使用XML格式定义图形<br>4.SVG图像在放大或缩小的情况下，其图形质量不受影响（矢量图）</p>
<a id="more"></a>
<h2 id="SVG优势"><a href="#SVG优势" class="headerlink" title="SVG优势"></a>SVG优势</h2><p>1.被非常多的工具读取和修改（比如记事本）<br>2.与JPEG和GIF图像比起来，尺寸更小，且可压缩性更强。<br>3.可伸缩<br>4.可在任何的分辨率下被高质量地打印<br>5.放大或缩小的情况下，其图形质量不受影响<br>6.SVG文件是纯粹的XML</p>
<h2 id="在浏览器中显示SVG"><a href="#在浏览器中显示SVG" class="headerlink" title="在浏览器中显示SVG"></a>在浏览器中显示SVG</h2><p>1.将SVG图像作为背景图像嵌入<br>2.使用<code>&lt;iframe&gt;</code>元素来嵌入SVG图像<br>3.使用<code>&lt;img&gt;</code>元素来嵌入SVG图像<br>4.直接使用<code>&lt;svg&gt;</code>元素<br>5.使用<code>&lt;embed&gt;</code>元素来嵌入SVG图像<br>6.使用<code>&lt;object&gt;</code>元素来嵌入SVG图像</p>
<h3 id="将SVG图像作为背景图像嵌入"><a href="#将SVG图像作为背景图像嵌入" class="headerlink" title="将SVG图像作为背景图像嵌入"></a>将SVG图像作为背景图像嵌入</h3><pre><code>&lt;div&gt;&lt;/div&gt;
&lt;style type=&quot;text/css&quot;&gt;
    div {
        width: 200px;
        height: 200px;
        background: url(&apos;http://ohyo58iyo.bkt.clouddn.com/svg001.svg&apos;) no-repeat center;
        background-size: 200px 200px;
    }
&lt;/style&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg001.jpg" alt="svg001"></p>
<h3 id="使用-iframe-元素来嵌入SVG图像"><a href="#使用-iframe-元素来嵌入SVG图像" class="headerlink" title="使用 iframe 元素来嵌入SVG图像"></a>使用 iframe 元素来嵌入SVG图像</h3><pre><code>&lt;iframe src=&quot;http://ohyo58iyo.bkt.clouddn.com/svg001.svg&quot; width=&quot;300&quot; height=&quot;300&quot; &gt;&lt;/iframe&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg002.jpg" alt="svg002"></p>
<h3 id="使用-lt-img-gt-元素来嵌入SVG图像"><a href="#使用-lt-img-gt-元素来嵌入SVG图像" class="headerlink" title="使用&lt;img&gt;元素来嵌入SVG图像"></a>使用<code>&lt;img&gt;</code>元素来嵌入SVG图像</h3><pre><code>&lt;img src=&quot;http://ohyo58iyo.bkt.clouddn.com/svg001.svg&quot;/&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg003.jpg" alt="svg003"></p>
<h3 id="直接使用-svg-元素"><a href="#直接使用-svg-元素" class="headerlink" title="直接使用 svg 元素"></a>直接使用 svg 元素</h3><pre><code>&lt;div&gt;
    &lt;svg version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; x=&quot;0px&quot; y=&quot;0px&quot; width=&quot;208px&quot; height=&quot;240px&quot; viewBox=&quot;0 0 208 240&quot; style=&quot;enable-background:new 0 0 208 240;&quot; xml:space=&quot;preserve&quot;&gt;
        &lt;g id=&quot;Layer_116&quot;&gt;
            &lt;g&gt;
                &lt;g&gt;
                    &lt;circle style=&quot;fill:#F28C13;&quot; cx=&quot;104&quot; cy=&quot;120&quot; r=&quot;104&quot; /&gt;
                    &lt;polygon style=&quot;fill:#FFFFFF;&quot; points=&quot;56,236 104,116 52,116 96,4 152,4 124,76 180,76 64,236&quot; /&gt;

                    &lt;polygon style=&quot;fill:none;stroke:#4D5152;stroke-width:8;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;&quot; points=&quot;
        56,236 104,116 52,116 96,4 152,4 124,76 180,76 64,236&quot; /&gt;

                    &lt;line style=&quot;fill:none;stroke:#4D5152;stroke-width:8;stroke-linejoin:round;stroke-miterlimit:10;&quot; x1=&quot;108&quot; y1=&quot;36&quot; x2=&quot;116&quot; y2=&quot;36&quot; /&gt;

                    &lt;line style=&quot;fill:none;stroke:#4D5152;stroke-width:8;stroke-linejoin:round;stroke-miterlimit:10;&quot; x1=&quot;100&quot; y1=&quot;56&quot; x2=&quot;108&quot; y2=&quot;56&quot; /&gt;

                    &lt;line style=&quot;fill:none;stroke:#4D5152;stroke-width:8;stroke-linejoin:round;stroke-miterlimit:10;&quot; x1=&quot;92&quot; y1=&quot;76&quot; x2=&quot;100&quot; y2=&quot;76&quot; /&gt;
                &lt;/g&gt;
            &lt;/g&gt;
        &lt;/g&gt;
        &lt;g id=&quot;Layer_1&quot;&gt;&lt;/g&gt;
    &lt;/svg&gt;
&lt;/div&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg003.jpg" alt="svg003"></p>
<h3 id="使用-embed-元素来嵌入SVG图像"><a href="#使用-embed-元素来嵌入SVG图像" class="headerlink" title="使用 embed 元素来嵌入SVG图像"></a>使用 embed 元素来嵌入SVG图像</h3><pre><code>&lt;div&gt;
    &lt;embed src=&quot;http://ohyo58iyo.bkt.clouddn.com/svg001.svg&quot; width=&quot;300&quot; height=&quot;300&quot; /&gt;
&lt;/div&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg003.jpg" alt="svg003"></p>
<h3 id="使用-object-元素来嵌入SVG图像"><a href="#使用-object-元素来嵌入SVG图像" class="headerlink" title="使用 object 元素来嵌入SVG图像"></a>使用 object 元素来嵌入SVG图像</h3><pre><code>&lt;div&gt;
    &lt;object data=&quot;http://ohyo58iyo.bkt.clouddn.com/svg001.svg&quot; width=&quot;300&quot; height=&quot;300&quot; /&gt;
&lt;/div&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/svg003.jpg" alt="svg003"></p>
<p>虽然SVG图像在浏览器显示，方法有很多种，比较常用的是<br>1.<code>&lt;img&gt;</code><br>2.<code>&lt;svg&gt;</code><br>3.background-image方式引入</p>
<p><a href="http://caniuse.com/#search=SVG" target="_blank" rel="external">点击这里查看SVG的支持情况</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 Canvas(十一)像素]]></title>
      <url>http://jsgrblog.win/2016/12/27/HTML5Canvas%E5%83%8F%E7%B4%A0/</url>
      <content type="html"><![CDATA[<h2 id="Canvas-像素"><a href="#Canvas-像素" class="headerlink" title="Canvas 像素"></a>Canvas 像素</h2><h3 id="ImageData对象"><a href="#ImageData对象" class="headerlink" title="ImageData对象"></a>ImageData对象</h3><p>context.createImageData(width, height);</p>
<p>1.width ：图像的宽度(px)<br>2.height ：图像的高度(px)<br>3.data ：包含像素值的一维数组<br><a id="more"></a></p>
<h3 id="创建一个ImageData对像"><a href="#创建一个ImageData对像" class="headerlink" title="创建一个ImageData对像"></a>创建一个ImageData对像</h3><pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        var canvas = document.getElementById(&quot;canvas&quot;);
        if(canvas.getContext) {
            var context = canvas.getContext(&apos;2d&apos;);

            var imgData = context.createImageData(150, 150);
            for(var i = 0; i &lt; imgData.data.length; i += 4) {
                imgData.data[i + 0] = 255;
                imgData.data[i + 1] = 255;
                imgData.data[i + 2] = 0;
                imgData.data[i + 3] = 255;
            }
            context.putImageData(imgData, 10, 10);
        }
    &lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas056.jpg" alt="canvas056"><br>1.data[0]=255;  //R<br>2.data[1]=0;    //G<br>3.data[2]=0;   //B<br>4.data[3]=255;   //A</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 Canvas(十)绘制状态与变形]]></title>
      <url>http://jsgrblog.win/2016/12/27/HTML5Canvas%E7%BB%98%E5%88%B6%E7%8A%B6%E6%80%81%E4%B8%8E%E5%8F%98%E5%BD%A2/</url>
      <content type="html"><![CDATA[<h2 id="Canvas-绘制状态与变形"><a href="#Canvas-绘制状态与变形" class="headerlink" title="Canvas 绘制状态与变形"></a>Canvas 绘制状态与变形</h2><h3 id="绘制状态"><a href="#绘制状态" class="headerlink" title="绘制状态"></a>绘制状态</h3><p>1.save ：保存 canvas 状态</p>
<p>2.estore ：恢复 canvas 状态<br><a id="more"></a></p>
<p>每一次调用 save 方法，当前的状态就会被推入堆中保存起来(调用任意多次 save 方法)。<br>这种状态包括：<br>1.变形（移动，旋转和缩放）<br>2.<br><code>strokeStyle</code><br><code>fillStyle</code><br><code>globalAlpha</code><br><code>lineWidth</code><br><code>lineCap</code><br><code>lineJoin</code><br><code>miterLimit</code><br><code>shadowOffsetX</code><br><code>shadowOffsetY</code><br><code>shadowBlur</code><br><code>shadowColor</code><br><code>globalCompositeOperation</code></p>
<p>3.裁切路径（clipping path）</p>
<p>每一次调用 restore 方法，上一个保存的状态就从堆中弹出，所有设定都恢复</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.lineWidth = 5;

        context.fillStyle = &quot;#ff0000&quot;;
        context.strokeStyle = &quot;#000000&quot;;

        context.fillRect(5, 5, 50, 50);
        context.strokeRect(5, 5, 50, 50);
        context.save();

        context.fillStyle = &quot;#00ff00&quot;;

        context.fillRect(65, 5, 50, 50);
        context.strokeRect(65, 5, 50, 50);
        context.save();

        context.strokeStyle = &quot;#ffff00&quot;;
        context.fillStyle = &quot;#0000ff&quot;;

        context.fillRect(125, 5, 50, 50);
        context.strokeRect(125, 5, 50, 50);

        context.restore();

        context.fillRect(185, 5, 50, 50);
        context.strokeRect(185, 5, 50, 50);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas051.jpg" alt="canvas051"></p>
<h3 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h3><p>1.移动 ：context.translate(x, y);  X:X轴移动的距离，正值表示向右移动，负值即相反;Y:Y轴移动的距离，正值表示向右移动，负值即相反<br>2.旋转 : context.rotate(radians); radians : 这个角度必须是一个弧度值，而不能是角度值<br>3.缩放 : context.scale(scaleX, scaleY); scaleX:在X轴缩放; scaleY:在Y轴缩放;</p>
<h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.fillStyle = &quot;#ff0000&quot;;
        context.fillRect(10, 10, 100, 100);

        context.translate(50, 50);

        context.fillStyle = &quot;#00ffff&quot;;
        context.fillRect(10, 10, 100, 100);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas052.jpg" alt="canvas052"></p>
<h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><p>1.绕默认点进行旋转（0 , 0）</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.fillStyle = &quot;#ff0000&quot;;
        context.fillRect(50, 50, 100, 100);

        context.rotate((Math.PI / 180) * -15);

        context.fillStyle = &quot;#00ffff&quot;;
        context.fillRect(50, 50, 100, 100);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas053.jpg" alt="canvas053"></p>
<p>2.绕指定点进行旋转 (30, 30)</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.fillStyle = &quot;#ff0000&quot;;
        context.fillRect(100, 100, 100, 100);

        context.rotate((Math.PI / 180) * -15);
        context.translate(30, 30);

        context.fillStyle = &quot;#00ffff&quot;;
        context.fillRect(100, 100, 100, 100);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas054.jpg" alt="canvas054"></p>
<h4 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h4><pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.fillStyle = &quot;#ff0000&quot;;
        context.fillRect(50, 50, 100, 100);

        context.scale(2, 2);

        context.fillStyle = &quot;#00ffff&quot;;
        context.fillRect(50, 50, 100, 100);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas055.jpg" alt="canvas055"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 Canvas(九) 合成与裁剪]]></title>
      <url>http://jsgrblog.win/2016/12/27/HTML5Canvas%E5%90%88%E6%88%90%E4%B8%8E%E8%A3%81%E5%89%AA/</url>
      <content type="html"><![CDATA[<h2 id="Canvas-合成与裁剪"><a href="#Canvas-合成与裁剪" class="headerlink" title="Canvas 合成与裁剪"></a>Canvas 合成与裁剪</h2><p>在我绘制图形时，不同的图形会因为绘制的先后而有了层级关系。如果新绘制的图形和原有内容有重叠部分，在默认情况下，新绘制的图形是会覆盖在原有内容之上。<br>在HTML中，可以使用z-index属性来修改层级关系<br>在canvas里，两个属性用于控制图形合成模式：<br>1.globalAlpha ：透明度（取值 ：0 - 1） 例 ：context.globalAlpha = 0.5;<br>2.globalCompositeOperation ：绘制的图形如何与已经存在的图形进行混合 例 ：globalCompositeOperation = type<br><a id="more"></a><br>1.source-over：新绘制的图形位于canvas中已经存在的图形之上（默认值）</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

        context.globalCompositeOperation = &quot;source-over&quot;;  

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas030.jpg" alt="canvas030"></p>
<p>2.source-in：新绘制的图形和目标canvas中已经存在的图形重叠且都不透明的部分才被绘制</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;source-in&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas031.jpg" alt="canvas031"></p>
<p>3.source-out ：新绘制的图形和目标canvas中已经存在的图形不重叠的部分会被绘制</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;source-out&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas032.jpg" alt="canvas032"></p>
<p>4.source-atop ：新绘制的图形和目标canvas中已经存在的图形内容重叠的部分的新图形会被绘制</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;source-atop&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas033.jpg" alt="canvas033"></p>
<p>5.destination-over ：新绘制的图形和目标canvas中已经存在的图形内容后面的新图形会被绘制</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;destination-over&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas034.jpg" alt="canvas034"></p>
<p>6.destination-in ：新绘制的图形和目标canvas中已经存在的图形内容重叠的部分的canvas内容会被保留，其余显示为透明</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;destination-in&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas035.jpg" alt="canvas035"></p>
<p>7.destination-out ：新绘制的图形和目标canvas中已经存在的图形内容不重叠的部分的会被保留</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;destination-out&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas036.jpg" alt="canvas036"></p>
<p>8.destination-atop ：新绘制的图形和目标canvas中已经存在的图形内容重叠部分会被保留，新图形绘制在后面</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;destination-atop&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas037.jpg" alt="canvas037"></p>
<p>9.destination-atop ：新绘制的图形和目标canvas中已经存在的图形内容重叠部分会被保留，新图形绘制在后面</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;destination-atop&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas037.jpg" alt="canvas037"></p>
<p>10.luminosity ：保留底层的亮度和色度，采用顶层的亮度</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;luminosity&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas038.jpg" alt="canvas038"></p>
<p>11.color ：保留底层的亮度和色度，采用顶层的色调和色度</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;color&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas039.jpg" alt="canvas039"></p>
<p>12.saturation ：保留底层的亮度和色度，采用顶层的色度</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;saturation&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas040.jpg" alt="canvas040"></p>
<p>13.hue ：保留底层的亮度和色度，采用顶层的色调</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;hue&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas041.jpg" alt="canvas041"></p>
<p>14.difference,exclusion ：从顶层减去底层</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;difference&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas042.jpg" alt="canvas042"></p>
<p>15.soft-light ：柔光模式(纯黑色或白色不会产生纯黑色或白色)</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;soft-light&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas043.jpg" alt="canvas043"></p>
<p>16.hard-light ：新绘制的图形和目标canvas中已经存在的图形的像素相乘，新绘制的图形和已经存在的图形图层交换</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;hard-light&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas044.jpg" alt="canvas044"></p>
<p>17.lighter ：新绘制的图形和目标canvas中已经存在的图形的重叠部分的颜色由添加的颜色值决定</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;lighter&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas045.jpg" alt="canvas045"></p>
<p>18.copy ：只有新图形会被保留，其他都被清除掉</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;copy&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas046.jpg" alt="canvas046"></p>
<p>19.xor ：新绘制的图形和目标canvas中已经存在的图形的重叠部分变透明</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;xor&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas047.jpg" alt="canvas047"></p>
<p>20.multiply ：新绘制的图形和目标canvas中已经存在的图形像素相乘，图片会变暗</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;multiply&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas048.jpg" alt="canvas048"></p>
<p>21.screen ：新绘制的图形和目标canvas中已经存在的图形像素会被反转，相乘，然后再反转，图片会变亮</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;screen&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas049.jpg" alt="canvas049"></p>
<p>22.overlay ：multiply 和 screen模式的组合。暗的图层会变得更暗，亮的图层会变得更亮</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;overlay&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas034.jpg" alt="canvas034"></p>
<p>23.darken ：保留新绘制的图形和目标canvas中已经存在的图形的最暗像素</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;darken&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas048.jpg" alt="canvas048"></p>
<p>24.lighten ：保留新绘制的图形和目标canvas中已经存在的图形的最亮像素</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;lighten&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas049.jpg" alt="canvas049"></p>
<p>24.color-dodge,color-burn ：通过反转的源图层来分类底部的目标图层</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.fillStyle = &quot;#ff0000&quot;;
        context.arc(100, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();

       context.globalCompositeOperation = &quot;color-dodge&quot;;

        context.beginPath();
        context.fillStyle = &quot;#00ff00&quot;;
        context.arc(150, 100, 50, 0, (Math.PI / 180) * 2, true);
        context.fill();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas034.jpg" alt="canvas034"></p>
<h2 id="裁切路径"><a href="#裁切路径" class="headerlink" title="裁切路径"></a>裁切路径</h2><p>使用 clip 方法来创建一个新的裁切路径。<br>默认情况下，canvas 有一个与它自身一样大的裁切路径（也就是没有裁切效果）。</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        var img = new Image();
        img.onload = function() {
            context.beginPath();
            context.arc(210, 80, 50, 0, (Math.PI / 180) * 2, true);
            context.clip();
            context.drawImage(img, 10, 10)
        }
        img.src = &quot;images/works3.jpg&quot;;
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas050.jpg" alt="canvas050"><br>上面的例子 ：用 clip 方法创建一个圆形的裁切路径，裁切路径创建之后所有出现在它里面的东西才会画出来</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 Canvas(八) 绘制图片]]></title>
      <url>http://jsgrblog.win/2016/12/26/HTML5Canvas%E7%BB%98%E5%88%B6%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<h2 id="Canvas-绘制图片"><a href="#Canvas-绘制图片" class="headerlink" title="Canvas 绘制图片"></a>Canvas 绘制图片</h2><p>在canvas中绘制图片元素，有以下3种类型：</p>
<p>1.由Image()构造函数创建的图片，也可以是任何的<code>&lt;img&gt;</code>元素<br>2.HTML<code>&lt;video&gt;</code>元素作为图片源，会从视频中截取当前帧作为图片源<br>3.另一个<code>&lt;canvas&gt;</code>元素作为图片源<br><a id="more"></a></p>
<h3 id="绘制图方式"><a href="#绘制图方式" class="headerlink" title="绘制图方式"></a>绘制图方式</h3><p>1.drawImage(image, dx, dy);<br>2.drawImage(image, dx, dy, dw, dh);<br>3.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dw, dh);</p>
<h4 id="基本绘制图片方法：drawImage-image-dx-dy"><a href="#基本绘制图片方法：drawImage-image-dx-dy" class="headerlink" title="基本绘制图片方法：drawImage(image, dx, dy)"></a>基本绘制图片方法：drawImage(image, dx, dy)</h4><p>1.image ：是要绘制的图片<br>2.dx(destinationX) : X轴起始位置<br>3.dy(destinationY) : Y轴起始位置</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        var img = new Image();
        img.onload = function() {
            context.drawImage(img, 0, 0);
        };
        img.src = &apos;images/1.png&apos;;
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas027.jpg" alt="canvas027"></p>
<h4 id="绘制并缩放图片：drawImage-image-dx-dy-dw-dh"><a href="#绘制并缩放图片：drawImage-image-dx-dy-dw-dh" class="headerlink" title="绘制并缩放图片：drawImage(image, dx, dy, dw, dh)"></a>绘制并缩放图片：drawImage(image, dx, dy, dw, dh)</h4><p>1.dw(destinationWidth) : X轴缩放<br>2.dh(destinationHeight) : Y轴缩放</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        var img = new Image();
        img.onload = function() {
            for(var i = 0; i &lt; 5; i++) {
                for(var j = 0; j &lt; 5; j++) {
                    context.drawImage(img, i * 60, j * 60, 60, 60);
                }
            }
        };
        img.src = &apos;images/1.png&apos;;
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas028.jpg" alt="canvas028"></p>
<h4 id="图片裁剪方法：drawImage-image-sx-sy-sWidth-sHeight-dx-dy-dw-dh"><a href="#图片裁剪方法：drawImage-image-sx-sy-sWidth-sHeight-dx-dy-dw-dh" class="headerlink" title="图片裁剪方法：drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dw, dh)"></a>图片裁剪方法：drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dw, dh)</h4><p>1.sx(sourceX) : 在源图片的X轴位置<br>2.sy(sourceY) : 在源图片的Y轴位置<br>3.sWidth : 裁剪源图片的宽度<br>4.sHeight : 裁剪源图片的高度</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        var img = new Image();
        img.onload = function() {
            context.drawImage(img, 0, 0, 80, 80, 10, 10, 120, 120);
        }
        img.src = &quot;images/1.png&quot;;
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas029.jpg" alt="canvas029"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 Canvas(七) 绘制文本]]></title>
      <url>http://jsgrblog.win/2016/12/26/HTML5Canvas%E7%BB%98%E5%88%B6%E6%96%87%E6%9C%AC/</url>
      <content type="html"><![CDATA[<h2 id="Canvas-绘制文本"><a href="#Canvas-绘制文本" class="headerlink" title="Canvas 绘制文本"></a>Canvas 绘制文本</h2><p>canvas 提供了两种方法来渲染文本:<br>1.fillText(text, x, y [, maxWidth])<br>2.strokeText(text, x, y [, maxWidth])<br>text ：要绘制的文字<br>x ：开始绘制的X轴坐标<br>Y ：开始绘制的Y轴坐标<br>maxWidth ：绘制的最大宽度（可选）<br><a id="more"></a></p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.font = &quot;normal normal 30px Verdana&quot;;
        context.fillStyle = &quot;#000000&quot;;
        context.fillText(&quot;HTML5 Canvas 绘制文本&quot;, 50, 50);

        context.font = &quot;normal normal 30px Arial&quot;;
        context.strokeStyle = &quot;#000000&quot;;
        context.strokeText(&quot;HTML5 Canvas 绘制文本&quot;, 50, 100);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas024.jpg" alt="canvas024"></p>
<h3 id="设置字体样式"><a href="#设置字体样式" class="headerlink" title="设置字体样式"></a>设置字体样式</h3><p>这些属性和CSS中设置字体的属性是兼容的 ：<code>[font style][font weight][font size][font face]</code><br>1.font style可取值有：<br><code>normal</code><br><code>italic</code><br><code>oblique</code><br><code>inherit</code><br>2.font weight可取值有：<br><code>normal</code><br><code>bold</code><br><code>bolder</code><br><code>lighter</code><br><code>auto</code><br><code>inherit</code><br><code>100</code><br><code>200</code><br><code>300</code><br><code>400</code><br><code>500</code><br><code>600</code><br><code>700</code><br><code>800</code><br><code>900</code><br>3.font size：字体的大小(px)<br>4.ont face：字体：verdana, arial, serif, sans-serif, cursive, fantasy, monospace等</p>
<h3 id="文本对齐（水平）"><a href="#文本对齐（水平）" class="headerlink" title="文本对齐（水平）"></a>文本对齐（水平）</h3><p>textAlign : 定义文字在水平方向对齐方式<br>context.textAlign = “left” || “right” || “center” || “start” || “end”;</p>
<p>1.start    : 从x左边开始绘制<br>2.left : 从x左边开始绘制，和start属性相同<br>3.center : x坐标位于文本的中心<br>4.end ： x坐标位于文本的末尾<br>5.right ：x坐标位于文本的末尾，和end属性相同</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.stokeStyle = &quot;#000&quot;;
        context.lineWidth = 1;
        context.beginPath();
        context.moveTo(250, 0);
        context.lineTo(250, 250);
        context.stroke();
        context.closePath();

        context.font = &quot;normal normal 30px arial&quot;;
        context.fillStyle = &quot;#000&quot;;

        context.textAlign = &quot;start&quot;;
        context.fillText(&quot;start&quot;, 250, 30);

        context.textAlign = &quot;left&quot;;
        context.fillText(&quot;left&quot;, 250, 80);

        context.textAlign = &quot;center&quot;;
        context.fillText(&quot;center&quot;, 250, 130);

        context.textAlign = &quot;right&quot;;
        context.fillText(&quot;right&quot;, 250, 180);

        context.textAlign = &quot;end&quot;;
        context.fillText(&quot;end&quot;, 250, 230);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas025.jpg" alt="canvas025"></p>
<h3 id="文本对齐-垂直"><a href="#文本对齐-垂直" class="headerlink" title="文本对齐(垂直)"></a>文本对齐(垂直)</h3><p>textBaseline : 定义文字在垂直方向对齐方式<br>context.textBaseline = “top” || “hanging” || “middle” || “alphabetic” || “ideographic” || “bottom”;</p>
<p>1.top : 以文本中最高的字符为基线进行对齐<br>2.hanging ：文本的基线是悬停线（hanging baseline）和top取值基本相同，多数情况下看不出有什么区别<br>3.middle ：文本的基线是文字的中心线<br>4.alphabetic ：文本的基线是正常的文字基线<br>5.ideographic ：文本的基线是水平方向的字形底部<br>6.bottom　：文本以文本中最低的字符为基线进行对齐</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.stokeStyle = &quot;#000&quot;;
        context.lineWidth = 1;
        context.beginPath();
        context.moveTo(0, 75);
        context.lineTo(800, 75);
        context.stroke();
        context.closePath();

        context.font = &quot;normal normal 30px arial&quot;;
        context.fillStyle = &quot;#000&quot;;

        context.textBaseline = &quot;top&quot;;
        context.fillText(&quot;top&quot;, 0, 75);

        context.textBaseline = &quot;hanging&quot;;
        context.fillText(&quot;hanging&quot;, 50, 75);

        context.textBaseline = &quot;middle&quot;;
        context.fillText(&quot;middle&quot;, 170, 75);

        context.textBaseline = &quot;alphabetic&quot;;
        context.fillText(&quot;alphabetic&quot;, 270, 75);

        context.textBaseline = &quot;ideographic&quot;;
        context.fillText(&quot;ideographic&quot;, 430, 75);

        context.textBaseline = &quot;bottom&quot;;
        context.fillText(&quot;bottom-glyph&quot;, 600, 75);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas026.jpg" alt="canvas026"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 Canvas(六) 填充模式]]></title>
      <url>http://jsgrblog.win/2016/12/26/HTML5Canvas%E5%A1%AB%E5%85%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="Canvas-填充模式"><a href="#Canvas-填充模式" class="headerlink" title="Canvas 填充模式"></a>Canvas 填充模式</h2><p>填充模式 ：canvas中使用某张图片作为一种模式来填充图形<br>通过createPattern(image, type)方法来创建一种填充模式</p>
<p>canvas的填充模式有2个属性：<br>1.image : 一个HTML图片，另一个<code>&lt;canvas&gt;</code>或一个<code>&lt;video&gt;</code>等<br>2.type  ：使用图片来创建特定的模式(repeat的值和表示的意思和CSS同样)<br>repeat：在水平和垂直方向上重复图片<br>repeat-x：只在水平方向上重复图片<br>repeat-y：只在垂直方向上重复图片<br>no-repeat：不重复图片，只显示一次<br><a id="more"></a></p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        var img = new Image();
        img.src = &apos;images/canvas021.png&apos;
        //使用 Image 对象的 onload 来确保设置图案之前图像已经装载完毕
        img.onload = function() {
            var pattern = context.createPattern(img, &apos;repeat&apos;);
            context.fillStyle = pattern;
            context.fillRect(0, 0, 200, 200)
        }
    }
    &lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas021.jpg" alt="canvas021"><br>上面的例子是图片canvas021.png <img src="http://ohyo58iyo.bkt.clouddn.com/canvas021.png" alt="canvas021">（23px*23px）使用canvas填充模式生成的大图</p>
<h3 id="Canvas-填充规则"><a href="#Canvas-填充规则" class="headerlink" title="Canvas 填充规则"></a>Canvas 填充规则</h3><p>使用fill（clip和isPointinPath ）可以选择一个填充规则。<br>填充规则根据某处在路径的外面或者里面来决定该处是否被填充，对于路径相交或者路径被嵌套的时候是有用的。<br>有2个值 ：<br>1.nonzero（默认值）</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);
        context.arc(100, 100, 50, 0, Math.PI * 2, true);
        context.arc(100, 100, 20, 0, Math.PI * 2, true);
        context.fill(&quot;nonzero&quot;);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas022.jpg" alt="canvas022"></p>
<p>2.evenodd</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);
        context.arc(100, 100, 50, 0, Math.PI * 2, true);
        context.arc(100, 100, 20, 0, Math.PI * 2, true);
        context.fill(&quot;evenodd&quot;);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas023.jpg" alt="canvas023"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 Canvas(五) 绘制阴影]]></title>
      <url>http://jsgrblog.win/2016/12/26/HTML5Canvas%E7%BB%98%E5%88%B6%E9%98%B4%E5%BD%B1/</url>
      <content type="html"><![CDATA[<h2 id="Canvas-绘制阴影"><a href="#Canvas-绘制阴影" class="headerlink" title="Canvas 绘制阴影"></a>Canvas 绘制阴影</h2><p>canvas可以绘制出图形或文字的阴影效果。书写方式和CSS类型，又有点区别。</p>
<p>canvas的阴影有4个属性：<br>1.shadowOffsetX ：阴影和图形之间的距离 X轴方向（正值表示在图形的右边，负值表示在图形的左边）<br>2.shadowOffsetY ：阴影和图形之间的距离 Y轴方向（正值表示在图形的下边，负值表示在图形的上边）<br>3.shadowBlur ：阴影的模糊效果（数值越大，阴影越模糊 1 ：最模糊；数值越小，用于越清晰 0 ：不模糊）<br>4.shadowColor ：阴影的颜色（标准的 CSS 颜色值）默认黑色<br><a id="more"></a></p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.shadowOffsetX = 10;
        context.shadowOffsetY = 10;
        context.shadowBlur = 10;
        context.shadowColor = &quot;#ff0000&quot;;
        context.fillStyle = &quot;#00ff00&quot;;
        context.fillRect(10, 10, 100, 100);

        context.shadowOffsetX = 5;
        context.shadowOffsetY = 5;
        context.shadowBlur = 5;
        context.shadowColor = &quot;#00ffff&quot;;
        context.fillStyle = &quot;#ff00ff&quot;;
        context.font = &quot;30px Arial&quot;;
        context.fillText(&quot;Canvas 绘制阴影&quot;, 10, 150);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas020.jpg" alt="canvas020"><br>canvas的阴影4个值可以按具体需要设置。上面的例子，文字和矩形的值是不同的。效果也是不同的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 Canvas(四) 绘制渐变色]]></title>
      <url>http://jsgrblog.win/2016/12/24/HTML5Canvas%E7%BB%98%E5%88%B6%E6%B8%90%E5%8F%98%E8%89%B2/</url>
      <content type="html"><![CDATA[<h2 id="Canvas-绘制渐变色"><a href="#Canvas-绘制渐变色" class="headerlink" title="Canvas 绘制渐变色"></a>Canvas 绘制渐变色</h2><p>Canvas渐变是一种用于填充或描边图形的颜色模式。渐变色是由不同的颜色进行过渡，而不是单一的颜色。</p>
<p>渐变按照类型来分可以分为两种类型：<br>1.线性渐变 ：以线性的模式来改变颜色，也就是水平，垂直或对角方向。<br>2.径向渐变 ：以圆形模式来改变颜色，颜色以圆形的中心向外辐射。<br><a id="more"></a></p>
<h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><p>线性渐变以线性的模式来改变颜色。<br>可以通过2D上下文的createLinearGradient(x1,y1,x2,y2)方法来创建一个线性渐变。</p>
<p>水平的线性渐变仅仅是水平方向的参数值(x1和x2)不同 :<br><code>var linearGradientX = context.createLinearGradient(10,10,100,10);</code></p>
<p>垂直的线性渐变仅仅是垂直方向的参数值(y1和y2)不同 :<br><code>var linearGradientY = context.createLinearGradient(10,10,10,100);</code></p>
<p>一个对角线的线性渐变水平和垂直方向上的参数都不相同:<br><code>var linearGradientXY = context.createLinearGradient(10,10,100,100);</code></p>
<h3 id="颜色停止点（Color-Stops）"><a href="#颜色停止点（Color-Stops）" class="headerlink" title="颜色停止点（Color Stops）"></a>颜色停止点（Color Stops）</h3><p>可以在渐变对象上使用addColorStop()方法来指定渐变的颜色</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);
        var linearGradient1 = context.createLinearGradient(10, 10, 200, 10);
        linearGradient1.addColorStop(0, &apos;rgb(255, 0, 0)&apos;);
        linearGradient1.addColorStop(1, &apos;rgb(  0, 255, 0)&apos;);
        context.fillStyle = linearGradient1;
        context.fillRect(10, 10, 200, 100);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas015.jpg" alt="canvas015"><br>addColorStop()方法有两个参数。<br>第一个参数是0-1之间的一个数值，这个数值指定该颜色进入渐变多长的距离。<br>第二个参数是颜色值。<br>上面的例子中为渐变添加了两种颜色。第一种颜色是红色，设置在渐变的开始处。第二种颜色是绿色，设置在渐变的结束处。</p>
<p>可以添加通过addColorStop()函数来添加更多的颜色</p>
<pre><code>var linearGradient2 = context.createLinearGradient(0,0,100,0);
linearGradient2.addColorStop(0  , &apos;rgb(255, 0, 0)&apos;);
linearGradient2.addColorStop(0.5, &apos;rgb(  0, 255, 0);
linearGradient2.addColorStop(1  , &apos;rgb(  0, 0, 255)&apos;);
</code></pre><p>上面的代码整个渐变的顺序 ：红色–绿色–蓝色。</p>
<h3 id="使用渐变来填充和描边图形"><a href="#使用渐变来填充和描边图形" class="headerlink" title="使用渐变来填充和描边图形"></a>使用渐变来填充和描边图形</h3><pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var canvas = document.getElementById(&quot;canvas&quot;);
        var context = canvas.getContext(&quot;2d&quot;);

        var linearGradient1 = context.createLinearGradient(10, 0, 100, 0);
        linearGradient1.addColorStop(0, &apos;rgb(246, 36, 89)&apos;);
        linearGradient1.addColorStop(0.5, &apos;rgb( 31, 58, 147)&apos;);
        linearGradient1.addColorStop(1, &apos;rgb( 34, 49,  63)&apos;);
        context.strokeStyle = linearGradient1;
        context.strokeRect(10, 10, 100, 100);

        var linearGradient2 = context.createLinearGradient(150, 0, 250, 0);
        linearGradient2.addColorStop(0, &apos;rgb(255, 0,   0)&apos;);
        linearGradient2.addColorStop(0.5, &apos;rgb(  0,255, 0)&apos;);
        linearGradient2.addColorStop(1, &apos;rgb(  0, 0,255)&apos;);
        context.fillStyle = linearGradient2;
        context.fillRect(150, 10, 100, 100);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas016.jpg" alt="canvas016"></p>
<h3 id="渐变的长度"><a href="#渐变的长度" class="headerlink" title="渐变的长度"></a>渐变的长度</h3><p>渐变的长度的概念 ：<br>1.设置渐变从x=0扩展到x=100的距离，那么渐变只会作用在水平方向上从0到100的距离的范围内。<br>2.超出这个范围的图形将任然受渐变色的影响，但是在这个范围之外的颜色只会是渐变的开始或结束颜色。</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var canvas = document.getElementById(&quot;canvas&quot;);
        var context = canvas.getContext(&quot;2d&quot;);

        var linearGradient1 = context.createLinearGradient(150, 0, 350, 0);
        linearGradient1.addColorStop(0, &apos;rgb(255, 0, 0)&apos;);
        linearGradient1.addColorStop(0.5, &apos;rgb(0, 255, 0)&apos;);
        linearGradient1.addColorStop(1, &apos;rgb(0,   0, 255)&apos;);

        context.fillStyle = linearGradient1;

        context.fillRect(10, 10, 130, 100);
        context.fillRect(150, 10, 200, 100);
        context.fillRect(360, 10, 130, 100);
        context.fillRect(50, 120, 190, 100);
        context.fillRect(250, 120, 190, 100);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas017.jpg" alt="canvas017"></p>
<h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><p>径向渐变 : 一种圆形的颜色扩展模式，颜色从圆心位置开始向外辐射<br>一个径向渐变于两个圆形来定义。<br>每一个圆都有一个圆心和一条半径。<br>createRadialGradient(x1, y1, r1, x2, y2, r2);<br>1.x1 ：第一个圆圆心的X坐标<br>2.y1 ： 第一个圆圆心的Y坐标<br>3.r1 ： 第一个圆的半径<br>4.x2 ： 第二个圆圆心的X坐标<br>5.y2 ： 第二个圆圆心的Y坐标<br>6.r2 ： 第二个圆的半径</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var canvas = document.getElementById(&quot;canvas&quot;);
        var context = canvas.getContext(&quot;2d&quot;);

        var radialGradient1 = context.createRadialGradient(100, 100, 50, 100, 100, 100);

        radialGradient1.addColorStop(0, &apos;rgb(0, 255, 0)&apos;);
        radialGradient1.addColorStop(1, &apos;rgb(0, 0, 255)&apos;);

        context.fillStyle = radialGradient1;
        context.fillRect(0, 0, 200, 200);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas018.jpg" alt="canvas018"></p>
<p>两个圆必须设置不同的半径，形成一个内圆和一个外圆。这样渐变色就从一个圆形辐射到另一个圆形。</p>
<p>颜色停止点会被添加到这两个圆形之间，例如上面的代码中，第一个颜色停止点中的参数0表示该颜色从第一个圆形开始，第二个颜色停止点中的参数1表示第二种颜色从第二个圆形开始。</p>
<p>如果两个圆形的圆心位置相同，那么径向渐变将是一个完整的圆形。<br>如果两个圆的圆心位置不相同，那么径向渐变看起来就像是一个探照灯发出的光线。例如下面的样子：</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var canvas = document.getElementById(&quot;canvas&quot;);
        var context = canvas.getContext(&quot;2d&quot;);

        var radialGradient1 = context.createRadialGradient(120, 120, 50, 100, 100, 100);

        radialGradient1.addColorStop(0, &apos;rgb(0, 255, 0)&apos;);
        radialGradient1.addColorStop(1, &apos;rgb(0, 0, 255)&apos;);

        context.fillStyle = radialGradient1;
        context.fillRect(0, 0, 200, 200);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas019.jpg" alt="canvas019"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 Canvas(三) 绘制路径]]></title>
      <url>http://jsgrblog.win/2016/12/24/HTML5Canvas%E7%BB%98%E5%88%B6%E8%B7%AF%E5%BE%84/</url>
      <content type="html"><![CDATA[<h2 id="Canvas-绘制路径"><a href="#Canvas-绘制路径" class="headerlink" title="Canvas 绘制路径"></a>Canvas 绘制路径</h2><p>图形的基本元素是路径。路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合。一个路径，甚至一个子路径，都是闭合的。使用路径绘制图形需要一些额外的步骤。</p>
<p>1.创建路径起始点。<br>2.画出路径。<br>3.路径闭合。<br>4.通过描边或填充路径区域来渲染图形。<br><a id="more"></a></p>
<h3 id="开始和关闭一条路径"><a href="#开始和关闭一条路径" class="headerlink" title="开始和关闭一条路径"></a>开始和关闭一条路径</h3><pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas  = document.getElementById(&quot;ex1&quot;);
    var context = canvas.getContext(&quot;2d&quot;);
    context.beginPath();
    context.closePath()；
&lt;/script&gt;
</code></pre><h3 id="moveTo"><a href="#moveTo" class="headerlink" title="moveTo()"></a>moveTo()</h3><p>在canvas中绘制一条路径的时候，可以想象自己正在使用一支“虚拟笔”。这支虚拟笔总是位于某个位置，你可以使用2D上下文的moveTo(x, y)函数来移动这支虚拟笔。<br><code>context.moveTo(10,10);</code> 将“虚拟笔”移动到(10,10)这个坐标点上。</p>
<h3 id="lineTo-函数"><a href="#lineTo-函数" class="headerlink" title="lineTo()函数"></a>lineTo()函数</h3><p>lineTo函数用于从虚拟笔的当前位置绘制一条直线到lineTo()函数中指定的点。</p>
<pre><code>context.beginPath();
context.moveTo(20,20);
context.lineTo(100,100);
context.closePath();
</code></pre><p>首先移动虚拟笔到(20,20)坐标点位置，然后从这个点绘制一条直线到(100,100)坐标点。<br>lineTo()函数还会将虚拟笔移动到执行的结束点位置。上面的例子中是移动到（100,100）的位置。</p>
<h3 id="stroke-函数-fill-函数"><a href="#stroke-函数-fill-函数" class="headerlink" title="stroke()函数 + fill()函数"></a>stroke()函数 + fill()函数</h3><p>stroke()函数用于路径操作指定的图形的外轮廓。<br>fill()函数用于填充有路径操作指定的图形。</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);

        context.beginPath();
        context.moveTo(10, 10);
        context.lineTo(10, 100);
        context.lineTo(100, 100);
        context.lineTo(10, 10);
        context.closePath();
        context.stroke();

        context.beginPath();
        context.moveTo(150, 10);
        context.lineTo(150, 100);
        context.lineTo(250, 100);
        context.lineTo(150, 10);
        context.closePath();
        context.fill();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas006.jpg" alt="canvas绘制路径006"></p>
<h3 id="线条的宽度"><a href="#线条的宽度" class="headerlink" title="线条的宽度"></a>线条的宽度</h3><p><code>context.lineWidth = 5;</code></p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);
        context.beginPath();
        context.moveTo(10, 10);
        context.lineTo(10, 100);
        context.lineWidth = 5;
        context.stroke();
        context.closePath();

        context.beginPath();
        context.moveTo(50, 10);
        context.lineTo(50, 100);
        context.lineWidth = 10;
        context.stroke();
        context.closePath();

        context.beginPath();
        context.moveTo(90, 10);
        context.lineTo(90, 100);
        context.lineWidth = 15;
        context.stroke();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas007.jpg" alt="canvas007"><br>当绘制的线条宽度大于1的时候，扩展的线条宽度将平均分配在线条中心线的两侧。<br>距离来说，如果你从(10,10)这个点绘制一条直线到(10,100)这个点，线条的宽度为10，那么，实际上是从(5,10)这个点开始绘制，然后扩展到(5,15)这个点。<br>在垂直绘制(5,10)和(15,10)这两个点，就像是绘制一个矩形。</p>
<h3 id="线条的线头样式（Line-Cap）"><a href="#线条的线头样式（Line-Cap）" class="headerlink" title="线条的线头样式（Line Cap）"></a>线条的线头样式（Line Cap）</h3><p>可以设置线条的线头样式。线头的样式通过2D上下文的lineCap属性来设置。它有三个可选值：<br>1.butt : 线头是扁平且和线正交的样式<br>2.round : 线头是一个圆角的线头，圆的半径等于线条宽度的1/2<br>3.square : 线头会在线的末端绘制一个矩形。矩形的大小为：线条的宽度 * 线条的宽/2</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);
        context.lineWidth = 10;
        context.beginPath();
        context.moveTo(10, 10);
        context.lineTo(10, 100);
        context.lineCap = &quot;butt&quot;;
        context.stroke();
        context.closePath();

        context.beginPath();
        context.moveTo(50, 10);
        context.lineTo(50, 100);
        context.lineCap = &quot;round&quot;;
        context.stroke();
        context.closePath();

        context.beginPath();
        context.moveTo(90, 10);
        context.lineTo(90, 100);
        context.lineCap = &quot;square&quot;;
        context.stroke();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas008.jpg" alt="canvas008"></p>
<p>上面是几个不同线头样式的线条的例子。所有的线条的宽度都是10。<br>最左边线条的lineCap的取值为butt，中间的线条的lineCap的取值为round，最右边的线条的lineCap的取值为square。</p>
<p>正如上面的结果所示：<br>1.square线头的线条和round线头的线条要比butt线头的线条要长。<br>2.square线头的线条和round线头的线条一样长。</p>
<h3 id="线条的连接"><a href="#线条的连接" class="headerlink" title="线条的连接"></a>线条的连接</h3><p>lineJoin属性用于定义两条线条连接处的点如何绘制。两条线条连接处的点被称为“连接点”。<br>lineJoin属性有下面的三种取值：<br>1.miter ：连接点是一个三角形的连接点<br>2.bevel ：连接点是一个平头的连接点<br>3.round ：连接点是一个圆角的连接点</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);
        context.lineWidth = 10;
        context.beginPath();
        context.moveTo(10, 10);
        context.lineTo(10, 100);
        context.lineTo(100, 100);
        context.lineJoin = &quot;miter&quot;;
        context.stroke();
        context.closePath();

        context.beginPath();
        context.moveTo(130, 10);
        context.lineTo(130, 100);
        context.lineTo(220, 100);
        context.lineJoin = &quot;bevel&quot;;
        context.stroke();
        context.closePath();

        context.beginPath();
        context.moveTo(250, 10);
        context.lineTo(250, 100);
        context.lineTo(340, 100);
        context.lineJoin = &quot;round&quot;;
        context.stroke();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas009.jpg" alt="canvas009"><br>上面分别是三种线条连接点的例子，从左到右的lineJoin属性分别是：miter，bevel和round。</p>
<h3 id="绘制曲线"><a href="#绘制曲线" class="headerlink" title="绘制曲线"></a>绘制曲线</h3><p>arc(x, y, radius, startAngle, endAngle, anticlockwise) 函数可以用于绘制一条曲线。<br>arc()函数有6个参数：<br>1.x：圆弧的中心点的X坐标位置。<br>2.y：圆弧的中心点的Y坐标位置。<br>3.radius：圆弧的半径。<br>4.startAngle：圆弧开始的角弧度。<br>5.endAngle：圆弧结束的角弧度。<br>6.anticlockwise：设置是以顺时针还是逆时针绘制圆弧，false为顺时针。</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);
        context.lineWidth = 5;
        context.beginPath();
        context.arc(100, 50, 50, 0, (Math.PI / 180) * 145, false);
        context.stroke();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas010.jpg" alt="canvas010"><br>上面的代码绘制了一条弧线，它的中心点位于(100,50)坐标点，半径为50，从0度开始到145度结束。</p>
<p>上面的例子如果将anticlockwise设置为true，会得到下面的结果：<br><img src="http://ohyo58iyo.bkt.clouddn.com/canvas011.jpg" alt="canvas011"><br>如果你要画一个完整的圆，可以简单的设置startAngle为0，endAngle设置为2 <em> Math.PI，它相当于(Math.PI / 180) </em> 360。</p>
<h3 id="arcTo-函数"><a href="#arcTo-函数" class="headerlink" title="arcTo()函数"></a>arcTo()函数</h3><p>arcTo()函数 ：从当前的点绘制一条曲线到参数指定的点，曲线的半径也由参数指定。<br>它的语法为：arcTo(x1, y1, x2, y2, radius)。<br>注意：参数中x1, y1, x2, y2指的是这个点的控制点。<br>arcTo()函数可以使用lineTo()和arc函数来模仿。</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);
        context.lineWidth = 5;
        context.beginPath();
        context.arc(100, 55, 50, 0, (Math.PI / 180) * 145, true);
        context.arcTo(50, 50, 100, 100, 50);
        context.stroke();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas012.jpg" alt="canvas012"></p>
<h3 id="quadraticCurveTo-函数"><a href="#quadraticCurveTo-函数" class="headerlink" title="quadraticCurveTo()函数"></a>quadraticCurveTo()函数</h3><p>quadraticCurveTo()函数用于绘制一条二次贝兹曲线。<br>这条曲线由一个控制点来控制，它的语法为：quadraticCurveTo(cp1x, cp1y, x, y)。</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);
        context.lineWidth = 5;
        context.beginPath();
        context.moveTo(50, 50);
        context.quadraticCurveTo(50, 150, 150, 150);
        context.stroke();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas013.jpg" alt="canvas013"><br>上面的代码绘制一条从(50,50)开始到(150,150)的二次贝兹曲线，这条曲线的控制点为(50,150)</p>
<h3 id="bezierCurveTo-函数"><a href="#bezierCurveTo-函数" class="headerlink" title="bezierCurveTo()函数"></a>bezierCurveTo()函数</h3><p>bezierCurveTo()函数用于从一个点到另一个点绘制一条三次贝兹曲线。<br>三次贝兹曲线有两个控制点，而二次贝兹曲线只有一个控制点。<br>它的语法为：bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)。</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);
        context.lineWidth = 5;
        context.beginPath();
        context.moveTo(50, 50);
        context.bezierCurveTo(10, 75, 10, 125, 50, 150);
        context.stroke();
        context.closePath();
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas014.jpg" alt="canvas014"><br>上面的代码绘制一条从(50,50)绘制一条三次贝兹曲线到(50,150)，两个控制点分别为：(10,75)和(10,125)。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 Canvas(二) 绘制矩形]]></title>
      <url>http://jsgrblog.win/2016/12/24/HTML5Canvas%E7%BB%98%E5%88%B6%E7%9F%A9%E5%BD%A2/</url>
      <content type="html"><![CDATA[<h2 id="Canvas-绘制矩形"><a href="#Canvas-绘制矩形" class="headerlink" title="Canvas 绘制矩形"></a>Canvas 绘制矩形</h2><p>canvas提供了三种方法绘制矩形：</p>
<ol>
<li>填充的矩形:  fillRect( x ,y ,width, height)</li>
<li>描边的矩形:  strokeRect( x ,y ,width, height)</li>
<li>清除指定矩形区域:  clearRect( x ,y ,width, height)<a id="more"></a>
</li>
</ol>
<h3 id="使用-fillRect-strokeRect-clearRect-绘制矩形"><a href="#使用-fillRect-strokeRect-clearRect-绘制矩形" class="headerlink" title="使用 fillRect() strokeRect() clearRect() 绘制矩形"></a>使用 fillRect() strokeRect() clearRect() 绘制矩形</h3><pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);
        context.strokeRect(10, 10, 200, 200);
        context.fillRect(50, 50, 100, 100);
        context.clearRect(60, 60, 50, 50);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas001.jpg" alt="canvas绘制矩形001"></p>
<h3 id="strokeRect"><a href="#strokeRect" class="headerlink" title="strokeRect()"></a>strokeRect()</h3><p>strokeRect()方法用于绘制一个描边矩形，没有填充色。同样，它由x和y属性决定矩形的左上角位置，width和height实现决定矩形的宽度和高度。</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);
        context.strokeRect(10, 10, 200, 200);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas002.jpg" alt="canvas绘制矩形002"></p>
<p>使用2D上下文的lineWidth属性来设置描边的宽度。</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);
        context.lineWidth = 5;
        context.strokeRect(10, 10, 200, 200);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas003.jpg" alt="canvas绘制矩形003"></p>
<h3 id="矩形的颜色-：-fillStyle-strokeStyle"><a href="#矩形的颜色-：-fillStyle-strokeStyle" class="headerlink" title="矩形的颜色 ： fillStyle strokeStyle"></a>矩形的颜色 ： fillStyle strokeStyle</h3><p>使用2D上下文的fillStyle和strokeStyle来设置绘制矩形的颜色</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);
        context.lineWidth = 5;
        context.strokeStyle=&quot;#ff0000&quot;
        context.strokeRect(10, 10, 200, 200);
        context.fillStyle=&quot;#00ff00&quot;
        context.fillRect(50, 50, 100, 100);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas004.jpg" alt="canvas绘制矩形004"></p>
<h3 id="clearRect"><a href="#clearRect" class="headerlink" title="clearRect()"></a>clearRect()</h3><p>2D上下文的clearRect()函数用于在Canvas中清除一个矩形区域。被清除的矩形区域变为透明。</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas = document.getElementById(&quot;canvas&quot;);
    if(canvas.getContext) {
        var context = canvas.getContext(&apos;2d&apos;);
        context.lineWidth = 5;
        context.strokeStyle=&quot;#ff0000&quot;
        context.strokeRect(10, 10, 200, 200);
        context.fillStyle=&quot;#00ff00&quot;
        context.fillRect(50, 50, 100, 100);
        context.clearRect(80, 80, 150, 50);
    }
&lt;/script&gt;
</code></pre><p><img src="http://ohyo58iyo.bkt.clouddn.com/canvas005.jpg" alt="canvas绘制矩形005"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 Canvas(一) 学习前言]]></title>
      <url>http://jsgrblog.win/2016/12/24/HTML5Canvas%E5%AD%A6%E4%B9%A0%E5%89%8D%E8%A8%80/</url>
      <content type="html"><![CDATA[<h2 id="什么是canvas"><a href="#什么是canvas" class="headerlink" title="什么是canvas"></a>什么是canvas</h2><p>canvas是一个可以使用脚本(通常为JavaScript)在其中绘制图形的 HTML 元素。</p>
<p>canvas 元素不被一些老的浏览器所支持，但是所有的主流浏览器的近期版本都支持。</p>
<p>Internet Explorer 9+, Firefox, Opera, Chrome, 和 Safari 支持 canvas 元素. 注意: Internet Explorer 8 及更早 IE 版本的浏览器不支持 canvas 元素。<br><a id="more"></a><br>基本框架</p>
<pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;350&quot; height=&quot;150&quot;&gt;
     您的浏览器不支持canvas
&lt;/canvas&gt;
&lt;script&gt;
    var canvas=document.getElementById(&quot;canvas&quot;);
    var context=canvas.getContext(&quot;2d&quot;);
&lt;/script&gt;
</code></pre><p>如果浏览器支持HTML5 Canvas元素，那么在 canvas 中的文字会被忽略。如果浏览器不支持HTML5 Canvas元素，这些文字会被作为提示文字显示出来。</p>
<p>你可以将 canvas 元素放置在页面中任何你想显示它的地方，例如放置在一个<code>&lt;div&gt;</code>中</p>
<p>canvas 标签只有两个属性—— width和height，这两个属性是可选的。当我们没有定义时，Canvas 的默认大小为300像素×150像素（宽×高，像素的单位是px）。但是，我们也可以使用HTML的高度和宽度属性来自定义尺寸。</p>
<p>可以用代码去检测 canvas 的支持性</p>
<pre><code>var canvas = document.getElementById(&apos;canvas&apos;);
   if (canvas.getContext){
     var context = canvas.getContext(&apos;2d&apos;);
     // 支持
   } else {
     //不支持
   }
</code></pre><h2 id="使用-JavaScript-来绘制图像"><a href="#使用-JavaScript-来绘制图像" class="headerlink" title="使用 JavaScript 来绘制图像"></a>使用 JavaScript 来绘制图像</h2><p>在真正学习绘制图像之前，我们有必要了解一下Canvas坐标。</p>
<p>Canvas坐标 : 二维网格，以左上角坐标为(0,0)</p>
<p>了解了canvas坐标后，我们开始绘制图像，可以分三步：</p>
<ol>
<li>找到canvas元素</li>
<li>创建context对象<br>canvas 元素有一个做 getContext() 的方法，这个方法是用来获得渲染上下文和它的绘画功能。getContext()只有一个参      数，上下文的格式。这里，我们采用CanvasRenderingContext2D。</li>
<li>绘制你所需的图像</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浏览器动画兼容]]></title>
      <url>http://jsgrblog.win/2016/12/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%A8%E7%94%BB%E5%85%BC%E5%AE%B9/</url>
      <content type="html"><![CDATA[<p>现在CSS已经足够强大了，浏览器也支持的很好，我们考虑IE10+的话，网页里的动画基本可以用CSS来实现，制作简单，修改方便。<br>作为前端对这个是非常喜欢，网上也有很多开源的纯CSS3实现的动画插件，虽然说是不用兼容低版本的IE，但就说目前比较常用的现代浏览器吧：谷歌，火狐，360 8.1. 也是有坑的。<br>今天要吐槽的就是所谓现在浏览器里的360浏览器了，动画兼容实在有问题，搞了两天终于把这个坑踩过了，这里就分享一下，自己挖坑自己填。</p>
<a id="more"></a>
<h2 id="首先先上动画在三个浏览器里的gif图"><a href="#首先先上动画在三个浏览器里的gif图" class="headerlink" title="首先先上动画在三个浏览器里的gif图"></a>首先先上动画在三个浏览器里的gif图</h2><ol>
<li><p>谷歌浏览器<br><img src="http://ohyo58iyo.bkt.clouddn.com/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%A8%E7%94%BB%E5%85%BC%E5%AE%B9chrome.gif" alt="浏览器动画兼容chrome.gif"></p>
</li>
<li><p>火狐浏览器<br><img src="http://ohyo58iyo.bkt.clouddn.com/firefo%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%A8%E7%94%BB%E5%85%BC%E5%AE%B9.gif" alt="firefo浏览器动画兼容.gif"></p>
</li>
<li><p>360浏览器8.1<br><img src="http://ohyo58iyo.bkt.clouddn.com/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%A8%E7%94%BB%E5%85%BC%E5%AE%B9360.gif" alt="浏览器动画兼容360.gif"></p>
</li>
</ol>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>明显可以看到360浏览器的动画会闪动一下，只要操作频繁，还有鼠标快速移动才会出现，正常情况下是不会出现的。既然有坑那就先填了再说，不能找借口，是的，说是这样说，问题是什么原因造成的呢？中医讲究对症下药，那我们也要找到坑才知道要往哪儿填啊。</p>
<p>先把代码贴上再说：</p>
<pre><code>&lt;!DOCTYPE html&gt;
    &lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;浏览器兼容&lt;/title&gt;
        &lt;style type=&quot;text/css&quot;&gt;
            .grid {
                text-align: center;
            }

            .grid figure {
                position: relative;
                float: left;
                overflow: hidden;
                min-width: 320px;
                max-width: 480px;
                max-height: 360px;
                width: 48%;
                height: auto;
                background: #3085a3;
                text-align: center;
                cursor: pointer;
            }

            .grid figure img {
                position: relative;
                display: block;
                min-height: 100%;
                max-width: 100%;
                opacity: 0.8;
            }

            .grid figure figcaption {
                padding: 2em;
                color: #fff;
                text-transform: uppercase;
                font-size: 1.25em;
            }

            figure.effect-goliath {
                background: #df4e4e;
            }

            figure.effect-goliath img,
            figure.effect-goliath h2,
            figure.effect-goliath p {
                -webkit-transition: 0.35s all;
                transition: 0.35s all;
            }

            figure.effect-goliath h2,
            figure.effect-goliath p {
                position: absolute;
                bottom: 0;
                left: 0;
                padding: 15px;
            }

            figure.effect-goliath p {
                text-transform: none;
                font-size: 90%;
                opacity: 0;
                -webkit-transform: translate3d(0, 40px, 0);
                transform: translate3d(0, 40px, 0);
            }

            figure.effect-goliath:hover img {
                -webkit-transform: translate3d(0, -80px, 0);
                transform: translate3d(0, -80px, 0);
            }

            figure.effect-goliath:hover h2 {
                -webkit-transform: translate3d(0, -100px, 0);
                transform: translate3d(0, -100px, 0);
            }

            figure.effect-goliath:hover p {
                opacity: 1;
                -webkit-transform: translate3d(0, 0, 0);
                transform: translate3d(0, 0, 0);
            }
        &lt;/style&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;div class=&quot;grid&quot;&gt;
            &lt;figure class=&quot;effect-goliath&quot;&gt;
                &lt;img src=&quot;http://ohyo58iyo.bkt.clouddn.com/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%A8%E7%94%BB%E5%85%BC%E5%AE%B9.jpg&quot; /&gt;
                &lt;figcaption&gt;
                    &lt;h2&gt;Thoughtful &lt;span&gt;Goliath&lt;/span&gt;&lt;/h2&gt;
                    &lt;p&gt;When Goliath comes out, you should run.&lt;/p&gt;
                &lt;/figcaption&gt;
            &lt;/figure&gt;
        &lt;/div&gt;
    &lt;/body&gt;
    &lt;/html&gt;
</code></pre><p>动画都是用CSS3 transform 属性来实现的，难道问题就是在这个？好像猜对了，试试看，哈哈。</p>
<p>再把修改后的代码放上来：</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;浏览器兼容&lt;/title&gt;
        &lt;style type=&quot;text/css&quot;&gt;
            .grid {
                text-align: center;
            }

            .grid figure {
                position: relative;
                float: left;
                overflow: hidden;
                min-width: 320px;
                max-width: 480px;
                max-height: 360px;
                width: 48%;
                height: auto;
                background: #3085a3;
                text-align: center;
                cursor: pointer;
            }

            .grid figure img {
                position: relative;
                display: block;
                min-height: 100%;
                max-width: 100%;
                opacity: 0.8;
            }

            .grid figure figcaption {
                padding: 1em;
                color: #fff;
                text-transform: uppercase;
                font-size: 1.25em;
                -webkit-backface-visibility: hidden;
                backface-visibility: hidden;
            }

            .grid figure figcaption::before,
            .grid figure figcaption::after {
                pointer-events: none;
            }

            figure.effect-goliath {
                background: #df4e4e;
            }

            figure.effect-goliath img,
            figure.effect-goliath h2,
            figure.effect-goliath p {
                -webkit-transition: 0.35s all;
                transition: 0.35s all;
            }

            figure.effect-goliath img {
                position: relative;
                top: 0;
            }

            figure.effect-goliath h2,
            figure.effect-goliath p {
                position: absolute;
                bottom: 0;
                left: 0;
                padding: 15px;
            }

            figure.effect-goliath p {
                text-transform: none;
                font-size: 90%;
                opacity: 0;
                -webkit-transform: translate3d(0, 40px, 0);
                transform: translate3d(0, 40px, 0);
            }

            figure.effect-goliath:hover img {
                top: -80px;
            }

            figure.effect-goliath:hover h2 {
                -webkit-transform: translate3d(0, -100px, 0);
                transform: translate3d(0, -100px, 0);
            }

            figure.effect-goliath:hover p {
                opacity: 1;
                -webkit-transform: translate3d(0, 0, 0);
                transform: translate3d(0, 0, 0);
            }
        &lt;/style&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;div class=&quot;grid&quot;&gt;
            &lt;figure class=&quot;effect-goliath&quot;&gt;
                &lt;img src=&quot;http://ohyo58iyo.bkt.clouddn.com/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%A8%E7%94%BB%E5%85%BC%E5%AE%B9.jpg&quot; /&gt;
                &lt;figcaption&gt;
                    &lt;h2&gt;Thoughtful &lt;span&gt;Goliath&lt;/span&gt;&lt;/h2&gt;
                    &lt;p&gt;When Goliath comes out, you should run.&lt;/p&gt;
                &lt;/figcaption&gt;
            &lt;/figure&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>附上一张效果图：360浏览器 8.1<br><img src="http://ohyo58iyo.bkt.clouddn.com/360%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%A8%E7%94%BB%E5%85%BC%E5%AE%B9.gif" alt="浏览器动画兼容360.gif"><br>这下子鼠标效果就不会出现闪现了，<em>感觉gif录制的有点差，感兴趣的同学可以将代码复制下来，本地测试</em></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这里只将两部分不同的代码粘贴出来</p>
<p>修改前：<br>   <code>figure.effect-goliath:hover img {
        -webkit-transform: translate3d(0, -80px, 0);
        transform: translate3d(0, -80px, 0);
    }</code></p>
<p>修改后：<br>    <code>figure.effect-goliath img {
        position: relative;
        top: 0;
    }</code><br>    <code>figure.effect-goliath:hover img {
        top: -80px;
    }</code></p>
<p>就是把之前使用 transform 实现的动画，换成相对定位来实现，然后，然后就可以了···<br>至于原理，一脸懵逼，本人原则是，不管怎样，先做出来再说话。<br>到此，效果虽已实现，坑还未填，期待下一步更新（我也不知道会不会更新，哈哈）<br>有兴趣的同学还可以试试，使用 margin padding 等其他CSS属性来实现同一个动画效果哦 !（目的只有一个，方法有很多）<br>有更好的建议，欢迎交流 QQ:1256961638</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[每个JavaScript开发者都该懂的Unicode]]></title>
      <url>http://jsgrblog.win/2016/12/11/%E6%AF%8F%E4%B8%AAJavaScript%E5%BC%80%E5%8F%91%E8%80%85%E9%83%BD%E8%AF%A5%E6%87%82%E7%9A%84Unicode/</url>
      <content type="html"><![CDATA[<p>在动笔写这篇文章之前，我得先忏悔一下：在很长一段时间里我对Unicode充满了恐惧。</p>
<p>每次遇到需要Unicode知识的编程问题时，我总是找一个hack方案来解决，但解决方案的原理我也不懂。</p>
<p>直到遇见一个需要深入了解Unicode知识才能解决的问题，我才停止了这种逃避。因为这个问题没办法应用特定情境的解决方案。</p>
<a id="more"></a>
<p>在努力读了一大堆文章之后，我惊讶地发现Unicode并不难懂。好吧，确实是有些文章起码得看3遍才能看懂。</p>
<p>但我发现Unicode标准不仅世界通用，而且十分优雅简洁，只不过要理解其中一些抽象概念有点困难。</p>
<p>如果你觉得理解Unicode很难，那么是时候来面对它了！其实它没你想的那么难。去沏一杯香浓的茶或咖啡吧☕，让我们进入<strong>抽象概念</strong>、<strong>字符</strong>、<strong>星光平面(辅助平面)</strong>和<strong>代理对</strong>的世界。</p>
<p>本文首先会解释Unicode中的基本概念，这是必需的背景知识。</p>
<p>然后会说明JavaScript如何解析Unicode，以及你可能踩到哪些坑。</p>
<p>你还会学到如何利用ECMAScript 2015的新特性来解决部分难题。</p>
<p>准备好了？那就燥起来吧!</p>
<p>目录：</p>
<p>1  Unicode背后的思想</p>
<p>2 Unicode基本概念</p>
<ul>
<li><p>2.1 字符与代码点</p>
</li>
<li><p>2.2 Unicode平面</p>
</li>
<li><p>2.3 码元</p>
</li>
<li><p>2.4 代理对</p>
</li>
<li><p>2.5 组合用字符</p>
</li>
</ul>
<p>3 JavaScript中的Unicode </p>
<ul>
<li><p>3.1 转义序列</p>
</li>
<li><p>3.2 字符串比较</p>
</li>
<li><p>3.3 字符串长度</p>
</li>
<li><p>3.4 字符定位</p>
</li>
<li><p>3.5 正则匹配</p>
</li>
</ul>
<p>4 结语</p>
<h1 id="1-Unicode背后的思想"><a href="#1-Unicode背后的思想" class="headerlink" title="1. Unicode背后的思想"></a>1. Unicode背后的思想</h1><p>首先问一个最基础的问题：你是怎样阅读并理解这篇文章的？答案很简单，因为你明白这些字以及由字组成的单词的含义。</p>
<p>那你又是如何明白这些字的含义的呢？答案也很简单，因为你（读者）和我（作者）对于这些（呈现在屏幕上的）图形与汉字（即含义）之间的联系有着相同的认知。</p>
<p>对计算机来说这个原理也差不多，只有一点不同：计算机不懂这些字（字母）的含义，只是将其理解为特定的比特序列。</p>
<p>让我们设想一个情景：计算机<em>User1</em>向计算机<em>User2</em>发送一条消息<code>&#39;hello&#39;</code>。</p>
<p>计算机并不知道这些字母的含义。所以计算机<em>User1</em>将消息<code>&#39;hello&#39;</code>转换为一串数字序列<code>0x68 0x65 0x6C 0x6C 0x6F</code>，每个字母对应一个数字：<code>h</code>对应<code>0x68</code>, <code>e</code>对应<code>0x65</code>，等等。</p>
<p>接着将这些数字发送给计算机<em>User2</em>。</p>
<p>计算机<em>User2</em>收到数字序列<code>0x68 0x65 0x6C 0x6C 0x6F</code>后，使用同一套字母与数字的对应关系重建消息内容，<code>&#39;hello&#39;</code>就能正确地显示出来了。</p>
<p>不同计算机之间对字母与数字之间对应关系的协议就是<strong>Unicode</strong>进行标准化的结果。</p>
<p>根据Unicode，<code>h</code>是一个名为<em>LATIN SMALL LETTER H</em>的抽象字符。这个抽象字符对应数字<code>0x68</code>，也就是一个标记为<code>U+0068</code>的代码点。这些概念将在下一章中说明。</p>
<p>Unicode的作用就是提供一个抽象字符列表（字符集），并给每一个字符分配一个独一无二的标识符代码点（编码字符集）。</p>
<h1 id="2-Unicode基本概念"><a href="#2-Unicode基本概念" class="headerlink" title="2. Unicode基本概念"></a>2. Unicode基本概念</h1><p><a href="http://unicode.org" target="_blank" rel="external"><code>www.unicode.org</code></a>网站提到：</p>
<blockquote>
<p><strong>Unicode</strong>为每一个字符分配一个专有的数字</p>
<p>不分平台</p>
<p>不分程序</p>
<p>不分语言</p>
</blockquote>
<p>Unicode是一个世界通用的字符集，它定义了全世界大部分书写体系的字符集，并为每一个字符分配了一个独一无二的数字（代码点）。</p>
<p><img src="http://s2.qhimg.com/static/1b0b41c029b3aafd.svg" alt="Unicode logo"></p>
<p>Unicode囊括了大部分现代语言、标点符号、附加符号（变音符）、数学符号、技术符号、箭头和表情符号等。</p>
<p>Unicode第一版1.0于1991年10月发布，包含7161个字符。最新版9.0（2016年6月发布）则提供了128172个字符的编码。</p>
<p>Unicode的通用性与开放性解决了过去一直存在的一个问题：供应商们各自实现不同的字符集和编码规则，很难处理。</p>
<p>创建一个支持所有字符集和编码规则的应用是十分复杂的。更不用说你选用的编码可能不支持所有你需要的语言。</p>
<p>如果你觉得Unicode很难，那就想想如果没有它编程会更难。</p>
<p>我还记得从前随机选择所需的字符集和编码规则去读取文件内容的时候。全靠人品啊！</p>
<h2 id="2-1-字符与代码点"><a href="#2-1-字符与代码点" class="headerlink" title="2.1 字符与代码点"></a>2.1 字符与代码点</h2><blockquote>
<p><strong>抽象字符</strong>（即文本字符）是用来组织、管理或表现文本数据的信息单位。</p>
</blockquote>
<p>Unicode中的字符是一个抽象概念。每一个抽象字符都有一个对应的名称，例如<em>LATIN SMALL LETTER A</em>。该抽象字符的图像表现形式（glyph）是<code>a</code>。（译者注：glyph即图像字符）</p>
<blockquote>
<p><strong>代码点</strong>是指被分配给某个抽象字符的数字</p>
</blockquote>
<p>代码点以<code>U+&lt;hex&gt;</code>的形式表示，<code>U+</code>是代表Unicode的前缀，而<code>&lt;hex&gt;</code>是一个16进制数。例如<code>U+0041</code>和<code>U+2603</code>都是代码点。</p>
<p>代码点的取值范围是从<code>U+0000</code>到<code>U+10FFFF</code>。</p>
<p>记住代码点就是一个简单的数字。思考有关Unicode的问题时要记得这一点。</p>
<p>代码点就好像数组元素的下标。</p>
<p>Unicode的神奇之处就在于将代码点与抽象字符关联起来。例如<code>U+0041</code>对应的抽象字符名为<em>LATIN CAPITAL LETTER A</em> (表现为<code>A</code>)，而<code>U+2603</code>对应的抽象字符名为<em>SNOWMAN</em>(表现为<code>☃</code>)</p>
<p>注意，并非所有的代码点都有对应的抽象字符。可用的代码点有1114112个，但分配了抽象字符的只有128237个。</p>
<h2 id="2-2-Unicode平面"><a href="#2-2-Unicode平面" class="headerlink" title="2.2 Unicode平面"></a>2.2 Unicode平面</h2><blockquote>
<p><strong>平面</strong>是指从<code>U+n0000</code>到<code>U+nFFFF</code>的区间，也就是65536（10000<sup>16</sup>）个连续的Unicode代码点，n的取值范围是从0<sup>16</sup>到10<sup>16</sup>。</p>
</blockquote>
<p>这些平面将Unicode代码点分为17个大小相等的集合：</p>
<ul>
<li><p>平面0包含从<code>U+0000</code>到<code>U+FFFF</code>的代码点 </p>
</li>
<li><p>平面1包含从<code>U+**1**0000</code>到<code>U+**1**FFFF</code>的代码点 </p>
</li>
<li><p>…</p>
</li>
<li><p>平面16包含从<code>U+**10**0000</code>到<code>U+**10**FFFF</code>的代码点</p>
</li>
</ul>
<p><img src="http://p0.qhimg.com/t0111a133814cbe5ae1.png" alt="Unicode planes"></p>
<h4 id="基本多文种平面"><a href="#基本多文种平面" class="headerlink" title="基本多文种平面"></a>基本多文种平面</h4><p>平面0比较特殊，被称为<strong>基本多文种平面</strong>或简称<strong>BMP</strong>。它包含了大多数现代语言的字符 (<a href="https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block" target="_blank" rel="external">基本拉丁字母</a>, <a href="https://en.wikipedia.org/wiki/Cyrillic_(Unicode_block" target="_blank" rel="external">西里尔字母</a>, <a href="https://en.wikipedia.org/wiki/Greek_and_Coptic" target="_blank" rel="external">希腊字母</a>等)和大量的<a href="https://en.wikipedia.org/wiki/Unicode_symbols" target="_blank" rel="external">符号</a>。</p>
<p>如上文所述，基本多文种平面的代码点取值范围是从<code>U+0000</code>到<code>U+FFFF</code>，最多可以有4位16进制数字。</p>
<p>大多数时候开发者处理的都是BMP中的字符。它包含了大多数情况下的必需字符。</p>
<p>BMP中的一些字符：</p>
<ul>
<li><p><code>e</code>对应代码点<code>U+0065</code> 抽象字符名： <em>LATIN SMALL LETTER E</em></p>
</li>
<li><p><code>|</code>对应代码点<code>U+007C</code> 抽象字符名： <em>VERTICAL BAR</em></p>
</li>
<li><p><code>■</code>对应代码点<code>U+25A0</code> 抽象字符名： <em>BLACK SQUARE</em></p>
</li>
<li><p><code>☂</code>对应代码点<code>U+2602</code> 抽象字符名： <em>UMBRELLA</em></p>
</li>
</ul>
<h4 id="星光平面"><a href="#星光平面" class="headerlink" title="星光平面"></a>星光平面</h4><p>BMP之后的16个平面（平面1，平面2，…，平面16）被称为<strong>星光平面</strong>或<strong>辅助平面</strong>。</p>
<p>星光平面的代码点被称为<strong>星光代码点</strong>。这些代码点的取值范围是从<code>U+10000</code>到<code>U+10FFFF</code>。                                     </p>
<p>星光代码点可能会有5位或6位16进制数字：<code>U+ddddd</code>或<code>U+dddddd</code>。</p>
<p>来看几个星光平面里的字符：</p>
<ul>
<li><p><code>?</code>对应<code>U+1D11E</code>抽象字符名：<em>MUSICAL SYMBOL G CLEF</em></p>
</li>
<li><p><code>?</code>对应<code>U+1D401</code>抽象字符名：<em>MATHEMATICAL BOLD CAPITAL B</em></p>
</li>
<li><p><code>?</code>对应<code>U+1F035</code>抽象字符名：<em>DOMINO TITLE HORIZONTAL-00-04</em></p>
</li>
<li><p><code>?</code>对应<code>U+1F600</code>抽象字符名：<em>GRINNING FACE</em></p>
</li>
</ul>
<h2 id="2-3-码元"><a href="#2-3-码元" class="headerlink" title="2.3 码元"></a>2.3 码元</h2><p>计算机在存储时当然不会使用代码点或抽象字符，它们是存在于开发者大脑中的概念。</p>
<p>所以自然要有一种在物理层面表示Unicode代码点的方式：码元。</p>
<blockquote>
<p><strong>码元</strong>是指使用某种给定的编码规则给抽象字符编码后得到的比特序列。</p>
</blockquote>
<p><a href="https://en.wikipedia.org/wiki/Character_encoding" target="_blank" rel="external">字符编码</a>将抽象层面的代码点转换为物理层面的比特序列：码元。</p>
<p>换句话说，字符编码的作用就是将Unicode代码点翻译成独一无二的码元序列。</p>
<p>常用的字符编码有<a href="https://en.wikipedia.org/wiki/UTF-8" target="_blank" rel="external">UTF-8</a>, <a href="https://en.wikipedia.org/wiki/UTF-16" target="_blank" rel="external">UTF-16</a> 和 <a href="https://en.wikipedia.org/wiki/UTF-32" target="_blank" rel="external">UTF-32</a>. </p>
<p>大多数<strong>JavaScript引擎使用UTF-16</strong>编码字符。它会影响JavaScript处理Unicode的方式。所以从这里开始让我们集中精力于UTF-16吧。</p>
<p>UTF-16（全称：16位统一码转换格式）是一种<a href="https://en.wikipedia.org/wiki/Variable-width_encoding" target="_blank" rel="external">变长</a>编码:</p>
<ul>
<li>BMP中的代码点编码为单个16位的码元</li>
<li>星光平面的代码点编码为两个16位的码元</li>
</ul>
<p>来看几个例子</p>
<p>假设我们想把<em>LATIN SMALL LETTER A</em>，也就是抽象字符<code>a</code>存入硬盘。Unicode告诉我们抽象字符<em>LATIN SMALL LETTER A</em>对应代码点<code>U+0061</code>。</p>
<p>现在我们来看看UTF-16如何转换<code>U+0061</code>。编码规范上说，对于BMP中的代码点只需将它的16进制数字U+<strong>0061</strong>存入一个16位的码元就行了。</p>
<p>显然，BMP中的代码点刚好能存进一个16位的码元。编码BMP可谓小菜一碟。</p>
<h2 id="2-4-代理对"><a href="#2-4-代理对" class="headerlink" title="2.4 代理对"></a>2.4 代理对</h2><p>现在让我们来研究一个复杂些的例子。假设我们想存储一个星光代码点（属于星光平面）： <em>GRINNING FACE</em> character <code>?</code>。该字符对应的代码点是 <code>U+1F600</code>。</p>
<p>由于星光代码点需要21个比特来存储字符信息，UTF-16需要<strong>两个码元</strong>来编码，每个16比特。代码点 <code>U+1F600</code> 被拆分为所谓的代理对：<code>0xD83D</code>（高位代理码元）与 <code>0xDE00</code>（低位代理码元）。</p>
<blockquote>
<p><strong>代理对</strong>用来表示那些对应2个16位码元序列的抽象字符，其中第一个码元是<strong>高位代理码元</strong>而第二个是<strong>低位代理码元</strong>。</p>
</blockquote>
<p>编码一个星光代码点需要两个码元：即一个代理对。比如前面那个例子，使用UTF-16编码<code>U+1F600</code> (<code>?</code>)就使用了一个代理对：<code>0xD83D 0xDE00</code>。</p>
<p><a href="https://repl.it/D9RF" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`console.log(&apos;\uD83D\uDE00&apos;); // =&gt; &apos;?&apos;`</div></pre></td></tr></table></figure>
<p>高位代理码元的取值范围是从<code>0xD800</code>到<code>0xDBFF</code>。<br>低位代理码元的取值范围是从<code>0xDC00</code>到<code>0xDFFF</code>。</p>
<p>代理对与代码点之间互相转换的算法如下所示：</p>
<p><a href="https://repl.it/DXI0" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function getSurrogatePair(astralCodePoint) &#123;  </div><div class="line">  let highSurrogate = </div><div class="line">     Math.floor((astralCodePoint - 0x10000) / 0x400) + 0xD800;</div><div class="line">  let lowSurrogate = (astralCodePoint - 0x10000) % 0x400 + 0xDC00;</div><div class="line">  return [highSurrogate, lowSurrogate];</div><div class="line">&#125;</div><div class="line">getSurrogatePair(0x1F600); // =&gt; [0xDC00, 0xDFFF]</div><div class="line"></div><div class="line">function getAstralCodePoint(highSurrogate, lowSurrogate) &#123;  </div><div class="line">  return (highSurrogate - 0xD800) * 0x400 </div><div class="line">      + lowSurrogate - 0xDC00 + 0x10000;</div><div class="line">&#125;</div><div class="line">getAstralCodePoint(0xD83D, 0xDE00); // =&gt; 0x1F600</div></pre></td></tr></table></figure>
<p>代理对并不是一个令人愉快的东西。在JavaScript中处理字符串时我们必须将它们视为特殊情况来处理，具体内容我们在下章细说。</p>
<p>但UTF-16的存储效率很高。因为99%需要处理的字符都属于BMP，只需要1个码元。</p>
<h2 id="2-5-组合用字符"><a href="#2-5-组合用字符" class="headerlink" title="2.5 组合用字符"></a>2.5 组合用字符</h2><blockquote>
<p>在一个书写系统的上下文中，一个<strong>字素</strong>或者<strong>符号</strong>是最小的可区分单元。</p>
</blockquote>
<p>字素就是用户所认为的一个字符。屏幕上所展示的一个有形的字素称为<strong>图像字符</strong>（glyph）。</p>
<p>在大多数情况下，一个Unicode字符就代表一个字素。例如 <code>U+0066</code> <em>LATIN SMALL LETTER F</em>就是一个英文字母<code>f</code>。</p>
<p>但有时候一个字素会包含一系列字符。</p>
<p>例如<code>å</code>在丹麦语书写系统中是一个不可再分的字素。但它是用<code>U+0061</code> <em>LATIN SMALL LETTER A</em> (渲染为<code>a</code>) 结合一个特殊字符<code>U+030A</code> <a href="https://en.wikipedia.org/wiki/Ring_(diacritic" target="_blank" rel="external"><em>COMBINING RING ABOVE</em></a>（渲染为◌̊）来显示的。</p>
<p><code>U+030A</code>用来修饰前一个字符，这种字符称为<strong>组合用字符</strong>。</p>
<p><a href="https://repl.it/D9RG" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.log(&apos;\u0061\u030A&apos;); // =&gt; &apos;å&apos;  </div><div class="line">console.log(&apos;\u0061&apos;);       // =&gt; &apos;a&apos;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>组合用字符</strong>是应用在前一个基础字符上以形成完整字素的字符。</p>
</blockquote>
<p>组合用字符包括以下字符：重音符号、变音符、希伯来语点、阿拉伯语元音符号和印度语节拍符。</p>
<p>组合用字符通常不会离开基础字符单独使用。我们应该避免单独显示它们。</p>
<p>与代理对一样，在JavaScript中处理组合用字符也很棘手。</p>
<p>在用户看来一个组合字符序列（基础字符+组合用字符）是【一】个符号（例如<code>&#39;\u0061\u030A&#39;</code>就是<code>&#39;å&#39;</code>）。但开发者必须清楚实际上要用到两个代码点<code>U+0061</code>和<code>U+030A</code>来生成<code>å</code>。</p>
<p><img src="http://p3.qhimg.com/t012c1af4e49cc76519.png" alt="Unicode basic terms"></p>
<h1 id="3-JavaScript中的Unicode"><a href="#3-JavaScript中的Unicode" class="headerlink" title="3. JavaScript中的Unicode"></a>3. JavaScript中的Unicode</h1><p>ES2015规范<a href="http://www.ecma-international.org/ecma-262/6.0/#sec-source-text" target="_blank" rel="external">提到</a>源代码文本使用Unicode（5.1及以上版本）表示。源码文本是一串取值范围从<code>U+0000</code>到<code>U+10FFFF</code>的代码点序列。尽管ECMAScript规范没有指明源码储存和交换的方式，但通常都以UTF-8编码（在web中推荐使用的编码）。</p>
<p>我建议将源代码文本控制在<a href="https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block" target="_blank" rel="external">Basic Latin Unicode block</a>（或者说ASCII）中。超出ASCII的字符应该避免使用。这能保证源码文本在编码时少出些问题。</p>
<p>ECMAScript 2015在语言层面上给出了JavaScript中String（字符串）的明确<a href="http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types-string-type" target="_blank" rel="external">定义</a>：</p>
<p>String类型是由16比特无符号整型数值（“元素”）组成的集合，最少包含0个元素，最多包含2<sup>53</sup>-1个元素。String类型通常用来在运行ECMAScript的程序中表示文本信息，因此String中的每个元素都被当作一个<strong>UTF-16码元</strong>值。</p>
<p>字符串中的每一个元素都会被引擎解释为一个码元。而字符串的渲染结果并不能明确地反映它包含的码元（及其所代表的代码点）。看下面这个例子：</p>
<p><a href="https://repl.it/D9RH" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.log(&apos;cafe\u0301&apos;); // =&gt; &apos;café&apos;  </div><div class="line">console.log(&apos;café&apos;);       // =&gt; &apos;café&apos;</div></pre></td></tr></table></figure>
<p>虽然字面量<code>&#39;cafe\u0301&#39;</code>和<code>&#39;café&#39;</code>有轻微的差别，但两者都被渲染为同样的字符序列<code>café</code>。</p>
<p>字符串的长度是指其中包含的元素（即<strong>16位数值</strong>）的个数。ECMAScript在解释String类型时，字符串的每一个元素都被解释为一个<strong>UTF-16码元</strong>。</p>
<p>从上一章关于代理对和组合用字符的内容可知，某些字符需要2个以上的码元来表示。所以在计算字符长度或通过字符串索引访问字符时要格外小心。</p>
<p><a href="https://repl.it/D9RJ" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let smile = &apos;\uD83D\uDE00&apos;;  </div><div class="line">console.log(smile);        // =&gt; &apos;?&apos;  </div><div class="line">console.log(smile.length); // =&gt; 2</div><div class="line"></div><div class="line">let letter = &apos;e\u0301&apos;;  </div><div class="line">console.log(letter);        // =&gt; &apos;é&apos;  </div><div class="line">console.log(letter.length); // =&gt; 2</div></pre></td></tr></table></figure>
<p>字符串<code>smile</code>包含两个码元：<code>\uD83D</code> （高位代理）和<code>\uDE00</code>（低位代理）。由于字符串是码元的序列，因此尽管 <code>smile</code> 的渲染结果只有一个字符<code>&#39;?&#39;</code>，<code>smile.length</code>的值却为<code>2</code>。</p>
<p>对于字符串<code>letter</code>也一样。组合用字符<code>U+0301</code>应用于前一个字符，渲染结果是一个字符<code>&#39;é&#39;</code>。然而<code>letter</code>包含2个码元，因此<code>letter.length</code>值为2。</p>
<p>我的建议是：<strong>始终将JavaScript中的字符串视为一串码元序列</strong>。字符串渲染的结果并不能清晰地表明它包含了怎样的码元。</p>
<p>星光符号和组合字符序列需要2个以上的码元来编码，却被视为一个语素。</p>
<p>如果字符串中含有代理对或组合用字符，而开发者又不清楚这一点，那么在计算字符串长度或通过索引访问字符时就可能会感到困惑。</p>
<p>大多数JavaScript字符串方法都不能识别Unicode。如果字符串含有混合的Unicode字符，在调用<code>myString.slice()</code>、<code>myString.substring()</code>等方法时就要小心了。</p>
<h2 id="3-1-转义序列"><a href="#3-1-转义序列" class="headerlink" title="3.1 转义序列"></a>3.1 转义序列</h2><p>JavaScript字符串中的转义序列通常都是基于代码点数字的。JavaScript有3种转义模式，在ECMAScript 2015中有相关介绍。</p>
<p>来详细看看这几种模式吧。</p>
<h4 id="16进制转义序列"><a href="#16进制转义序列" class="headerlink" title="16进制转义序列"></a>16进制转义序列</h4><p>最简短的形式称为<strong>16进制转义序列</strong>：<code>\x&lt;hex&gt;</code>. <code>\x</code>为前缀，后面跟一个2位的16进制数。</p>
<p>比如<code>&#39;\x30&#39;</code>（字符 <code>&#39;0&#39;</code>）和<code>&#39;\x5B&#39;</code>（字符 <code>&#39;[&#39;</code>）。 </p>
<p>在字符串中使用16进制转义序列如下所示：</p>
<p><a href="https://repl.it/D9RK" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var str = &apos;\x4A\x61vaScript&apos;;  </div><div class="line">console.log(str);                    // =&gt; &apos;JavaScript&apos;  </div><div class="line">var reg = /\x4A\x61va.*/;  </div><div class="line">console.log(reg.test(&apos;JavaScript&apos;)); // =&gt; true</div></pre></td></tr></table></figure>
<p>16进制转义序列只能编码从<code>U+00</code>到<code>U+FF</code>的有限数量的代码点，因为它只能有2位数字。但16进制转义序列的好处是它很短。</p>
<h4 id="Unicode转义序列"><a href="#Unicode转义序列" class="headerlink" title="Unicode转义序列"></a>Unicode转义序列</h4><p>如果你想转义整个BMP中的代码点，那就用<strong>Unicode转义序列</strong>。转义形式是<code>\u&lt;hex&gt;</code>,<code>\u</code>为前缀，后面跟一个4位的16进制数。</p>
<p>比如 <code>&#39;\u0051&#39;</code> （字符 <code>&#39;Q&#39;</code>）和<code>&#39;\u222B&#39;</code> （积分符号 <code>&#39;∫&#39;</code>）.</p>
<p>像下面这样使用Unicode转义序列：</p>
<p><a href="https://repl.it/D9RL" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var str = &apos;I\u0020learn \u0055nicode&apos;;  </div><div class="line">console.log(str);                 // =&gt; &apos;I learn Unicode&apos;  </div><div class="line">var reg = /\u0055ni.*/;  </div><div class="line">console.log(reg.test(&apos;Unicode&apos;)); // =&gt; true</div></pre></td></tr></table></figure>
<p>Unicode转义序列可以编码从<code>U+0000</code>到<code>U+FFFF</code>的有限数量的代码点（BMP中全部代码点），因为它可以有4位数字。大多数时候这已经足够用来表示常用字符了。</p>
<p>想要在JavaScript文本中表示星光字符，可以用两个连续的Unicode转义序列（高位代理与低位代理），生成代理对：</p>
<p><a href="https://repl.it/D9RM" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var str = &apos;My face \uD83D\uDE00&apos;;  </div><div class="line">console.log(str); // =&gt; &apos;My face ?&apos;</div></pre></td></tr></table></figure>
<h4 id="代码点转义序列"><a href="#代码点转义序列" class="headerlink" title="代码点转义序列"></a>代码点转义序列</h4><p>ECMAScript 2015提供了能够表示整个Unicode空间：从<code>U+0000</code>到<code>U+10FFFF</code>，也就是BMP与星光平面的转义序列。</p>
<p>这种新格式被称为<strong>代码点转义序列</strong>：<code>\u{&lt;hex&gt;}</code>，<code>&lt;hex&gt;</code>是一个长度为1至6位的16进制数。<br>比如<code>&#39;\u{7A}&#39;</code>（字符<code>&#39;z&#39;</code>）和<code>&#39;\u{1F639}&#39;</code>（Funny cat符号<code>?</code>）。 </p>
<p>来看看它应该如何应用：</p>
<p><a href="https://repl.it/D9RN" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var str = &apos;Funny cat \u&#123;1F639&#125;&apos;;  </div><div class="line">console.log(str);                      // =&gt; &apos;Funny cat ?&apos;  </div><div class="line">var reg = /\u&#123;1F639&#125;/u;  </div><div class="line">console.log(reg.test(&apos;Funny cat ?&apos;)); // =&gt; true</div></pre></td></tr></table></figure>
<p>注意正则表达式<code>/\u{1F639}/u</code>有一个特殊flag<code>u</code>,它支持额外的Unicode特性（详情见3.5正则匹配）。</p>
<p>我喜欢代码点转义不需要使用代理对来表示星光符号这一点。让我们来转义代码点<code>U+1F607</code> <em>SMILING FACE WITH HALO</em>吧：<br><a href="https://repl.it/D9RR" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var niceEmoticon = &apos;\u&#123;1F607&#125;&apos;;  </div><div class="line">console.log(niceEmoticon);   // =&gt; &apos;?&apos;  </div><div class="line">var spNiceEmoticon = &apos;\uD83D\uDE07&apos;  </div><div class="line">console.log(spNiceEmoticon); // =&gt; &apos;?&apos;  </div><div class="line">console.log(niceEmoticon === spNiceEmoticon); // =&gt; true</div></pre></td></tr></table></figure>
<p>被赋给变量<code>niceEmoticon</code>的字符串字面量包含一个代码点转义序列<code>&#39;\u{1F607}&#39;</code>，它表示一个星光代码点<code>U+1F607</code>。</p>
<p>然而在这种表象之下代码点转义序列依旧生成了一个代理对（2个码元）。我们可以看到变量<code>spNiceEmoticon</code>被赋值为使用代理对创建的Unicode转义序列<code>&#39;\uD83D\uDE07&#39;</code>，而它与变量<code>niceEmoticon</code>是相等的。</p>
<p><img src="http://p5.qhimg.com/t0198d5591a698acbde.png" alt="Unicode escape sequences JavaScript"></p>
<p>如果正则表达式是用构造函数<code>RegExp</code>创建的，那么在字符串字面量中必须将每一个 <code>\</code> 替换为<code>\\</code>来表示Unicode转义序列。</p>
<p>以下正则表达式对象是相等的：</p>
<p><a href="https://repl.it/D9RS" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var reg1 = /\x4A \u0020 \u&#123;1F639&#125;/;  </div><div class="line">var reg2 = new RegExp(&apos;\\x4A \\u0020 \\u&#123;1F639&#125;&apos;);  </div><div class="line">console.log(reg1.source === reg2.source); // =&gt; true</div></pre></td></tr></table></figure>
<h2 id="3-2-字符串比较"><a href="#3-2-字符串比较" class="headerlink" title="3.2 字符串比较"></a>3.2 字符串比较</h2><p>JavaScript中的字符串是码元的序列。因此字符串的比较可以看作是码元的计算与匹配。</p>
<p>这种方法快速而有效，对于“简单”的字符串不失为一种好方法。</p>
<p><a href="https://repl.it/D9RU" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var firstStr = &apos;hello&apos;;  </div><div class="line">var secondStr = &apos;\u0068ell\u006F&apos;;  </div><div class="line">console.log(firstStr === secondStr); // =&gt; true</div></pre></td></tr></table></figure>
<p>字符串<code>firstStr</code>与<code>secondStr</code>包含相同的码元序列，故它们相等。</p>
<p>假设你想比较两个渲染结果相同，但包含不同码元序列的字符串。</p>
<p>那么你可能会得到意外的结果，因为看上去相同的字符串经过比较却不相等：</p>
<p><a href="https://repl.it/D0FG" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var str1 = &apos;ça va bien&apos;;  </div><div class="line">var str2 = &apos;c\u0327a va bien&apos;;  </div><div class="line">console.log(str1);          // =&gt; &apos;ça va bien&apos;  </div><div class="line">console.log(str2);          // =&gt; &apos;ça va bien&apos;  </div><div class="line">console.log(str1 === str2); // =&gt; false</div></pre></td></tr></table></figure>
<p><code>str1</code>和<code>str2</code>渲染结果看起来相同，但包含不同的码元。</p>
<p>因为字素<code>ç</code>可以通过两种方法生成：</p>
<ul>
<li><p>使用<code>U+00E7</code> <em>LATIN SMALL LETTER C WITH CEDILLA</em></p>
</li>
<li><p>或者用组合字符序列：<code>U+0063</code> <em>LATIN SMALL LETTER C</em> 加上组合用字符<code>U+0327</code> <em>COMBINING CEDILLA</em>.  </p>
</li>
</ul>
<p>那么该如何处理这种情况，正确地比较字符串？答案是字符串标准化。</p>
<h4 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a>标准化</h4><blockquote>
<p><strong>标准化</strong>是指将字符串转换为统一的表示形式，以保证具有标准等价性（或兼容等价性）的字符串只有一种表示形式。</p>
</blockquote>
<p>换句话说，当字符串包含组合用字符序列或其他混合结构等复杂的结构时，我们可以将它<em>统一</em>成标准的形式。标准化的字符串在进行比较或文本查找等操作时就很轻松了。</p>
<p><a href="http://unicode.org/reports/tr15/" target="_blank" rel="external">Unicode Standard Annex #15</a>对标准化方法有详细地描述。</p>
<p>在JavaScript中对字符串进行标准化需要调用ES2015提供的<code>myString.normalize([normForm])</code>方法。<code>normForm</code>是一个可选参数（默认为<code>&#39;NFC&#39;</code>），取值为以下标准化模式之一：</p>
<ul>
<li><p><code>&#39;NFC&#39;</code> as Normalization Form Canonical Composition（标准化形式-标准性合成）</p>
</li>
<li><p><code>&#39;NFD&#39;</code> as Normalization Form Canonical Decomposition（标准化形式-标准性分解）</p>
</li>
<li><p><code>&#39;NFKC&#39;</code> as Normalization Form Compatibility Composition（标准化形式-兼容性合成）</p>
</li>
<li><p><code>&#39;NFKD&#39;</code> as Normalization Form Compatibility Decomposition（标准化形式-兼容性分解）</p>
</li>
</ul>
<p>让我们利用字符串标准化来改进上面的例子吧，这次可以正确地比较字符串了：</p>
<p><a href="https://repl.it/D9RV" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var str1 = &apos;ça va bien&apos;;  </div><div class="line">var str2 = &apos;c\u0327a va bien&apos;;  </div><div class="line">console.log(str1 === str2.normalize()); // =&gt; true  </div><div class="line">console.log(str1 === str2);             // =&gt; false</div></pre></td></tr></table></figure>
<p><code>&#39;ç&#39;</code>与<code>&#39;c\u0327&#39;</code>具有标准等价性。 </p>
<p>调用<code>str2.normalize()</code>，会返回一个<code>str2</code> 的标准形式副本（<code>&#39;c\u0327&#39;</code>替换为<code>&#39;ç&#39;</code>）。因此比较语句<code>str1 === str2.normalize()</code>会如预期一般返回<code>true</code>.</p>
<p><code>str1</code>不受标准化影响，因为它已经是标准形式了。</p>
<p>但为了使操作符两端都取得标准化字符串，将待比较的2个字符串都标准化也是合理的。</p>
<h2 id="3-3-字符串长度"><a href="#3-3-字符串长度" class="headerlink" title="3.3 字符串长度"></a>3.3 字符串长度</h2><p>想要知道一个字符串的长度通常我们会访问<code>myString.length</code>这个属性。该属性表明了字符串中包含的码元个数。</p>
<p>对于只包含BMP代码点的字符串来说获取字符串长度通常都能符合预期：</p>
<p><a href="https://repl.it/D9RW" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var color = &apos;Green&apos;;  </div><div class="line">console.log(color.length); // =&gt; 5</div></pre></td></tr></table></figure>
<p><code>color</code>中的每个码元都对应着一个字素。预期的字符串长度为<code>5</code>.</p>
<h4 id="长度与代理对"><a href="#长度与代理对" class="headerlink" title="长度与代理对"></a>长度与代理对</h4><p>当字符串中包含用来表示星光代码点的代理对时，事情就变得不对劲了。因为每个代理对包含2个码元（一个高位代理和一个低位代理），length属性值会比预期值要大。</p>
<p>比如这个例子：</p>
<p><a href="https://repl.it/D9RY" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var str = &apos;cat\u&#123;1F639&#125;&apos;;  </div><div class="line">console.log(str);        // =&gt; &apos;cat?&apos;  </div><div class="line">console.log(str.length); // =&gt; 5</div></pre></td></tr></table></figure>
<p>字符串<code>str</code>的渲染结果是4个字符<code>cat?</code>。</p>
<p>然而<code>smile.length</code>等于<code>5</code>，因为<code>U+1F639</code>是一个星光代码点，它被编码成了2个码元（一个代理对）。</p>
<p>不幸的是目前还没有一种高性能的原生方法能解决这个问题。</p>
<p>但至少ECMAScript 2015引入了一种能够识别星光字符的算法。星光字符即使被编译为2个码元，也会被计算为一个字符。</p>
<p>这个能够识别Unicode的利器就是字符迭代器<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator" target="_blank" rel="external"><code>String.prototype[@@iterator]()</code></a>。你可以给字符串加上扩展操作符<code>[...str]</code>或<code>Array.from(str)</code>函数（两者都会调用字符串迭代器）。然后再计算返回数组中的字符个数。</p>
<p>需要注意的是这个解决方案如果大量使用可能会造成轻微的性能损失。</p>
<p>让我们用这个扩展操作符来改进上面的例子吧：</p>
<p><a href="https://repl.it/D9RZ" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var str = &apos;cat\u&#123;1F639&#125;&apos;;  </div><div class="line">console.log(str);             // =&gt; &apos;cat?&apos;  </div><div class="line">console.log([...str]);        // =&gt; [&apos;c&apos;, &apos;a&apos;, &apos;t&apos;, &apos;?&apos;]  </div><div class="line">console.log([...str].length); // =&gt; 4</div></pre></td></tr></table></figure>
<p><code>[...str]</code>创建了一个包含4个字符的数组。编码<code>U+1F639</code> <em>CAT FACE WITH TEARS OF JOY</em> ?的代理对原封不动地保留了下来，因为字符串迭代器能够识别Unicode。</p>
<h4 id="长度与组合用字符"><a href="#长度与组合用字符" class="headerlink" title="长度与组合用字符"></a>长度与组合用字符</h4><p>那么组合字符序列呢？由于每个组合用字符都是一个码元，因此你会遇到同样的困难。</p>
<p>这个问题对于标准化的字符串可以不用担心。如果运气好，组合字符序列会被标准化为单个字符。我们来试试看：</p>
<p><a href="https://repl.it/D9R1" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var drink = &apos;cafe\u0301&apos;;  </div><div class="line">console.log(drink);                    // =&gt; &apos;café&apos;  </div><div class="line">console.log(drink.length);             // =&gt; 5  </div><div class="line">console.log(drink.normalize())         // =&gt; &apos;café&apos;  </div><div class="line">console.log(drink.normalize().length); // =&gt; 4</div></pre></td></tr></table></figure>
<p>字符串<code>drink</code>包含5个码元（因此<code>drink.length</code>等于<code>5</code>），尽管它只显示4个字符。</p>
<p>在标准化<code>drink</code>时，我们幸运地发现组合字符序列<code>&#39;e\u0301&#39;</code>有标准形式<code>&#39;é&#39;</code>。因此<code>drink.normalize().length</code>返回了预期的<code>4</code>。</p>
<p>不幸的是标准化并不能解决所有问题。那些比较长的组合字符序列并不都有对应的单个字符标准形式。比如这个例子：</p>
<p><a href="https://repl.it/D9R4" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var drink = &apos;cafe\u0327\u0301&apos;;  </div><div class="line">console.log(drink);                    // =&gt; &apos;cafȩ́&apos;  </div><div class="line">console.log(drink.length);             // =&gt; 6  </div><div class="line">console.log(drink.normalize());        // =&gt; &apos;cafȩ́&apos;  </div><div class="line">console.log(drink.normalize().length); // =&gt; 5</div></pre></td></tr></table></figure>
<p><code>drink</code>包含6个码元所以<code>drink.length</code>值为<code>6</code>。然而<code>drink</code>只包含4个字符。</p>
<p>标准化函数<code>drink.normalize()</code>将组合序列<code>&#39;e\u0327\u0301&#39;</code>转换为含有2个字符的标准形式<code>&#39;ȩ\u0301&#39;</code>（只去掉了一个组合用字符）。于是我们很难过地发现<code>drink.normalize().length</code>的值为<code>5</code>，仍然不能正确地计算字符的个数。</p>
<h2 id="3-4-字符定位"><a href="#3-4-字符定位" class="headerlink" title="3.4 字符定位"></a>3.4 字符定位</h2><p>由于字符串是码元的序列，通过字符串索引来访问字符同样会有困难。</p>
<p>如果字符串只包含BMP字符（除了从<code>U+D800</code>到<code>U+DBFF</code>的高位代理和从<code>U+DC00</code>到<code>U+DFFF</code>的低位代理），字符定位可以得到正确的结果。</p>
<p><a href="https://repl.it/D9R6" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var str = &apos;hello&apos;;  </div><div class="line">console.log(str[0]); // =&gt; &apos;h&apos;  </div><div class="line">console.log(str[4]); // =&gt; &apos;o&apos;</div></pre></td></tr></table></figure>
<p>上例中每个字符被编码为一个码元，因此通过索引访问字符可以得到正确的结果。</p>
<h4 id="字符定位与代理对"><a href="#字符定位与代理对" class="headerlink" title="字符定位与代理对"></a>字符定位与代理对</h4><p>当字符串中包含星光字符时情况就不一样了。</p>
<p>星光字符被编码为2个码元（一个代理对）。因此通过索引来访问字符可能会返回一个单独的高位代理或低位代理，而单独的高位/低位代理是无效字符。</p>
<p>下面这个例子演示了访问星光字符的情形：</p>
<p><a href="https://repl.it/D9R8/1" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var omega = &apos;\u&#123;1D6C0&#125; is omega&apos;;  </div><div class="line">console.log(omega);        // =&gt; &apos;? is omega&apos;  </div><div class="line">console.log(omega[0]);     // =&gt; &apos;&apos; (unprintable symbol)  </div><div class="line">console.log(omega[1]);     // =&gt; &apos;&apos; (unprintable symbol)</div></pre></td></tr></table></figure>
<p>由于<code>U+1D6C0</code> <em>MATHEMATICAL BOLD CAPITAL OMEGA</em>是一个星光字符，它的编码使用了一个代理对，即2个码元。</p>
<p><code>omega[0]</code>访问的是高位代理码元而<code>omega[1]</code>访问的是低位代理码元，代理对被分成了两半。</p>
<p>想要正确地访问字符串中星光字符，有2种方法：</p>
<ul>
<li><p>使用能够识别Unicode的字符串迭代器生成一个字符数组<code>[...str][index]</code></p>
</li>
<li><p>用<code>number = myString.codePointAt(index)</code>获取代码点，然后用<code>String.fromCodePoint(number)</code>将代码点转换为字符（推荐方法）</p>
</li>
</ul>
<p>让我们来尝试一下这两种方法：</p>
<p><a href="https://repl.it/D9Ra" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var omega = &apos;\u&#123;1D6C0&#125; is omega&apos;;  </div><div class="line">console.log(omega);                        // =&gt; &apos;? is omega&apos;  </div><div class="line">// Option 1</div><div class="line">console.log([...omega][0]);                // =&gt; &apos;?&apos;  </div><div class="line">// Option 2</div><div class="line">var number = omega.codePointAt(0);  </div><div class="line">console.log(number.toString(16));          // =&gt; &apos;1d6c0&apos;  </div><div class="line">console.log(String.fromCodePoint(number)); // =&gt; &apos;?&apos;</div></pre></td></tr></table></figure>
<p><code>[...smile]</code>返回一个包含字符串<code>omega</code>中字符的数组。代理对被正确识别，因此访问第一个字符返回了符合预期的结果：<code>[...smile][0]</code>返回<code>&#39;?&#39;</code>.</p>
<p>函数<code>omega.codePointAt(0)</code>能够识别Unicode，因此它返回了字符串<code>omega</code>第一个字符的星光代码点数字<code>0x1D6C0</code>。函数<code>String.fromCodePoint(number)</code>则返回了这个代码点对应的字符：<code>&#39;?&#39;</code>。</p>
<h4 id="字符定位与组合用字符"><a href="#字符定位与组合用字符" class="headerlink" title="字符定位与组合用字符"></a>字符定位与组合用字符</h4><p>字符定位在遇到组合用字符时会出现和上面一样的问题。</p>
<p>通过索引访问字符实际上是访问码元。然而组合字符序列应该被整体访问，而不是被分成单个的码元。</p>
<p>下面这个例子演示了这个问题：</p>
<p><a href="https://repl.it/D9Rb" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var drink = &apos;cafe\u0301&apos;;  </div><div class="line">console.log(drink);        // =&gt; &apos;café&apos;  </div><div class="line">console.log(drink.length); // =&gt; 5  </div><div class="line">console.log(drink[3]);     // =&gt; &apos;e&apos;  </div><div class="line">console.log(drink[4]);     // =&gt; ◌́</div></pre></td></tr></table></figure>
<p><code>drink[3]</code>只访问到了基础字符<code>e</code>,没有包括组合用字符<code>U+0301</code> <em>COMBINING ACUTE ACCENT</em>（渲染为◌́ ）。</p>
<p><code>drink[4]</code>访问的是独立的组合用字符◌́ 。</p>
<p>这种情况需要使用字符串标准化。组合字符序列<code>U+0065</code> <em>LATIN SMALL LETTER E</em> + <code>U+0301</code> <em>COMBINING ACUTE ACCENT</em>有对应的标准形式<code>U+00E9</code> <em>LATIN SMALL LETTER E WITH ACUTE</em> <code>é</code></p>
<p>我们来改进一下前面的例子：</p>
<p><a href="https://repl.it/D9Rc" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var drink = &apos;cafe\u0301&apos;;  </div><div class="line">console.log(drink.normalize());        // =&gt; &apos;café&apos;  </div><div class="line">console.log(drink.normalize().length); // =&gt; 4  </div><div class="line">console.log(drink.normalize()[3]);     // =&gt; &apos;é&apos;</div></pre></td></tr></table></figure>
<p>需要注意的是并非所有组合字符序列都有对应的单个标准字符。因此标准化并不能解决所有问题。</p>
<p>好在对于欧洲/北美语言来说它可以解决大部分问题。</p>
<h2 id="3-5-正则匹配"><a href="#3-5-正则匹配" class="headerlink" title="3.5 正则匹配"></a>3.5 正则匹配</h2><p>正则表达式与字符串一样，是基于码元工作的。因此与上文描述的情形相似，使用正则表达式在处理代理对和组合字符序列时也会遇到困难。</p>
<p>BMP字符的匹配是符合预期的，因为一个码元对应一个字符：</p>
<p><a href="https://repl.it/D9Re" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var greetings = &apos;Hi!&apos;;  </div><div class="line">var regex = /.&#123;3&#125;/;  </div><div class="line">console.log(regex.test(greetings)); // =&gt; true</div></pre></td></tr></table></figure>
<p><code>greetings</code>有3个字符，编码为3个码元。正则表达式<code>/.{3}/</code>期望的是3个码元，因此与<code>greetings</code>匹配成功。</p>
<p>在匹配星光字符（被编码为2个码元的代理对）时，你可能会遇到困难：</p>
<p><a href="https://repl.it/D9Rg" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var smile = &apos;?&apos;;  </div><div class="line">var regex = /^.$/;  </div><div class="line">console.log(regex.test(smile)); // =&gt; false</div></pre></td></tr></table></figure>
<p><code>smile</code>包含星光字符<code>U+1F600</code> <em>GRINNING FACE</em>。<code>U+1F600</code>被编码为一个代理对<code>0xD83D 0xDE00</code>。</p>
<p>然而正则表达式<code>/^.$/</code>期望的是1个码元，于是正则匹配<code>regexp.test(smile)</code>失败了。</p>
<p>在定义字符区间的时候情况会更糟。JavaScript直接报错了：</p>
<p><a href="https://repl.it/D9Rh" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var regex = /[?-?]/;  </div><div class="line">// =&gt; SyntaxError: Invalid regular expression: /[?-?]/: </div><div class="line">// Range out of order in character class</div></pre></td></tr></table></figure>
<p>星光代码点会被编码为代理对，因此JavaScript会用码元<code>/[\uD83D\uDE00-\uD83D\uDE0E]/</code>来表示这个正则表达式。而在pattern中每个码元被视为一个单独的元素，所以正则表达式会忽略代理对这个概念。</p>
<p>又由于<code>\uDE00</code>比<code>\uD83D</code>大，<code>\uDE00-\uD83D</code>这个字符区间是无效的，所以就报错了。</p>
<h4 id="正则表达式-u-标志"><a href="#正则表达式-u-标志" class="headerlink" title="正则表达式 u 标志"></a>正则表达式 <code>u</code> 标志</h4><p>好在ECMAScript 2015引入了<code>u</code>标志，使得正则表达式能够识别Unicode。这个标志让我们能够正确处理星光字符。</p>
<p>在正则表达式中可以使用Unicode转义序列<code>/u{1F600}/u</code>。这样比写高位代理和低位代理<code>/\uD83D\uDE00/</code>要短。</p>
<p>让我们来尝试应用一下<code>u</code>标志，看看<code>.</code>操作符（包括量词<code>?</code>、<code>+</code>、<code>*</code>和<code>{3}</code>、<code>{3,}</code>, <code>{2,3}</code>）能否匹配星光字符：</p>
<p><a href="https://repl.it/D9Ri" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var smile = &apos;?&apos;;  </div><div class="line">var regex = /^.$/u;  </div><div class="line">console.log(regex.test(smile)); // =&gt; true</div></pre></td></tr></table></figure>
<p>正则表达式<code>/^.$/u</code>由于加上了<code>u</code>标志而能够识别Unicode，因此正确地匹配了星光字符。</p>
<p><code>u</code>标志还能使星光字符区间被正确处理：</p>
<p><a href="https://repl.it/D9Rm" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var smile = &apos;?&apos;;  </div><div class="line">var regex = /[?-?]/u;  </div><div class="line">var regexEscape = /[\u&#123;1F600&#125;-\u&#123;1F60E&#125;]/u;  </div><div class="line">var regexSpEscape = /[\uD83D\uDE00-\uD83D\uDE0E]/u;  </div><div class="line">console.log(regex.test(smile));         // =&gt; true  </div><div class="line">console.log(regexEscape.test(smile));   // =&gt; true  </div><div class="line">console.log(regexSpEscape.test(smile)); // =&gt; true</div></pre></td></tr></table></figure>
<p>现在<code>[?-?]</code>被视为一个星光字符的区间了。<code>/[?-?]/u</code>成功匹配了<code>&#39;?&#39;</code>。</p>
<h4 id="正则表达式与组合用字符"><a href="#正则表达式与组合用字符" class="headerlink" title="正则表达式与组合用字符"></a>正则表达式与组合用字符</h4><p>不幸的是不论有没有<code>u</code>标志，正则表达式都会把组合用标记视为独立的码元来处理。</p>
<p>要匹配组合字符序列，只能分别匹配基础字符与组合用字符。</p>
<p>看下面的例子：</p>
<p><a href="https://repl.it/D9Rp" target="_blank" rel="external">Try in repl.it</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var drink = &apos;cafe\u0301&apos;;  </div><div class="line">var regex1 = /^.&#123;4&#125;$/;  </div><div class="line">var regex2 = /^.&#123;5&#125;$/;  </div><div class="line">console.log(drink);              // =&gt; &apos;café&apos;  </div><div class="line">console.log(regex1.test(drink)); // =&gt; false  </div><div class="line">console.log(regex2.test(drink)); // =&gt; true</div></pre></td></tr></table></figure>
<p>字符串渲染为4个字符<code>café</code>。</p>
<p>然而成功匹配<code>&#39;cafe\u0301&#39;</code>的正则表达式是匹配5个元素的<code>/^.{5}$/</code>。</p>
<h1 id="4-结语"><a href="#4-结语" class="headerlink" title="4. 结语"></a>4. 结语</h1><p>也许在JavaScript中有关Unicode的最重要的概念就是<strong>将字符串视为码元序列</strong>，事实也确实如此。</p>
<p>如果开发者认为字符串是由字素（或字符）组成，忽略码元序列这个概念，就会感到困惑。</p>
<p>在处理包含代理对或组合字符序列的字符串时这种想法会造成误解。</p>
<ul>
<li><p>获取字符串长度</p>
</li>
<li><p>字符定位</p>
</li>
<li><p>正则匹配</p>
</li>
</ul>
<p>注意JavaScript中大多数字符串方法都不能识别Unicode：比如<code>myString.indexOf()</code>、<code>myString.slice()</code>等。</p>
<p>ECMAScript 2015在字符串和正则表达式中增加了一些很棒的特性，例如代码点转义序列<code>\u{1F600}</code>。</p>
<p>新的正则表达式标志<code>u</code>使字符串匹配能够识别Unicode，这样一来匹配星光字符就简单多了。</p>
<p>字符串迭代器<code>String.prototype[@@iterator]()</code>能够识别Unicode。使用扩展操作符<code>[...str]</code>或<code>Array.from(str)</code>可以创建一个字符数组，通过这个数组的下标来计算字符串长度或访问字符就不会把代理对拆开了。但要注意这种方法会影响性能。</p>
<p>如果你需要更好的办法来处理Unicode字符，你可以使用<a href="https://github.com/bestiejs/punycode.js/" target="_blank" rel="external">punycode</a>库或者<a href="https://github.com/mathiasbynens/regenerate" target="_blank" rel="external">生成</a>特殊的正则表达式。</p>
<p>但愿此文能帮助你掌握Unicode！</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@tutaizi" target="_blank" rel="external">兔子</a><br>链接：<a href="http://www.zcfy.cc/article/1303" target="_blank" rel="external">http://www.zcfy.cc/article/1303</a><br>原文：<a href="https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/" target="_blank" rel="external">https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery还有意义吗]]></title>
      <url>http://jsgrblog.win/2016/12/11/jQuery%E8%BF%98%E6%9C%89%E6%84%8F%E4%B9%89%E5%90%97/</url>
      <content type="html"><![CDATA[<p>尽管jQuery的鼎盛时期已经过去了, 但这个库仍然有着惊人的<a href="http://trends.builtwith.com/javascript/jQuery" target="_blank" rel="external">使用比率</a>.但是究竟有多少是以前在使用的?还有多少开发者仍然使用jQuery来开发新应用?<br>在今天的闲聊中我们邀请了一些行业专家来探讨这些问题。话题如下:<br><a id="more"></a></p>
<ul>
<li>在2016年，jQuery的利与弊是什么</li>
<li>哪些应用最适合使用jQuery</li>
<li>如果你明天就要开发一个新的网页应用，你会用jQuery吗<br>首先给各位读者简明介绍一下嘉宾。</li>
</ul>
<p><a href="https://twitter.com/jeremylikness" target="_blank" rel="external"><strong>Jeremy Likness</strong></a>:我是一个7年的微软MVP（专长是Visual Studio 和技术开发）。我曾带领团队开发过iVision，一个位于Atlanta,GA的技术咨询公司。我还是一个认证的 Kendo UI开发者和一个 Telerik 开发专家。我从Kendo UI的beta版就开始使用它。</p>
<p><a href="https://twitter.com/jenlooper" target="_blank" rel="external"><strong>Jen Looper</strong></a>:我和TJ是Developer Relations团队的成员</p>
<p> <a href="https://twitter.com/aurelioderosa" target="_blank" rel="external"><strong>Aurelio De Rosa</strong></a>: 大家好.我是来自意大利的开发者，我喜爱web开发。同时我也是jQuery团队的成员。 </p>
<p><a href="https://twitter.com/congocart" target="_blank" rel="external"><strong>Nathanael Anderson</strong></a>:我是一个独立开发者，做过web开发，桌面开发，服务器和移动应用。</p>
<p><a href="https://twitter.com/tjvantoll" target="_blank" rel="external"><strong>TJ VanToll</strong></a>:我和jen一样目前在 Dev Adovcate。我过去在jQuery UI团队，所以我的观点可能有些偏袒。我的同事Todd Motto 也在这并马上加入谈话。</p>
<p><strong>TJ VanToll</strong>:<a href="javascript:;" target="_blank" rel="external"></a>那我们开始第一个问题： 2016年使用jQuery的利弊是什么？谁来起头？</p>
<p><strong>Aurelio De Rosa</strong>: 用jQuery开发的一个主要优点就是很容易上手，这对于初级前端和业余开发者非常棒。</p>
<p><strong>TJ VanToll</strong>: 是的，个人来说我仍然觉得jQuery的API比原生DOM优雅一万倍。</p>
<p><strong>Jen Looper</strong>: 我觉得jQuery正变得越来越糟糕，不好用且过时,因为javascript疲劳且大量的新框架的冲击。</p>
<p><strong>Jeremy Likness</strong>: 从优点上来讲，jQuery是一个历史很久的web库，不仅仅是下载和使用，所以它是一个经历了考验的库，很多人都使用过它。事实上，很多javascript开发人员都把它和原生javascript搞混淆。</p>
<p><strong>TJ VanToll</strong>: 是的，而且因为这个， the breadth of knowledge online的课程也是这样，难以置信。</p>
<p><a href="https://twitter.com/toddmotto" target="_blank" rel="external"><strong>Todd Motto</strong></a>: 对我来说jQuery就像黑莓手机，曾经盛极一时，但如今迅速衰败。</p>
<p><strong>Jen Looper</strong>: 有一个坏处，有些新手开发人员提及，也正如Jermy提及的，jQuery使得一些开发人员对原生javascript知之甚少。</p>
<p><strong>Jeremy Likness</strong>: jQuery有大量的可靠扩展，插件。甚至我已经把jQuery视作标准化DOM的一种方式。你只需要写一次，而jQuery团队已经为你作好了浏览器适配。当然他做到的不仅仅是这些，所以我认为这就是它如此迅速流行的原因</p>
<p><strong>Nathanael Anderson</strong>: 我认为优点你们说的都不错。但在这个年代，jQuery最大的问题就是现在流行的浏览器已经越来越符合W3C规范，而且直接操作DOM是很慢的，jQuery不适合大量操作DOM的项目。</p>
<p><strong>Aurelio De Rosa</strong>:如Todd所说，比起以往，jQuery的作用正在减少。但是我认为它还是有很多有点：jQuery 造就了新的特性规范,比如<code>querySelectorAll()</code>, <code>prepend()</code>, <code>append()</code>, <code>before()</code>, <code>after()</code>, 和 <code>replaceWith()</code>.</p>
<p><strong>Jeremy Likness</strong>: 缺点:当有很多UI界面要制作的时候，很多jQuery的操作过于粗暴，导致HTML中有很多混乱的代码和标记。</p>
<p><strong>Jen Looper</strong>:在我看来，Angular的崛起和jQuery的衰落是有关的，包括jQuery lite。如果我记得没错，是在Angular 1.x 的时候，人们开始抛弃jQuery。 @<strong>Todd Motto</strong> 你怎么看？</p>
<p><strong>Jeremy Likness</strong>: 优点:接着上个观点，大多数你们做的就是 从哪开始，做什么，不做什么。例如，获取一个或一组元素，并操作它们。用一个声明式的方法，你可以直接给元素的父级添加行为，而没必要需要选择器去找到位置。</p>
<p><strong>Todd Motto</strong>:100%同意。老实说，在Angular之前我写的几乎都是jQuery。虽然我也知道Javascript的API。Angular的出现告诉jQuery开发者如何有效的分离结构来构建复杂的应用。</p>
<p><strong>Jen Looper</strong>:我的想法也是这样，Todd。 </p>
<p><strong>Todd Motto</strong>: 现在，我们说一些正面观点。相对于直接操作DOM，我们通过编程让javascript告诉DOM做什么。这是启发我的关键。事件监听？通过自动化的框架，比如React，Angular，一切都不是问题。</p>
<p><strong>Jeremy Likness</strong>: 我认为Angular，Knockout，React，都减少了jQuery的必要性。我不再要求开发者使用它，我们也极少在项目中使用它，如果有的话。因为我们现在更关注于数据绑定而不是命令式编程。<br>DOM api已经越来越规范，所以当你开发在一个现代的或者是edge 浏览器时，你没必要再需要兼容处理。</p>
<p><strong>TJ VanToll</strong>:是的，这也引发了我们下一个话题。现在什么种类的应用适合jQuery开发。</p>
<p><strong>Aurelio De Rosa</strong>: 我不认为还有特定种类的应用适合jQuery。我认为jQuery就是通用的，它什么地方都能使用。不过，当我在用Bootstrap开发原型时，很多时候我会用到jQuery。</p>
<p><strong>Jeremy Likness</strong>: 在我的工作中，它几乎只用于那种小册子网站或者老旧的网站。前者是因为网页大多数是静态代码，可以使用轻量的jQuery和插件来做动画。后者是因为他能处理旧的API。而99%的情况完全是副作用，比如因为我引入的库依赖它。然而这种情况在减少。</p>
<p><strong>Aurelio De Rosa</strong>:当开发圆形的时候，我需要用尽量少的代码快速搭建，这个时候jQuery非常棒，因为它的生态完善。比如jQuery UI，还有其它数不尽的插件，你可以用它们轻松完成一些你要实现的基础的功能。</p>
<p><strong>Nathanael Anderson</strong>: 我同意，jQuery过去常常被用来模拟东西，或者兼容旧的浏览器。但是大多新的应用开发正在降低jQuery的使用。</p>
<p><strong>Todd Motto</strong>:jQuery现在不适合构建应用。我们有组建模型。在现在的应用世界里，jQuery无需因为无用而羞愧。它助我们走过了浏览器的混乱时代，然而我们已经逐渐放弃了它，因为有了更好的框架。甚至Angular也是如此，我现在也很少用它。</p>
<p><strong>Jeremy Likness</strong>:对，原型很棒。如果我想展示一个动画研究的结果，展示没有互动的应用，就该这么做。然而坦率地说，我们现在很多的原型使用Angular做的，然后从原型标记开始构建真实的应用。</p>
<p><strong>TJ VanToll</strong>: 对我来说，web网页和web APP是不同的。web apps倾向于更复杂，更先进，比如分层架构就很不一样。web网页倾向于大型，不需要很复杂。在那种情况下，Angular，React，都是多余的。我仍然认为jQuery是及其靠谱的。jQuery插件仍然是构建小册子网站最简单的方式。</p>
<p><strong>Jeremy Likness</strong>:我得重申我的老观点。如果我想解析DOM，jQuery是最好的。也许我接受了一个大型网站，有很多代码，然后想添加一个简单的插件跑起来。我才不想用一个现代框架重写它。jQuery对我就是最简单的方式，DOM选择，DOM操作，不会就为了添加一个小效果就搞得惊天动地。恩，陈腔滥调，我又说了一遍。</p>
<p><strong>Todd Motto</strong>: jQuery的问题是它只是一个库，即使它有丰富多样的插件生态。想象什么是框架。有没有分层，视图层，模型层。除非你花很多时间绞尽脑汁一番。如果你用正确的javascript模式去开发一个js模型，那么jQuery才能完全搞定。但是我们，IMO，作为一个社区很难做到。开发很慢，很难确定，没有控制数据流，事件，生命周期钩子…</p>
<p><strong>TJ VanToll</strong>: 不用大费周章地加个事件。新的jQuery 标签行吗</p>
<p><strong>Jen Looper</strong>:在移动端上如何。有人会用它去写移动端应用吗？我想没有。 </p>
<p><strong>TJ VanToll</strong>: ????</p>
<p><strong>Nathanael Anderson</strong>:对PWA也许，原生APP不。</p>
<p><strong>Aurelio De Rosa</strong>: 我猜那基于你有多少特性想展示在原型上。如果我想展示一种奇偶奥胡或一个简单的特性，我绝对会用jQuery来避免任何框架。众所周知，MVC可以让你写更优雅的代码，让你分离层级。但是他也会急剧增加你的代码量。</p>
<p><strong>TJ VanToll</strong>:我曾在移动端用过jQuery，而且绝对不想再有第二遍。你得及其注意你的所作所为，因为流量精贵啊。但是jQuery有很好的组件，所以你可以只用你需要的部分(ajax，DOM操作，动画) </p>
<p><strong>Nathanael Anderson</strong>:React Native和NativeScript没有DOM，所以jQuery没用。而对Cordova/PhoneGap或者PWA，他们使用WebvIEW,所以你仍需要操作DOM。</p>
<p><strong>Todd Motto</strong>:甚至多年后，我仍能断言任何情况下jQuery mobile 也不会符合我的工作流</p>
<p><strong>Jen Looper</strong>: 是的，jQuery对移动端来说太重了。</p>
<p><strong>TJ VanToll</strong>: 我认为 如果你把它作为一个快速构建一个不错的app时，jQuery Mobile仍是可以的。记住，jQuery的初衷就是驯化不同的设备。<br>尽管好设备变得便宜起来。<br>但是它仍适合初学者和原型。比起现在的MVC框架易学易用</p>
<p><strong>Jeremy Likness</strong>: 嗯，“驯化 UI”，因该说标准化它。标准化DOM，标准化UI。<br>我不确定我同意一个框架增加了我写的代码。也许吧。但是如果我能写一个可以重复使用或者声明的组件，指令，行为，比起命令式的jQuery，我能用一个数据绑定的框架快速模拟。事实上，我很喜欢重复利用一些东西作为元素或附加行为。 比如添加一个’my-focus-attribute’的特性就能搞定。</p>
<p><strong>Aurelio De Rosa</strong>:我同意TJ，jQuery Mobile过去很有用，我现在仍发现有些网站在用。</p>
<p><strong>TJ VanToll</strong>: 有些Android 2.2里jQuery Mobile 的hack很有趣。</p>
<p><strong>Jen Looper</strong>: 你会教新手开发者jQuery吗，比如在一个代码学校。问一下。</p>
<p><strong>Jeremy Likness</strong>: Jen,也许不会。 我只是没熟练使用它。</p>
<p><strong>Aurelio De Rosa</strong>: 我不会教它，但我会用它教学。</p>
<p><strong>TJ VanToll</strong>: Jen, 我同意，它给了初学者一种能有能力快速有效解决问题的成就感。</p>
<p><strong>Aurelio De Rosa</strong>:我觉得jQuery是一个极其有用的代码教学工具。有时你想教一门技术但不想卷入复杂的浏览性兼容性中，不想分心在一些DOM API上。或者你想简洁地介绍概念而不是进入到原生实现中，不用写太多代码。这种情况下，jQuery是很棒的工具。<br><strong>Jen Looper</strong> Aurelio, 真是有趣的方式。 ????</p>
<p><strong>Aurelio De Rosa</strong>:  它给了初学者成就感。我听到你说了，TJ。</p>
<p><strong>Todd Motto</strong>: 性能对我来说是另一个关键因素。Angular 2通过提前编译可以静态分析，这样渲染是非常快速的。 而jQuery，它是完全的后处理DOM操作，没有办法控制状态突变或者模板层。单向数据流已经证明了这种方式，甚至 Angular 1.x 已经避免了组件的双向绑定来帮助迁移。从性能方面看，单向数据流比通过使用不可变操作创建新状态好太多，它使得侦测机器到计算改变的变化更快，同样时间旅行调试方法使得我们可以单步调试状态突变。jQuery字面上（对我）是一个有用的操作DOM的工具，但是和Angular2，React比，DOM层被分离出来了，使得性能和原生渲染一样。 (<a href="https://www.nativescript.org/" target="_blank" rel="external">NativeScript</a>, hello!)</p>
<p><strong>TJ VanToll</strong>: 我同意Todd刚才说的，唯一要回应的是有有很多网站对这种细微差别的性能是无所谓的。他们只需要能奏效。</p>
<p><strong>Jen Looper</strong>: 我刚从我书架上拿了一本书。Nick Morgan写的“JavaScript for Kids: A Playful Introduction to Programming”。强烈推荐，你们猜第九章写了什么？ </p>
<p><strong>Aurelio De Rosa</strong>: jQuery Jen? ????</p>
<p><strong>Jen Looper</strong>: “高级JavaScript: DOM 与 jQuery”</p>
<p><strong>TJ VanToll</strong>: 所以让我们进入到最后一个问题：如果你开发一个新的web app，你会使用jQuery吗？<br>我会给开发者一个我最爱的回答：它基于？？？</p>
<p><strong>Aurelio De Rosa</strong>:我默认不会，但是它也基于项目和支持的浏览器。有段时间，我不用支持IE 8，但是我仍然保留了支持IE8的代码习惯几年。所以，我仍会是不是看到jQuery。</p>
<p><strong>Jen Looper</strong>:结合我现在开发的案例，不会。也就是说我不再web/mobile 商店工作了。</p>
<p><strong>Nathanael Anderson</strong>: 不，不仅仅只是也许。如Tj所说，它基于什么。但是，似乎更是某些特殊案例才需要，而不是默认选择。</p>
<p><strong>Jeremy Likness</strong>:是的，回到册子式的网站或者遗留项目，jQuery仍然奏效。 </p>
<p><strong>TJ VanToll</strong>:对。我仍然绝对jQuery提供了有效的函数去写像那样的小网站。现在如果我动手一个大型复杂应用，我也许不会再用jQuery。我认为像Angular2那样的现代框架才是搭建那个量级应用的典范。 </p>
<p><strong>Aurelio De Rosa</strong>: 我想我们都同意jQuery不是构建单页面应用的工具，而且，实话实说，它也绝不会成为那样。</p>
<p><strong>Jeremy Likness</strong>: 99%的可能性我不会使用jQuery构建新应用。除非它是我引入的某个库和框架的依赖。我们大多数都在构建web app而不是web 网页，99%都是响应式，移动优先，单页面应用。</p>
<p><strong>Jen Looper</strong>:jQuery将会永远存在在遗留项目上，和那些框架一起。????</p>
<p><strong>Todd Motto</strong>:我也不会用。不够如果我是写的小册子式的网页，没有多少交互，我当让会考虑下。</p>
<p><strong>Aurelio De Rosa</strong>: 我们也应该考虑到jQuery不仅帮助了开发者，也促进了javascript。</p>
<p><strong>Jen Looper</strong>: 对.</p>
<p><strong>Aurelio De Rosa</strong>:jQuery不再实用，毫无置疑。但是它真的是个好东西。它意味着标准的进化，我们终于走到了jQuery带领的路上。</p>
<p><strong>Jen Looper</strong>:我认为它为很多人理清了路。</p>
<p><strong>TJ VanToll</strong>:很惊讶浏览器到现在才相对兼容。谁会想到jQuery2006年就推出了。</p>
<p><strong>Jeremy Likness</strong>: 是的，很讽刺。但我还有一个有10年时间的博客。我曾写过Slilverlight，Kendo，Angular的文章，甚至你还能说出来。但是如果你看了我几千文章中浏览量最多的文章，你会发现那是一个很古老的关于如何使用timeout去修复IE6的事件处理。，<br>那是web开发的黑暗时代，jQuery改变了它，让web app 有了惊人的可能。</p>
<p><strong>Aurelio De Rosa</strong>: 嗯，仅仅花了几十年的????</p>
<p><strong>Nathanael Anderson</strong>: 是的，但是jQuery也许有很多方面花在了处理微软IE的问题上了。因为很多规范IE不支持。</p>
<p><strong>Aurelio De Rosa</strong>:有件事我希望在今后的新框架和库中想看到的那就是有一个好的文档，与jQuery有可比性的。<br>与jQuery一样有好文档的可不多。</p>
<p><strong>Jen Looper</strong>: 对，我想这一点赶上jQuery还要花点时间</p>
<p><strong>Nathanael Anderson</strong>:PHP imho有更好的文档。但是jQuery比大多数项目也更好。</p>
<p><strong>TJ VanToll</strong>: Aurelio,完全同意，关于这一点，我们要多谢谢一下Aurelio，又名 <a href="https://github.com/jquery/api.jquery.com/graphs/contributors" target="_blank" rel="external">4th largest contributor to api.jquery.com</a> ????</p>
<p><strong>Jeremy Likness</strong> 谢谢, Aurelio!</p>
<p><strong>Jen Looper</strong>: ????</p>
<p><strong>Aurelio De Rosa</strong>:真不好意思, 谢谢大家 ????</p>
<p><strong>Todd Motto</strong>: 最后一件事:我们没必要去劝阻开发者不用jQuery。它是一个强大成熟的库，虽然它在现代web开发的地位是被动摇了。也许5年后，我们又会再错一次。</p>
<p><strong>Jeremy Likness</strong>:文档很棒，乐于看到新的框架吸收jQuery的文档哲学。希望开发者写完应用要测试，不要写完不管。 </p>
<p><strong>Jen Looper</strong>:我只想说如果web真的走到了不需要jQuery的地步，那真是天大的好消息。那就意味着浏览器已经足够标准化，框架也非常成熟。现在，我们有了一个伟大的目标去实现未来的开发。</p>
<p><strong>Jeremy Likness</strong>:对。我不是明确反对jQuery或者说反对开发者使用它，就像我也很重React和Ember，尽管我是用Angular开发我的产品。</p>
<p><strong>Nathanael Anderson</strong>:同意 Todd 和 Jeremy。jQuery 仍然是一个强大的库。</p>
<p><strong>Aurelio De Rosa</strong>: 作为web开发者，我们歉 jquery 太多。它是一个非常成熟的库，还有一点，其它库做不到的，那就是它甚至达到了一种不需要再加更多有用的功能了。事实上，还减去了一些功能（比如slim版本）。所以，让我们谢谢jQuery和它背后的社区。</p>
<p><strong>Nathanael Anderson</strong>: +1</p>
<p><strong>Todd Motto</strong>: 恩。如果所有的框架都行不通，至少我仍能用jQuery搞定工作。</p>
<p><strong>TJ VanToll</strong>: 对我来说，jQuery有着规范的标准，优雅的API设计，易于理解的文档。尽管我可能不会在我以后的应用中使用它，但我仍然觉得它方便的DOM操作和强大的插件使得开发应用非常简单。<br>有一点，在Progress，我们有n种方式让你选择去构建你的应用。我们超级流行的框架<a href="http://www.telerik.com/kendo-ui" target="_blank" rel="external">Kendo UI for jQuery control suite</a> 提供了基于jQuery的70多种UI插件。而我们新的  <a href="http://www.telerik.com/kendo-angular-ui/" target="_blank" rel="external">Kendo UI for Angular 2 suite</a>让你使用同样的但不依赖jQuery的控件。</p>
<p><strong>相关资源:</strong></p>
<ul>
<li><p><a href="http://www.telerik.com/campaigns/kendo-ui/javascript-future" target="_blank" rel="external">The Future of JavaScript: 2016 and Beyond</a> (whitepaper)</p>
</li>
<li><p><a href="http://developer.telerik.com/featured/whats-new-in-jquery-3/" target="_blank" rel="external">What’s New in jQuery 3</a> (article)</p>
</li>
<li><p><a href="http://developer.telerik.com/featured/jquerys-relevancy-there-and-back-again/" target="_blank" rel="external">jQuery’s Relevancy – There and Back Again</a> (article)</p>
</li>
<li><p><a href="http://developer.telerik.com/featured/leveling-up-your-javascript/" target="_blank" rel="external">Leveling Up Your JavaScript</a> (article)</p>
</li>
</ul>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@freeeeeeeaker" target="_blank" rel="external">freeeeeeeaker</a><br>链接：<a href="http://www.zcfy.cc/article/1442" target="_blank" rel="external">http://www.zcfy.cc/article/1442</a><br>原文：<a href="http://developer.telerik.com/featured/is-jquery-still-relevant/" target="_blank" rel="external">http://developer.telerik.com/featured/is-jquery-still-relevant/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一个治愈JavaScript疲劳的学习计划]]></title>
      <url>http://jsgrblog.win/2016/12/11/%E4%B8%80%E4%B8%AA%E6%B2%BB%E6%84%88JavaScript%E7%96%B2%E5%8A%B3%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<p><img src="http://p0.qhimg.com/t0113ad63505cc39203.png" alt=""></p>
<a id="more"></a>
<p>像其他人一样，我最近偶然看到 Jose Aguinaga 的文章<a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.5wjpn7svo" target="_blank" rel="external">《在 2016 年学 JavaScript 是一种什么样的体验》</a>”。</p>
<blockquote>
<p>译者注：<a href="https://zhuanlan.zhihu.com/p/22782487" target="_blank" rel="external">中文翻译在此</a>。</p>
</blockquote>
<p>很显然，这篇文章触到了很多人的痛点：我看到它两次荣登 <a href="http://news.ycombinator.com" target="_blank" rel="external">Hacker News</a> 的榜首。它也是 <a href="http://reddit.com/r/javascript/" target="_blank" rel="external">/r/javascript</a> 上最热门的文章，并且截至目前它在 Medium 上有超过 10K 个喜欢 - 可能比我自己所有文章加在一起还要多。但是谁在乎呢？</p>
<p>不过这不足为奇：我早就知道 JavaScript 生态圈会让人困惑。实际上，我做 <a href="http://stateofjs.com" target="_blank" rel="external">JavaScript 2016年的概况</a>调查的最大原因就是想找到哪些库是真正流行的，去芜存菁。</p>
<p>但是今天，我想更进一步。只是抱怨事物的状态并没有什么卵用，我打算给你一个实实在在的、一步一步征服 JavaScript 生态圈的学习计划。</p>
<h3 id="目标人群"><a href="#目标人群" class="headerlink" title="目标人群"></a>目标人群</h3><p>如果你是如下之一，那么本学习计划就是为你定制的：</p>
<ul>
<li><p>你已经熟悉了基础编程概念，比如变量和函数。</p>
</li>
<li><p>你可能已经用诸如 PHP 和 Python 之类的语言做过后台的工作，并且可能为一些简单技巧用过诸如 jQuery 这种前端库。</p>
</li>
<li><p>你现在想从事一些更正规的前端开发，但是在开始之前就被框架和库淹没。</p>
</li>
</ul>
<h3 id="我们将讲解的事情"><a href="#我们将讲解的事情" class="headerlink" title="我们将讲解的事情"></a>我们将讲解的事情</h3><ul>
<li><p>一个现代 JavaScript Web 应用看起来像什么样子</p>
</li>
<li><p>为什么你不能只用 jQuery</p>
</li>
<li><p>为什么 React 是最安全的选择</p>
</li>
<li><p>为什么你也许不需要先“正确地学习 JavaScript“</p>
</li>
<li><p>如何学习 ES6 语法</p>
</li>
<li><p>为什么要以及如何学习 Redux</p>
</li>
<li><p>GraphQL 是什么以及为什么它是一个大事</p>
</li>
<li><p>之后该学什么</p>
</li>
</ul>
<h3 id="这里提到的资源"><a href="#这里提到的资源" class="headerlink" title="这里提到的资源"></a>这里提到的资源</h3><p>声明：本文将包含一些对 <a href="http://wesbos.com/" target="_blank" rel="external">Wes Bos</a> 所做课程的附属链接，但是我推荐他的素材是因为我真心认为不错，而不是为了推广。</p>
<p>如果你想找其它资源，那么可以看看 Mark Erikson 维护的一份 <a href="https://github.com/markerikson/react-redux-links" target="_blank" rel="external">React、ES6 和 Redux</a> 的长长链接列表。</p>
<h3 id="此-JavaScript-非彼-JavaScript"><a href="#此-JavaScript-非彼-JavaScript" class="headerlink" title="此 JavaScript 非彼 JavaScript"></a>此 JavaScript 非彼 JavaScript</h3><p>在开始之前，我们需要确保我们谈论的是同一件事情。如果你搜索 “学习 JavaScript” 或者 “JavaScript 学习计划”，会找到大量教你如何学习 JavaScript <em>语言</em> 的资源。</p>
<p>但是这实际上是 <em>简单的</em> 部分。你肯定可以深入挖掘和学习这门语言中复杂的部分，然而事实是大多数 web 应用只用了相对简单的代码。换句话说，为编写 web 应用，你所需的 80% 知识通常只涉及标准 JavaScript 书的前几章。</p>
<p>最难搞定的是掌握 JavaScript <em>生态圈</em>，这个生态圈有不计其数的竞争性的框架和库。好消息是，这刚好是本学习计划关注的问题。</p>
<h3 id="JavaScript-应用的构建单元"><a href="#JavaScript-应用的构建单元" class="headerlink" title="JavaScript 应用的构建单元"></a>JavaScript 应用的构建单元</h3><p>要理解为什么现代 JavaScript 应用好像如此复杂，你首先得理解它们的工作机制。</p>
<p>对于初学者，我们来看看大约在 2008 年的“传统” web 应用：</p>
<p><img src="http://p0.qhimg.com/t01c7420f3812de36a9.png" alt=""></p>
<ol>
<li><p>数据库发送数据给你的后台（比如你的 PHP 或者 Rails 应用）。</p>
</li>
<li><p>后台读取该数据，并输出 HTML。</p>
</li>
<li><p>HTML 被发送给浏览器，浏览器将其显示为 DOM（即，网页）</p>
</li>
</ol>
<p>现在很多这种应用也会在客户端塞进一些 JavaScript 代码来添加交互性，比如标签和模态窗口。但是从本质上讲，浏览器依然是接收 HTML 并且从这里开始。</p>
<p>现在把它与“现代” 2016年的 Web 应用（也称为”单页应用“）比较：</p>
<p><img src="http://p0.qhimg.com/t011abe8be39c86968f.png" alt=""></p>
<p>注意到区别没有？服务器现在是发送<strong>数据</strong>，而不是发送 HTML，并且“数据到HTML”转换步骤发生在客户端 (这也是为什么你要把数据与代码一起发送，告诉客户端如何执行所说的转换）。</p>
<p>这有很多含义。首先，好的部分是：</p>
<ul>
<li><p>对于给定内容块，只发送数据比发送整个 HTML 页面更快。</p>
</li>
<li><p>客户端可以立即切换内容，而不需要像以前那样刷新浏览器窗口（这也是术语“单页应用”的由来）。</p>
</li>
</ul>
<p>坏的部分是：</p>
<ul>
<li><p>首次加载更长，因为”数据到 HTML”代码库会变得很大。</p>
</li>
<li><p>你现在也需要一个地方来存储和管理客户端上的数据，从而方便缓存或者检查它。</p>
</li>
</ul>
<p>而恶心的部分是：</p>
<ul>
<li>恭喜 - 你现在不得不处理客户端技术栈，这会变得跟服务器端技术栈一样复杂。</li>
</ul>
<h3 id="客户端-服务器光谱"><a href="#客户端-服务器光谱" class="headerlink" title="客户端-服务器光谱"></a>客户端-服务器光谱</h3><p>那么，既然有这么多缺点，为什么要受这种罪呢？为什么不就沿袭过去 PHP 应用的老套路呢？</p>
<p>好吧，假设你正在写一个计算器。如果用户想知道 2 + 2 是多少，那么当浏览器完全有能力做这种事情的时候，回到服务器执行这种操作然后再返回过来就很毫无意义了。</p>
<p>另一方面，如果你只是创建一个纯静态网站，比如博客，那么直接在服务器上生成最终的 HTML 就挺合适的。</p>
<p>事实是，大多数 web 应用介于光谱的中间地带。问题是要知道在哪里。</p>
<p>但是关键的事情是 <em>这个光谱是不连续的</em> ：你不能从一个纯服务器端应用开始，慢慢走向一个纯客户端应用。在某个点（分水线 divide），你会被强制停下来，重构所有东西，否则会以一大堆不可维护的意大利面条式的代码而告终。</p>
<p><img src="http://p0.qhimg.com/t01afe776739ac5d3ad.png" alt=""></p>
<p>这就是为什么你不应该不管做什么都只用 jQuery 的原因。你可以把 jQuery 当作是牛皮胶布。用它对付家里的小修小补还是很方便，但是如果你到处贴就很难看了。</p>
<p>另一方面，现代 JavaScript 框架更像 3D 打印的一个替换零件：要花更长时间，但是结果是更干净更坚固。</p>
<p>也就是说，掌握现代 JavaScript 技术栈是个赌注，不管从哪里开始，大多数 web 应用 <em>可能</em> 迟早都会出现在分水线的右边。所以，是的，要干的活更多了，但是有备无患更好。</p>
<h3 id="第-0-周-JavaScript-基础"><a href="#第-0-周-JavaScript-基础" class="headerlink" title="第 0 周:  JavaScript 基础"></a>第 0 周:  JavaScript 基础</h3><p>除非你是一名纯后台开发者，否则你可能会了解点 JavaScript。当然，即使你不了解，如果你是一名 PHP 或者 Java 开发者，JavaScript 的类 C 语法也会看起来有点熟悉。</p>
<p>但是如果 JavaScript 对你来说是完全摸不着头脑，也不要灰心。有很多免费资源在那，可以快速让你了解最新情况。比如，一个不错的出发点是 <a href="https://www.codecademy.com/learn/javascript" target="_blank" rel="external">Codecademy 的 JavaScript 课</a>。</p>
<h3 id="第-1-周-从-React-开始"><a href="#第-1-周-从-React-开始" class="headerlink" title="第 1 周: 从 React 开始"></a>第 1 周: 从 React 开始</h3><p>现在知道了基础 JavaScript 语法，而且你理解了为什么 Javascript 应用显得那么复杂，下面我们详谈。到底要从哪里开始呢？</p>
<p>我相信答案是 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a>。</p>
<p><a href="https://facebook.github.io/react/" target="_blank" rel="external"><img src="http://p0.qhimg.com/t0187538911b82a14e4.png" alt=""></a></p>
<p>React 是一个由 Facebook 创建和开源的 UI 库。也就是说，它负责“数据到HTML”这一步（视图层）。</p>
<p>现在不要误会我：我不是告诉你因为 React 是 <em>最好</em> 的库，所以要选它（因为这太主观了），而是因为它是 <em>相当不错</em> 。</p>
<ul>
<li><p>React 也许不是最流行的库，但是它是相当流行的。</p>
</li>
<li><p>React 也许不是最轻量级的库，但是它是相当轻量级的。</p>
</li>
<li><p>React 也许不是最容易学的，但是它是相当容易学的。</p>
</li>
<li><p>React 也许不是最优雅的库，但是它是相当优雅的。</p>
</li>
</ul>
<p>也就是说，React 也许并非是所有情况的 <em>最佳</em> 选择，但是我相信它是最 <em>安全</em> 的。相信我，”就在你刚开始的时候”并不是承担技术选择风险的最佳时间。</p>
<p>React 也会给你介绍一些有用的概念，比如组件、应用程序状态、无状态函数。不管在你职业生涯期间最终使用哪个框架或者库，这些概念都会被证明是有用的。</p>
<p>最后，React 有一个很大的生态圈，这个生态圈还包括其它可以与 React 配合得很好的包和库。并且它的完全普及意味着你可以在 Stackoverflow 这类网站上找到很多帮助。</p>
<p>我个人推荐 We Bos 的 <a href="https://reactforbeginners.com/friend/STATEOFJS" target="_blank" rel="external">React初学者课程</a>。我自己就是看这个课程学的，而且它刚刚用最新的 React 最佳实践彻底修订过。</p>
<h3 id="你应该首先“正确地学习-JavaScript”-吗？"><a href="#你应该首先“正确地学习-JavaScript”-吗？" class="headerlink" title="你应该首先“正确地学习 JavaScript” 吗？"></a>你应该首先“正确地学习 JavaScript” 吗？</h3><p>如果你是一个按部就班的学习者，你可能想在做其它事情之前很好地掌握 JavaScript 的基本原理。</p>
<p>但是对于其它人来说，这就好像是学游泳的时候学习人体解剖学和流体动力学一样。确实，这二者都在游泳中起了很大的作用，但是跳到游泳池里会更好玩！</p>
<p>这里没有正确或者错误的答案，一切都取决于你的学习方式。事实是，反正最基础的 React 教程可能会只用到 JavaScript 很小的一个子集，所以只关注你现在需要的，剩下的以后再说，这样会更好。</p>
<p>这也适用于整个 JavaScript 生态圈。现在先不要对理解像 Webpack 或者 Babel 这些东西的来龙去脉操太多心。实际上 React 最近推出了它自己的小<a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">命令行工具</a>，用这个工具你完全不需要构建任何配置，就可以创建应用。</p>
<h3 id="第-2-周-你的第一个-React-项目"><a href="#第-2-周-你的第一个-React-项目" class="headerlink" title="第 2 周: 你的第一个 React 项目"></a>第 2 周: 你的第一个 React 项目</h3><p>下面我们假设你刚完成了一个 React 课程。如果你跟我一样，那么两件事情可能是真的：</p>
<ul>
<li>你已经把你刚学的内容忘掉了一半。</li>
<li>你迫不及待要把你记得的一半用于实践。</li>
</ul>
<p>我相信学习一个框架或者一门语言的最好方式是马上就用它。而个人项目是尝试新技术的完美时机。</p>
<p>个人项目可以是任何东西，小到一个简单页面，大到一个复杂的 Web 应用，但是我认为重新设计你的个人网站可能是一个刚刚好。并且，我知道你可能已经把你的个人网站搁置多年了！</p>
<p>我之前提到过，用单页应用模式开发静态内容确实有点大材小用，不过 React 实际上有一款秘密武器：<a href="https://github.com/gatsbyjs/gatsby" target="_blank" rel="external">Gatsby</a>。这是一个 React 静态网站生成器，可以体验一下 React 的所有优点。</p>
<p><img src="http://p0.qhimg.com/t01178d0342a4f8194b.gif" alt=""></p>
<p>使用 Gatsby 来上手 React 有如下几个好处：</p>
<ul>
<li><p>预先配置好的 Webpack，意味着你要省下来很多麻烦事。</p>
</li>
<li><p>基于目录结构自动生成路由。</p>
</li>
<li><p>所有 HTML 内容也是由服务器端生成的，所以你得到了两全其美的结果。</p>
</li>
<li><p>静态内容意味着不需要服务器，可以很简单的托管在 <a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>上。</p>
</li>
</ul>
<p>我就是用 Gatsby 搞定 <a href="http://stateofjs.com" target="_blank" rel="external">State Of JavaScript</a> 网站，完全不需要操心路由、构建工具的配置，以及服务器端渲染，为我节省了大把时间。</p>
<h3 id="第-3-周-掌握-ES6"><a href="#第-3-周-掌握-ES6" class="headerlink" title="第 3 周: 掌握 ES6"></a>第 3 周: 掌握 ES6</h3><p>在我自己学习 React 的探索中，我很快就发现我可以很轻松地复制粘贴代码示例，但是有很多东西我仍然不懂。</p>
<p>特别是，我对 <a href="http://es6-features.org/#Constants" target="_blank" rel="external">ES6</a> 引入的一些新功能不太熟悉，比如：</p>
<ul>
<li><p>箭头函数</p>
</li>
<li><p>对象解构</p>
</li>
<li><p>类</p>
</li>
<li><p>展开运算符</p>
</li>
</ul>
<p>如果你处境相同，那么可能到了要花几天学习一下 ES6 的时候了。如果你喜欢 React 初学者课程，你可能想掏钱看看 Wes 的优秀视频 <a href="https://es6.io/friend/stateofjs" target="_blank" rel="external">ES6 for Everybody</a>。</p>
<p>或者如果你喜欢免费资源的话，那就看看 <a href="https://ponyfoo.com/books/practical-es6/chapters" target="_blank" rel="external">Nicolas Bevacqua 的书《Practical ES6》</a>。</p>
<p>掌握 ES6 的一个好练习是翻一下较早的代码库（比如你在第一周创建的！），尽可能将代码转换为 ES6 的更短、更简洁的语法。</p>
<h3 id="第-4-周-掌握状态管理"><a href="#第-4-周-掌握状态管理" class="headerlink" title="第 4 周: 掌握状态管理"></a>第 4 周: 掌握状态管理</h3><p>到了这里，你应该有能力创建一个支持静态内容的简单 React 前端了。</p>
<p>但是真正的 Web 应用不会是静态的：它们需要从某个地方获取数据，通常是某种类型的数据库。</p>
<p>现在你只能向一个组件发送数据，但是这很快会变得很糟糕。比如，如果两个组件需要显示同一块数据该怎么办？或者二者两个组件需要相互对话该怎么办？</p>
<p>这就是<strong>状态管理</strong>起作用的地方。你可以把状态（换句话说，就是数据）存储到一个<strong>全局的仓库</strong>中，然后将其分发到你的 React 组件中，而不是一点一点存储在每个组件中：</p>
<p><img src="http://p0.qhimg.com/t010a6fb2e6ae88006a.png" alt=""></p>
<p>在 React 阵营中，最热门的状态管理库是 Redux。Redux 不仅可以帮助你集中管理数据，还可以对数据的操作制定严格的协议。</p>
<p><a href="http://redux.js.org/" target="_blank" rel="external"><img src="http://p0.qhimg.com/t01e12a6cfa2712eb25.png" alt=""></a></p>
<p>可以地把 Redux 当作是一个银行：你不能到本地的分行，手动修改你的账户总额（“嘿，就让我多加几个零吧！”）。而是填写一个存款单，然后把它交给授权执行该操作的银行出纳员。</p>
<p>同样，Redux 也不允许你直接修改全局状态。而是将 action 传递给 reducer。reducer 是一个特殊的函数，它执行修改状态的操作，返回新的更新了的状态为结果。</p>
<p>所有这些额外工作带来的是整个应用中高度标准化和可维护的数据流，并且数据流可以通过访问 <a href="https://github.com/gaearon/redux-devtools" target="_blank" rel="external">Redux Devtools</a> 这类工具来可视化：</p>
<p><img src="http://p0.qhimg.com/t01eb303374352d96b0.gif" alt=""></p>
<p>你可以再次与我们的朋友 Wes 在一起，用<a href="https://learnredux.com/" target="_blank" rel="external">他的 Redux 课程</a>来学习 Redux，这套课程是完全免费的。</p>
<p>或者，你可以用 Redux 的发明人 Dan Abramov <a href="https://egghead.io/courses/getting-started-with-redux" target="_blank" rel="external">在 egghead.io 上的视频课程</a>来学习。这套课程也是免费的。</p>
<h3 id="第-5-周-用-GraphQL-创建-API"><a href="#第-5-周-用-GraphQL-创建-API" class="headerlink" title="第 5 周: 用 GraphQL 创建 API"></a>第 5 周: 用 GraphQL 创建 API</h3><p>迄今为止，我们差不多只谈及了客户端，这只是等式的一半。即使你不需要完全掌握整个 Node 生态圈，也需要了解对于任何 Web 应用都很关键的一点：数据是如何从服务器到客户端的。</p>
<p>毫不奇怪，这个环节也是快速变化的。此时，Facebook 的另一个开源项目 <a href="http://graphql.org" target="_blank" rel="external">GraphQL</a> 应运而生，成为传统 REST API 的一个重要替代物。</p>
<p><a href="http://graphql.org/" target="_blank" rel="external"><img src="http://p0.qhimg.com/t0164039fb66b5760aa.png" alt=""></a></p>
<p>REST API 暴露多个 REST 路由，每个路由让你可以访问一个预定义的数据集（比如，/api/post、/api/comments 等等）。而 GraphQL 只暴露一个端点，让客户端可以通过这一个端点查询它所需的数据。</p>
<p>就好像你要买很多东西，REST API 就是多次来回肉店、面包店、小卖部，而 GraphQL 就是给某人一个购物清单，然后把他送到这三个地方。</p>
<p>当你需要查询多个数据源的时候，这种新策略就变得特别有意义了。就像购物清单示例一样，现在你可以用一个请求，从所有这些数据源获取数据。</p>
<p>GraphQL 在过去一年左右的时间已经日益受欢迎，很多项目（比如我们第二周所用的 <a href="https://github.com/gatsbyjs/gatsby/" target="_blank" rel="external">Gatsby</a>）都在计划采用它。</p>
<p>GraphQL 本身只是一个协议，但是目前它的最佳实现可能是 <a href="http://apollostack.com" target="_blank" rel="external">Apollo</a> 库。这个库能与 Redux 很好地配合。有关 GraphSQL 和 Apollo 的教学材料依然很少，但是希望 <a href="http://dev.apollodata.com/" target="_blank" rel="external">Apollo 文档</a> 能帮你开始。</p>
<h3 id="除了-React-及其生态圈外"><a href="#除了-React-及其生态圈外" class="headerlink" title="除了 React 及其生态圈外"></a>除了 React 及其生态圈外</h3><p>我推荐你从 React 生态圈开始，是因为它是安全的选择。但是，它绝非是唯一有效的前端技术栈。如果你想继续探索的话，这里还有两个推荐：</p>
<h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h4><p><a href="http://vuejs.org/" target="_blank" rel="external">Vue</a> 是一个相对比较新的库，但是它正以创记录的速度增长，而且已经被大公司采纳。特别在中国，它正被像百度和阿里巴巴（被认为是中国的谷歌和中国的亚马逊）这样的公司采用。并且它还是 PHP 框架 <a href="https://laravel.com/" target="_blank" rel="external">Laravel</a> 的官方前端层。</p>
<p><a href="http://vuejs.org/" target="_blank" rel="external"><img src="http://p0.qhimg.com/t01d74594f16d07975c.png" alt=""></a></p>
<p>与 React 相比，它的一些关键卖点是：</p>
<ul>
<li><p>官方维护的路由和状态管理库。</p>
</li>
<li><p>关注于性能。</p>
</li>
<li><p>较低的学习曲线（由于使用的是基于 HTML 的模板）。</p>
</li>
<li><p>较少的样板代码。</p>
</li>
</ul>
<p>按照现在的情况，依然让 React 比 Vue 占优势的两个主要因素是 React 生态圈的大小，以及 <a href="https://facebook.github.io/react-native/" target="_blank" rel="external">React Native</a> (稍后会详细介绍）。但是我会好不吃惊地看到 Vue 会很快赶上！</p>
<h4 id="Elm"><a href="#Elm" class="headerlink" title="Elm"></a>Elm</h4><p>如果说 Vue 是更平易近人的选项，那么 <a href="http://elm-lang.org/" target="_blank" rel="external">Elm</a> 就是更前沿的选项。Elm 不仅是一个框架，还是一个编译到 JavaScript 的全新语言。</p>
<p>这带来不少优点，比如性能提升、强制语义版本控制以及无运行时异常。</p>
<p>我本人还没有试过 Elm，但是我的朋友们都给我热烈推荐它。并且 Elm 用户通常看起来对它很满意（JavaScript 2016的概况调查中展示 Elm 有 <a href="http://stateofjs.com/2016/flavors/" target="_blank" rel="external">84% 的满意度</a>）。</p>
<h3 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h3><p>到这里你应该已经很好地掌握了整个 React 前端技术栈，并且有希望用它带来相当的产出。</p>
<p>但是这并不意味着这就完事了！这只是 JavaScript 生态圈旅程的开端。你会逐渐遇到一些其它主题，包括：</p>
<ul>
<li><p>服务器端的 JavaScript (Node、<a href="https://expressjs.com/" target="_blank" rel="external">Express</a>…)</p>
</li>
<li><p>JavaScript 测试 (<a href="https://facebook.github.io/jest/" target="_blank" rel="external">Jest</a>、<a href="https://github.com/airbnb/enzyme" target="_blank" rel="external">Enzyme</a>…)</p>
</li>
<li><p>构建工具 (<a href="https://webpack.github.io/" target="_blank" rel="external">Webpack</a>…)</p>
</li>
<li><p>类型系统 (<a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>、<a href="https://flowtype.org/" target="_blank" rel="external">Flow</a>…)</p>
</li>
<li><p>处理 JavaScript 应用中的 CSS (<a href="https://github.com/css-modules/css-modules" target="_blank" rel="external">CSS 模块</a>、<a href="https://github.com/styled-components/styled-components" target="_blank" rel="external">样式化的组件Styled Components</a>…)</p>
</li>
<li><p>JavaScript 移动应用开发 (<a href="https://facebook.github.io/react-native/" target="_blank" rel="external">React Native</a>…)</p>
</li>
<li><p>JavaScript 桌面应用开发 (<a href="http://electron.atom.io/" target="_blank" rel="external">Electron</a>…)</p>
</li>
</ul>
<p>我不可能在这里就涵盖所有这些内容，但是不要灰心！第一步总是最艰难的，你猜怎么着：你已经通过阅读本学习计划，跨出了第一步。</p>
<p>现在你理解了如何把生态圈中不同部分组合在一起，这不过就是将你下一步想学习的内容排队，并且每个月搞定一个新技术。</p>
<h3 id="保持联系"><a href="#保持联系" class="headerlink" title="保持联系"></a>保持联系</h3><p>这个学习计划对你有帮助吗？你希望我下一次写 JavaScript 的哪一块？请在这里，或者在 <a href="http://twitter.com/sachagreif" target="_blank" rel="external">我的推特</a> 上留下评论，让我知道。</p>
<p>如果你想知道下一次我要发表什么文章，也可以<a href="http://eepurl.com/ccyxCn" target="_blank" rel="external">注册 the State Of JavaScript 邮件列表</a>。</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@bigshaw" target="_blank" rel="external">网络埋伏纪事</a><br>链接：<a href="http://www.zcfy.cc/article/1617" target="_blank" rel="external">http://www.zcfy.cc/article/1617</a><br>原文：<a href="https://medium.freecodecamp.com/a-study-plan-to-cure-javascript-fatigue-8ad3a54f2eb1#.d39y4izhb" target="_blank" rel="external">https://medium.freecodecamp.com/a-study-plan-to-cure-javascript-fatigue-8ad3a54f2eb1#.d39y4izhb</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016年学习JavaScript是怎样的一种体验]]></title>
      <url>http://jsgrblog.win/2016/12/11/2016%E5%B9%B4%E5%AD%A6%E4%B9%A0JavaScript%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<p><em>在这篇文章的写作过程中没有JavaScript框架被创建出来。</em></p>
<p><em>下面这篇文章是受Circle CI的《这就是未来》激发而写的。你可以在<a href="https://circleci.com/blog/its-the-future/" target="_blank" rel="external">这里</a>读到原始版本。这篇文章只是代表一种观点，就像任何JavaScript框架一样，不必严肃对待。</em></p>
<a id="more"></a>
<p>嗨，我最近获得了一个web项目，但是说实话，我已经有几年没有写web代码了，而且我也听说web领域发生了一些变化。你算是最跟得上时代潮流的web开发者了，对吧？</p>
<p><em>-确切的说应该是前端工程师，但是是的，你算是找对人了。2016年我做web开发，可视化、音乐播放器、踢足球的无人机，你随便问，来者不拒。我刚刚参加完JS大会和React大会，所以我知道构建web应用的最新技术。</em></p>
<p>牛掰啊。我需要创建一个展示用户最近活动的页面，所以我需要从RESTful API获取数据，然后在可过滤的表格上展示出来。我在想是不是可以用jQuery来获取并展示数据？</p>
<p><em>-Word天呐，不可以，现在已经没有人用jQuery了。你应该学习下React，现在可是2016年了啊。</em></p>
<p>额，好吧。React是什么呢？</p>
<p><em>-它是一个Facebook出品的超级酷炫的库，它允许你非常简单地操控视图的变化，并且能使你的应用具有可控性和高性能。</em></p>
<p>听起来不错哦。那我可以用React展现从服务器上获取的数据么？</p>
<p><em>-必须的，但是首先你需要在你的页面上添加React库和React DOM库。</em></p>
<p>哎，等会儿，怎么是两个库呢？</p>
<p><em>-是这样的，一个库是我刚说的那个，另一个库是用来操作JSX写的DOM的。</em></p>
<p>JSX？JSX是个啥玩意？</p>
<p><em>-JSX是JavaScript的语法扩展，看起来特别像XML。它是另一种写DOM的方式，你可以认为它是一种更好的写HTML的方式。</em></p>
<p>HTML有什么问题么？</p>
<p><em>-现在是2016年了好嘛。已经木有人直接写HTML了。</em></p>
<p>好吧，不管怎么样，如果我添加了这两个库我是不是就可以使用React了？</p>
<p><em>-不完全是。你需要添加Babel，然后你就可以用React了。</em></p>
<p>另一个库？Babel是嘛玩意？</p>
<p><em>-哦，Babel是个转义工具，可以将任意版本的JavaScript转义成特定版本的JavaScript。使用React并不是必须用Babel，但是如果你不用Babel的话，你就只能用ES5了。现实点吧哥们，现在可是2016年了啊，你应该像其他牛掰的同学那样用ES2016+来码代码。</em></p>
<p>ES5？ES2016+？我又蒙了。ES5和ES2016+又是什么鬼？</p>
<p><em>-ES5就是ECMAScript 5。大部分人都会用ES5，因为现在大部分浏览器都支持ES5。</em></p>
<p>ECMAScript？</p>
<p><em>-是的，你知道的，JavaScript是1995诞生的，ECMAScript是在1999年制定出来的JavaScript标准，那会儿JavaScript还叫Livescript，而且只能跑在网景浏览器里面。那会儿非常混乱，但是现在好了，而且有7个版本的JavaScript。</em></p>
<p>我了个去，7个版本。那ES5和ES2016+是啥？</p>
<p><em>-分别是第五版和第七版。</em></p>
<p>等会儿，第六版搁哪了，不是要雨露均沾？</p>
<p><em>-你是说ES6？我是说，每一个版本是前一个版本的超集，所以如果你正在使用ES2016+，那么你就可以使用之前版本的所有特性。</em></p>
<p>哦，这样啊。那为啥不用ES2016+而是用ES6呢？</p>
<p><em>-哦，你可以用ES6，但是为了使用一些像async和await这样炫酷十足的特性，你就得用ES2016+了。否则，你就只能用ES6的generator来控制异步流程了。</em></p>
<p>我真心不懂你刚刚说了什么，这名字都把我搞晕了。是这样的，我就是想从服务器上获取数据，我之前是从CDN引入jQuery，然后使用AJAX来获取数据，为啥我现在不能这样做了呢？</p>
<p><em>-大哥，这都2016年了好伐，没有人再用jQuery了。每个人都知道，使用jQuery的最终下场就是码出一堆意大利面条一样的代码。</em></p>
<p>哦，那我现在就需要加载三个库来获取数据并用HTML表格来展现。</p>
<p><em>-恩，你需要把这三个库引进来，然后用模块管理器把它们打包成一个文件。</em></p>
<p>好吧，那什么是模块管理器呢？</p>
<p><em>-具体的定义是依赖于环境的，但是在web开发中一般意味着支持AMD或者CommonJS模块的东西。</em></p>
<p>好吧。。。AMD和CommonJS又是个啥玩意？</p>
<p><em>-有多种方式来描述多个JavaScript库和类之间如何交互。你知道exports和require不？你可以写多个定义AMD或者COmmonJS API的JavaScript文件，然后使用像Browserify一样的东西来打包。</em></p>
<p>好吧，听起来好像很有道理的样子。那Browserify是什么呢？</p>
<p><em>-它是一个工具，允许你将符合CommonJS的依赖打包成可以运行在浏览器中的文件，它之所以会诞生，是因为大多数开发者都把依赖放到npm仓库中。</em></p>
<p>npm仓库？</p>
<p><em>-它是一个庞大的公共仓库，开发者把代码和依赖作为模块放到这里。</em></p>
<p>就像CDN一样？</p>
<p><em>-不太准确。它更像是一个集中式的数据库，在这里任何人都可以发布、下载仓库，你可以用来本地开发，如果你想的话也可以把它们上传到CDN上。</em></p>
<p>哦，就像Bower一样！哈哈，终于遇到我会的了~~</p>
<p><em>-恩，是的，但是现在可都是2016年了，已经木有人使用Bower了。</em></p>
<p>哦，我懂了。。。所以我需要从npm上面下载那些库咯？</p>
<p><em>-恩，是的。举个栗子，如果你要使用React，你就下载React模块，然后把它导入到你的代码中。几乎每一个流行的JavaScript库都可以这样做。</em></p>
<p>哦，就像Angular一样！</p>
<p><em>-Angular已经是2015年的了。但是，你说的挺对的。Angular依旧坚挺着，但是并肩的还有VueJS、RxJS和其他炫酷十足的库。你想学不？</em></p>
<p>我们还是接着用React吧，我现在已经学了太多的东西了。所以，如果我要用React的话，我就得用npm安装React，然后使用 Browserify ？</p>
<p><em>-恩，是的。</em></p>
<p>获取一堆依赖，然后把它们打包，这貌似有点复杂啊。</p>
<p><em>-是的，这就是我们为什么使用Grunt、GUlp或者Broccoli来自动化运行Browserify的原因。哦，见鬼，你现在甚至可以用Mimosa了。</em></p>
<p>Grunt？Gulp？Broccoli？Mimosa？我们到底在讨论什么鬼东西？</p>
<p><em>-任务管理器呀。但是它们已经不像之前那么炫酷了。我们在2015年使用那些东西，然后我们使用Makefiles，但是现在我们用Webpack来打包所有东西。</em></p>
<p>Makefiles？我以为那只用在C或C++项目里。</p>
<p><em>-是的，但是在web开发中，我们喜欢先把事情搞复杂，然后再回归本源。我们每年都是这么做的，你就等着吧，一年或者两年内我们都能在web里写汇编了。</em></p>
<p>哎，你刚说到了什么Webpack东东？</p>
<p><em>-它是另一个浏览器模块管理器，也是一个任务管理器。它就像一个更牛的Browserify。</em></p>
<p>哦，好吧，那它牛在哪里呢？</p>
<p><em>-恩，也许不是很牛，他只是告诉你如何更好的绑定你的依赖。Webpack允许你使用不同的模块管理器，不仅仅是CommonJS，ES6支持的模块都可以。</em></p>
<p>我都已经完全被CommonJS/ES6搞糊涂了。</p>
<p><em>-大家都被搞糊涂了，但是伴随着SystemJS，那些东西你都不用关心了。</em></p>
<p>Word天呐，又一个什么JS。SystemJS又是什么？</p>
<p><em>-恩，不像Browserify和Webpack 1.x版本，SystemJS是一个动态模块加载器，它允许你把多个模块打包成多个文件，而不是打包成一个文件。</em></p>
<p>等会儿，我原以为我们要把我们的库打包成一个大文件，然后加载就行了！</p>
<p><em>-是的，但是因为HTTP/2马上就要来了，多个HTTP请求其实更好。</em></p>
<p>等会儿，所以为了使用React我们不能仅仅添加三个库？</p>
<p><em>-是的。我是说，你可以把它们当做脚本从CDN引进来，但是你依然需要引入Babel。</em></p>
<p>哎，这样就行了吗？</p>
<p><em>-是的，你需要引入整个babel-core，而且不应该用于生产环境。发布到生产环境之前，你需要运行一些任务来确保你的项目一切正常，就像把召唤撒旦的仪式整成一个煎蛋配方一样。你需要压缩、混淆、样式内联、延迟加载脚本。</em></p>
<p>我懂了，我懂了。如果我不能直接从CDN中引入这些库，那我该这么做？</p>
<p><em>-我会使用使用Webpack、SystemJS和Babel来转义Typescript。</em></p>
<p>Typescript？我原以为我们是用JavaScript在码代码！</p>
<p><em>-Typescript也是JavaScript，或者更好的一种说法是，Typescript是JavaScript的超集，是基于ES6的更屌的JavaScript。你还记得吧，就是我们刚才讲到的第六版。</em></p>
<p>我以为ES2016+已经是ES6的一个超集了！为什么我们现在使用的这个东东叫Typescript？</p>
<p><em>-哦，因为它允许我们像使用类型化语言一样使用JavaScript，并且能够减少运行时错误。2016年了，你应该在你的JavaScript代码中增加些类型。</em></p>
<p>Typescript很明显做到了这些。</p>
<p><em>-Flow也做到了这些，尽管它只是做输入检测，而作为JavaScript的超集，它需要编译。</em></p>
<p>额，Flow是。。。？</p>
<p><em>-它是一个静态类型检查器，也是Facebook出品的。它是用OCaml写的，因为函数式编程炫酷得不要不要的。</em></p>
<p>OCaml？函数式编程？</p>
<p>_-年轻人，现在牛逼的程序员都会用的，你要知道，现在可是2016年了。函数式编程？高阶函数？柯里化？纯函数？</p>
<p>我不知道你在说啥。</p>
<p><em>-刚开始谁都会这样的。你只要知道函数式编程比面向对象编程（OOP）更屌就行了，2016年我们就都应该用函数式编程。</em></p>
<p>等下，我在大学学过面向对象编程，我觉得挺好啊。</p>
<p><em>-Java在被Oracle买下之前也挺不错的啊。我的意思是说，面向对象编程在过去是挺好，并且在现在也仍然有它的用武之地，但是现在大家正意识到修改状态是很难的，所以现在大家都趋向于使用不可变对象和函数式编程。haskell那伙人已经整了好多年了，-就不说Eml那帮人了-但是幸运的是，在web开发中我们可以使用像Ramda这样的库来实现纯JavaScript进行函数式编程了。</em></p>
<p>为了讨论方便，你刚才是不是又提到了几个名词？Ramnda是个什么东西？</p>
<p><em>-不是Ramnda。就像Lambda。你不知道吗，David Chambers的那个库？</em></p>
<p>David谁？</p>
<p><em>-David Chambers。一个很酷的家伙，想要彻底颠覆 JavaScript 编程方式。Ramda的贡献者之一。如果你想学习函数式编程的话，你应该了解下Erik Meijer。</em></p>
<p>Erik Meijer是何方神圣？</p>
<p><em>-也是函数式编程一哥们儿，很牛。他在一堆演讲里面批评了Agile。你也应该看看下面这些人的东西：Tj，Jash Kenas，Sindre Sorhus，Paul Irish，Addy Osmani。-</em></p>
<p>好吧。现在我必须打断你了。所有这一切都很好，但是我只是要获取数据并展现出来，这些东西一下子就搞复杂了，而且是不必要的。我很确定，我没有必要为了创建一个动态数据表格而去了解这些人，或者学习这些东西。让我回到React。我怎么才能用React从服务器获取数据呢？</p>
<p><em>-是这样的，你不能用React来获取数据，你只能用React来展示数据。</em></p>
<p>我了个去。那你用什么来获取数据？</p>
<p><em>-你可以使用Fetch从服务器上fetch(获取)数据。</em></p>
<p>啥？你用Fetch来fetch(获取)数据？起名儿的这位是不是没上学啊。</p>
<p><em>-恩，我也知道。Fetch是服务器完成XHR请求的本地实现。</em></p>
<p>哦，那就是AJAX。</p>
<p><em>-AJAX只是使用XHR。但是Fetch允许你使用promise来实现ajax请求，这样的话你就可以摆脱回调地狱了。</em></p>
<p>回调地狱是什么毛线？</p>
<p><em>-是这样的。每次你完成一个异步请求，你就需要等待服务器的响应，这样的话你就会在一个函数里面增加一个函数，这就叫做回调金字塔，也就是回调地狱。</em></p>
<p>哦，好吧。Promise可以解决这个问题？</p>
<p><em>-必须的。通过promise来写回调，你可以写出更优雅更容易理解的代码，你可以去模拟数据并测试代码，你也可以同时发起多个请求并等待它们全部加载完成。</em></p>
<p>这些都可以用Fetch来实现？</p>
<p><em>-是的，但是前提是用户使用了完全兼容的常青浏览器(evergreen browser)，否则你需要引入一个Fetch polyfill或者使用Request、Bluebird或Axios。</em></p>
<p>我需要知道多少个库？到底有多少个库啊？</p>
<p><em>-这就是JavaScript。有成千上万个库可以实现同样的事情。实际上，我们知道js库，我们也拥有最好的js库。我们的库很庞大，有时候我们也会引入Guy Fieri的字符画。</em></p>
<p>你刚刚说到了Guy Fieri？我们不说他了。Bluebird、Request和Axios库是用来干什么？</p>
<p><em>-这些库用来操作XHR，然后返回promise。</em></p>
<p>jQuery的AJAX方法也可以返回promise了吧？</p>
<p><em>-2016年我们不再使用jQuery了。就用Fetch，如果浏览器没有的话就添加个polyfill，或者用Bluebird、Request、Axios代替都可以。然后在async函数里使用await来管理promise，这样你就可以很好的控制整个流了。</em></p>
<p>这是你第三次提到await了，但是我还不知道它是个啥。</p>
<p><em>-Await允许你拦截一个异步回调，这样当获取到数据的时候你就可以更好的去控制，并且代码也会具有更好的可读性。这很酷，而你只需要在Babel里设置stage-3配置，或者使用syntax-async-functions插件和transform-async-to-generator插件。</em></p>
<p>疯了吧。</p>
<p><em>-没有，我来告诉你什么才是疯：想用await你需要先预编译Typescript代码，然后用Babel来转义。</em></p>
<p>啥？Typescript不包含await？</p>
<p><em>-下个版本就会包含了，但是1.7版本只是针对ES6，所以如果你想在浏览器里使用await，首先你需要把Typescript代码预编译成ES6，然后再用Babel转义成ES5。</em></p>
<p>现在我已经无语了。</p>
<p><em>-其实很简单的。用Typescript来写代码。所有使用Fetch的模块编译成ES6，然后设置Babel的stage-3的配置，再用SystemJS来加载。如果你没有Fetch，就添加个polyfill，或者使用Bluebird、Request、Axios，使用await来处理所有的promise。</em></p>
<p>我们对于简单的定义不一样。好了，有了那个东东我最终获取了数据，现在我可以用React来展示数据了吧？</p>
<p><em>-你的应用需要处理状态变化吗？</em></p>
<p>额，不需要吧。我只是要展示数据。</p>
<p><em>-哦，谢天谢地。否则我就必须向你解释Flux了，还有它的实现，比如Flummox、Alt、Fluxible。不过说实话，你应该使用Redux。</em></p>
<p>我们就略过这些名字吧。我就只是想展示数据而已。</p>
<p><em>-哦，如果你只是要展示数据，那么一开始就不需要React。用模板引擎就可以了。</em></p>
<p>你玩儿我呢？你以为这样玩儿很爽？你就是这样对待你的所爱？</p>
<p><em>-我只是在解释你可以用哪些东西。</em></p>
<p>停，可别说了。</p>
<p><em>-我的意思是，如果我是你的话，尽管是使用模板引擎，但我仍然会使用Typescript + SystemJS + Babel组合。</em></p>
<p>我需要在页面上展示数据，不是在玩儿真人快打。你就告诉我应该用哪个模板引擎，我直接用就行了。</p>
<p><em>-有很多模板引擎的，你熟悉哪个呢？</em></p>
<p>额，我想不起来名字了，过去很长时间了。</p>
<p><em>-jTemplates？jQote？PURE？</em></p>
<p>额，不记得。还有其他的吗？</p>
<p><em>-Transparency？JSRender？MarkupJS？KnockoutJS？这个有双向绑定。</em></p>
<p>还有其他的吗？</p>
<p><em>-PlatesJS？jQuery-tmpl？Handlebars？一些人仍然在使用它。</em></p>
<p>可能是吧。有和最后一个相似的吗？</p>
<p><em>-Mustache？underscore？我认为Lodash都有模板引擎了，但是那些都是2014年的了。</em></p>
<p>额，有新一点儿的吗？</p>
<p><em>-Jade？DustJS？</em></p>
<p>不是。</p>
<p><em>-DotJS？EJS？</em></p>
<p>不是。</p>
<p><em>-Nunjucks？ECT？</em></p>
<p>不是。</p>
<p><em>-恩，已经没人喜欢Coffeescript语法了。Jade？</em></p>
<p>不是，你已经说过Jade了。</p>
<p><em>-我是说Pug。我我的意思是说Jade。我的意思是，Jade现在的名字是Pug。</em></p>
<p>哎，不是。我想不起来了。你用哪个？</p>
<p><em>-我可能只用ES6原生模板字符串。</em></p>
<p>让我猜下。这个需要ES6。</p>
<p><em>-是的。</em></p>
<p>为了适应不同的浏览器，得使用Babel转义。</p>
<p><em>-是的。</em></p>
<p>如果我不想添加整个核心库，我需要使用npm来作为模块加载。</p>
<p><em>-是的。</em></p>
<p>需要Browserify或者Wepback，或者类似SystemJS的东西。</p>
<p><em>-是的。</em></p>
<p>如果不用Webpack，最好使用一个任务管理器。</p>
<p><em>-是的。</em></p>
<p>但是，因为我应该使用函数式编程和类型化语言，所以我需要预编译Typescript或者添加一个Flow。</p>
<p><em>-是的。</em></p>
<p>然后，如果我想使用await的话，还必须使用Babel。</p>
<p><em>-是的。</em></p>
<p>这样我就可以使用Fetch、promise、控制流和各种吊炸天的东西。</p>
<p><em>-别忘了，如果不支持Fetch的话，给Fetch添加一个polyfill，Sarafi就不支持。</em></p>
<p>行了，我觉得我们就说到这吧。实际上，我觉得我也就这样了，我是做不了web开发了，我是写不了JavaScript了。</p>
<p><em>-没事，再过几年，我们会用Elm或者WebAssembly来写代码。</em></p>
<p>我想回去做后端。我受不了这么多的变化、版本、编译器和转义工具。JavaScript社区如果认为有人能跟上这种节奏，那这社区一定是疯了。</p>
<p><em>-我明白了。你应该去Python社区。</em></p>
<p>为什么？</p>
<p><em>-听说过Python3吗？</em></p>
<p><em>更新：感谢指出排版和其他错误，我会持续更新这篇文章。讨论区请移步</em> <a href="https://news.ycombinator.com/item?id=12628921" target="_blank" rel="external"><em>HackerNews</em></a> <em>和</em> <a href="https://www.reddit.com/r/programming/comments/55okik/how_it_feels_to_learn_javascript_in_2016_xpost/" target="_blank" rel="external"><em>Reddit</em></a><em>。</em></p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@myvin" target="_blank" rel="external">myvin</a><br>链接：<a href="http://www.zcfy.cc/article/1871" target="_blank" rel="external">http://www.zcfy.cc/article/1871</a><br>原文：<a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.cmul9wb9g" target="_blank" rel="external">https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.cmul9wb9g</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[为什么你需要成为一个全栈开发工程师？]]></title>
      <url>http://jsgrblog.win/2016/12/11/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E9%9C%80%E8%A6%81%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>最近几年，我们开始给开发者划分两种不同的职业路径：<strong>前端</strong>和<strong>后端</strong>。但是我们总是忘记了第三种选择：<strong>全栈</strong></p>
<p>全栈开发已经被提出有一段时间了，它曾经被直接叫做“开发”。<br><a id="more"></a><br>但是由于开发工作的复杂性持续增长，我们的UI（用户界面）需要从其背后的逻辑中解耦出来。于是，现在，我们也就有了两个不同的领域，前端和后端。</p>
<p>让我们探索全栈开发，看看当考虑到各方面与之关联的挑战时，沿着这样一条路径走下去，是不是行得通。</p>
<p>我在一家名叫<a href="http://fortech.ro/" target="_blank" rel="external">Fortech</a> 的公司担任全栈开发工程师，我工作的一大部分是来领导一支全栈开发工程师团队。</p>
<p>在我们的团队里，如果需要的话，每个人都能够在前端和后端之间切换，我们团队的文化也基于此。</p>
<h3 id="但是什么是全栈呢？"><a href="#但是什么是全栈呢？" class="headerlink" title="但是什么是全栈呢？"></a>但是什么是全栈呢？</h3><p>全栈不特指网页开发，或者任何其他形式的开发工作。</p>
<p>全栈意味着你能够献身于一个系统的每一个层面。无论这个子系统被分割地怎样支离破碎，你都能够看到更广阔的图景。</p>
<p>今天，你可能在做一个酷炸天的下拉菜单组件。到了明天，你可能要做一个适应这个下拉菜单的接口出来，可是到了后天，你可能又要不得不潜入到数据库中，来提高你的接口获取数据的能力。</p>
<p>在技术分享会上，我和很多人都探讨过全栈开发，我注意到越来越多的开发者对全栈开发持怀疑态度。</p>
<p>反对全栈开发的人说，为了能够在各方面都有所涉猎，你首先需要在一个特定的子领域成为专家。</p>
<p>我不同意他们的观点。</p>
<p>我认为技术是以一种让我们更加易于开发的方式来进化的，只要我们首先能够掌握一整套正确的技术栈。</p>
<h3 id="对怀疑者的一些回答"><a href="#对怀疑者的一些回答" class="headerlink" title="对怀疑者的一些回答"></a>对怀疑者的一些回答</h3><p>前面，我已经解释了为什么我认为全栈开发是一条可选择的道路，至少还是一条很不错的道路。</p>
<h3 id="问题-1-一支全栈开发的团队有哪些优势？"><a href="#问题-1-一支全栈开发的团队有哪些优势？" class="headerlink" title="问题 #1: 一支全栈开发的团队有哪些优势？"></a>问题 #1: 一支全栈开发的团队有哪些优势？</h3><p>作为一个全栈开发者，你可以很容易地从你的应用程序的一部分跳到另外一部分，当设计新的功能时，这会是巨大的优势。</p>
<p>当你能够明白一个功能背后的业务需求然后据此着手工作时，全栈开发真正的价值才得以提升。</p>
<p>有一支多面手的团队也意味着，当新的机遇出现的时候，你能够快速地分配任务。</p>
<p>有一支多面手的团队也意味着，开发者们在一起工作的时间越长，在你的团队内部产生的化学反应越良好。即使一个项目是从构建一个API接口开始的，然后逐渐拓展到移动端和网页端，这群人也能够一起完成整个过程。</p>
<h3 id="问题-2-我怎么抽时间来一直跟上这么多技术和框架的脚步？"><a href="#问题-2-我怎么抽时间来一直跟上这么多技术和框架的脚步？" class="headerlink" title="问题 #2 :我怎么抽时间来一直跟上这么多技术和框架的脚步？"></a>问题 #2 :我怎么抽时间来一直跟上这么多技术和框架的脚步？</h3><p>我认为即便只是跟上前端或者后端开发潮流都是不可能的。所以让我们暂时放下追逐潮流，专注于当前你能够做到的。</p>
<p>任何一个好的全栈开发工程师都从掌握一整套的开发技术做起。你应该能够完成这些基本的任务：写一个cookie，连接到一个REST接口(REST endpoint)，完成一个数据库序列，等等。</p>
<p>随着时间的推移，你能够在这些技术之上，通过添加一些新的工具和逻辑，来构建起一个完整的项目。</p>
<p><strong>追逐技术潮流并不是你表现出色的标志，真正地能看出你水平的是：你有能力在需要一项技术的时候快速跟进，学习它，应用它。</strong></p>
<h3 id="问题-3：是否一个全栈开发工程师需要将他们的工作平均分到前端和后端"><a href="#问题-3：是否一个全栈开发工程师需要将他们的工作平均分到前端和后端" class="headerlink" title="问题 #3：是否一个全栈开发工程师需要将他们的工作平均分到前端和后端"></a>问题 #3：是否一个全栈开发工程师需要将他们的工作平均分到前端和后端</h3><p>不。你需要根据你的项目需求来进行划分。这都是要有语境的，要具体问题，具体分析。</p>
<p>你需要能够在一个项目的任何时间点接入到这个项目的任何一个部分，这在今天这个敏捷开发时代尤为重要。</p>
<h3 id="问题-4-有选择地偏好一种类型的开发工作可以吗？"><a href="#问题-4-有选择地偏好一种类型的开发工作可以吗？" class="headerlink" title="问题 #4: 有选择地偏好一种类型的开发工作可以吗？"></a>问题 #4: 有选择地偏好一种类型的开发工作可以吗？</h3><p>当然没问题。大多数人都会有所侧重。</p>
<p>有些时候，你会专注于系统中的某一部分，并且需要掌握它的生态，但是不要对该系统的其他部分完全视而不见。</p>
<p>我认为这关乎个人的选择，并不是其他人强加的。有些人就很享受前端开发的工作，那么他就做得越来越好，与此相应的，有些人就热爱后端开发。</p>
<p>就像是学习怎样使用<a href="https://en.wikipedia.org/wiki/The_Force_%28Star_Wars%29" target="_blank" rel="external">「原力」(the Force)</a>,你首先要学会怎样光剑(lightsaber)的启动和停止。当你已经熟练了这些操作之后，你再决定是学习 <a href="https://www.youtube.com/watch?v=GO_xfR64qSk" target="_blank" rel="external">意念控制</a>还是  <a href="https://www.youtube.com/watch?v=Zzs-OvfG8tE" target="_blank" rel="external">迫使别人窒息</a>.</p>
<p><img src="http://p0.qhimg.com/t013a4f0cd68ed92d96.gif" alt=""> </p>
<p>作为一个软件工程师，这正是与星球大战的相似之处。</p>
<h3 id="但是不要停在代码上"><a href="#但是不要停在代码上" class="headerlink" title="但是不要停在代码上"></a>但是不要停在代码上</h3><p>我们往往将我们的技术实体化，就是我们工作中用到的编程语言或者我们用过的编程工具。</p>
<p>但是一个更好的方式来思考技术，是从全栈的角度来看待，是将你能够承担的责任进行评估，是把这种评估作为你工作的一部分。</p>
<p>你能够完成基本的UI(用户界面)开发任务，架构设置，数据分析吗？你能够参与到产品本身的开发流程当中吗？</p>
<p>我的团队和我们的客户密切配合。我们发现我们的开发者们投入到业务流程之中是非常有用的，一旦开发者们明白了客户的问题所在，他们就开始跃跃欲试想要解决客户们的问题了。</p>
<p>这个时候，每一个人都能够为一个已知的问题提供一个解决方案，不会出现一个特定的问题只能找特定的人去解决。</p>
<p>我并不是说我们的整个团队都是开发者才行，而是说要赋予开发者们更多的责任，而不是只让他们负责编写代码，这样一来，他们能够在这样一个灵活的环境下受益更多。</p>
<p>这样也能够有助于我们将思维方式从单纯地想要解决问题过渡到专注于问题本身。你从一开始就认识到了问题的本质所在，而不只是它的表现特征，那么你就也能够据此设计出最优的方案来解决问题了。</p>
<h3 id="最后一点说明"><a href="#最后一点说明" class="headerlink" title="最后一点说明"></a>最后一点说明</h3><p>全栈开发意味着跳出你的舒适区，为了产品的成功接受挑战。</p>
<p>肯定有很多好的论点反对全栈开发文化，但是我希望这篇文章已经反驳了其中那些毫无说服力的观点。</p>
<p>实现全栈并不总是最好的策略。许多产品大到任何一个个人都不能完全理解。比如，谷歌的代码库里面有20亿行代码。在这个层面上，有所专攻是必要的。</p>
<p>全栈开发应该是处理问题的方法，而不是一种死板的思维方式。</p>
<p>你如何看待未来的全栈开发？在下面评论中留下你的观点吧。</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@zhangolve" target="_blank" rel="external">zhangolve</a><br>链接：<a href="http://www.zcfy.cc/article/1878" target="_blank" rel="external">http://www.zcfy.cc/article/1878</a><br>原文：<a href="https://medium.freecodecamp.com/full-stack-between-reality-and-wishful-thinking-43110005f2a2#.vmvlzet2z" target="_blank" rel="external">https://medium.freecodecamp.com/full-stack-between-reality-and-wishful-thinking-43110005f2a2#.vmvlzet2z</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery3.1.0发布–不再隐藏错误]]></title>
      <url>http://jsgrblog.win/2016/12/11/jQuery3-1-0%E5%8F%91%E5%B8%83%E2%80%93%E4%B8%8D%E5%86%8D%E9%9A%90%E8%97%8F%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<p>不久之前, 我们发布了 jQuery 3.0. jQuery 3.0 适当重写了jQuery的Deferred. 使它兼容了Promises/A+ 设计规范. 通过使用<code>deferred.catch()</code>，错误不会隐藏掉，而会传递给rejection handler(错误处理程序).这有利于防止运行时错误导致Promise的handler阻塞, 但是缺点是如果你没写rejection handler，错误将会被隐藏（silenced）.  我们也在幕后修改了 <code>jQuery.ready</code> 和 <code>jQuery.fn.ready</code> 来使用新的符合规范的 Deferreds.<br><a id="more"></a><br>遗憾的是，如果你使用常规方法初始化ready handlers（比如 <code>jQuery(function() {})</code> 或者 <code>jQuery(document).ready(function() {})</code>), 你将没有办法添加rejection handler. 特别是你在Deferred里面表现的不明显. 任何运行时错误都会被隐藏和丢失. <a href="http://blog.bugsnag.com/a-warning-about-jquery-3" target="_blank" rel="external">workarounds</a>里面有一些额外的解决方案, 但显然我们不能允许接受这种解决方案.</p>
<p>我们立刻发布了jQuery3.1.0并修复了它，错误将不会在隐藏了! 默认情况下你将会在控制台里看到这些错误信息. 如果你希望自定义处理这些错误，我们也提供了<a href="http://api.jquery.com/jquery.readyexception/" target="_blank" rel="external"><code>jQuery.readyException</code></a>. 如果你使用了它，那在ready handler里所有的错误都将会抛给它处理.大多数情况下，你并不需要使用它.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">jQuery.readyException = function(error) &#123;</div><div class="line">  // &quot;error&quot; is thrown from any ready handler</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>默认的 <code>jQuery.readyException</code> 将会再次抛出一个异步异常来避免程序停止执行，并打印错误信息到控制台. 我们希望这次jQuery 3.1.0 的更新能解决所有你在使用jQuery 3.0时遇到的调试问题.</p>
<p>我们并不认为这次jQuery3.1.0的发布有什么重大改动, 但是在这次升级中如果遇到了任何bug，<a href="https://github.com/jquery/jquery/issues" target="_blank" rel="external">请告诉我们</a>.</p>
<p>如果你想知道如何从jQuery1.x或2.x升级到3.0，请参考<a href="http://jquery.com/upgrade-guide/3.0/" target="_blank" rel="external">3.0 Upgrade Guide</a>和<a href="http://blog.jquery.com/2016/05/19/jquery-migrate-1-4-1-released-and-the-path-to-jquery-3-0/" target="_blank" rel="external">jQuery Migrate 1.4.1 blog post</a>.</p>
<p><strong>3.1.0</strong> – <a href="https://github.com/jquery/jquery/compare/3.0.0...3.1.0" target="_blank" rel="external">GitHub changelog</a></p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>你可以直接引用下面的CDN链接或者直接拷贝文件到你本地服务器。</p>
<p><a href="https://code.jquery.com/jquery-3.1.0.js" target="_blank" rel="external">https://code.jquery.com/jquery-3.1.0.js</a><br><a href="https://code.jquery.com/jquery-3.1.0.min.js" target="_blank" rel="external">https://code.jquery.com/jquery-3.1.0.min.js</a></p>
<h3 id="更小巧的jQuery版本"><a href="#更小巧的jQuery版本" class="headerlink" title="更小巧的jQuery版本"></a>更小巧的jQuery版本</h3><p>如果你不想使用jQuery的ajax（比如引用了其它单独ajax类库），或者只打算用简单css构建你web系统的特效，你可以下载相对于常规版本的精简（slim）版本. 总体来说，精简版本不包含ajax，特效，以及当前不推荐使用的代码. 对于现在互联网系统，jQuery文件的大小很少会有人关心，但是精简版的6KB压缩版本相对于常规版的23.6~30KB缩减了很多，依然很有魅力。精简版文件可以通过npm package 或下面链接中的CDN来获取安装</p>
<p><a href="https://code.jquery.com/jquery-3.1.0.slim.js" target="_blank" rel="external">https://code.jquery.com/jquery-3.1.0.slim.js</a><br><a href="https://code.jquery.com/jquery-3.1.0.slim.min.js" target="_blank" rel="external">https://code.jquery.com/jquery-3.1.0.slim.min.js</a></p>
<p>当前版本的更新在npm和Bower上都可以获取到.所有获取jQuery的方式可以在<a href="https://jquery.com/download/" target="_blank" rel="external">https://jquery.com/download/</a> 上找到. 公共的CDN服务商今天才收到最新文件，请耐心等待几天. 如果你迫不及待的想开始使用，请直接关注jQuery官网的CDN。</p>
<p>非常感谢那些参与测试，提交bug，提交补丁的所有人，包括 <a href="https://github.com/markelog" target="_blank" rel="external">Oleg Gaidarenko</a>, <a href="https://github.com/mgol" target="_blank" rel="external">Michał Gołębiowski</a>,以及所有jQuery团队成员.</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@zywzyw12" target="_blank" rel="external">Akashi</a><br>链接：<a href="http://www.zcfy.cc/article/931" target="_blank" rel="external">http://www.zcfy.cc/article/931</a><br>原文：<a href="http://blog.jquery.com/2016/07/07/jquery-3-1-0-released-no-more-silent-errors/" target="_blank" rel="external">http://blog.jquery.com/2016/07/07/jquery-3-1-0-released-no-more-silent-errors/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery3.0的新特性]]></title>
      <url>http://jsgrblog.win/2016/12/11/jQuery3-0%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<p><a href="http://jquery.com/" target="_blank" rel="external">jQuery</a> 称霸互联网世界已有十个年头了，它能一直坚守不是没有理由的。经过很长一段时间，jQuery在上个月发布了新版本：jQuery 3.0和jQuery Compat 3.0（兼容版本）。该版本更轻量、更快速，考虑了向后兼容。获得最新访问版请访问：<a href="http://jquery.com/download/" target="_blank" rel="external">jQuery下载页</a>。你也可以看看<a href="http://jquery.com/upgrade-guide/3.0/" target="_blank" rel="external">升级文档</a>和 <a href="https://code.jquery.com/jquery-3.0.0.js" target="_blank" rel="external">源码</a>。</p>
<p>本文重点讲述jQuery 3.0中几点最新的重要变化及如何使用它们。<br><a id="more"></a></p>
<h4 id="1-jQuery-3-0-运行在严格模式下"><a href="#1-jQuery-3-0-运行在严格模式下" class="headerlink" title="1. jQuery 3.0 运行在严格模式下"></a>1. jQuery 3.0 运行在严格模式下</h4><p>当下几乎支持jQuery 3.0的浏览器都支持<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="external">严格模式</a>，该版本正是基于此进行编译发布的。</p>
<p><img src="http://p4.qhimg.com/t01ffb6638113289cf0.png" alt="jquery-strict"></p>
<p>你的代码已经运行在非严格模式？不用担心，你无需重写。jQuery 3虽为严格模式，但并不强制在严格模式下运行你的代码。严格模式和非严格模式会愉快的共存~</p>
<h4 id="2-For…of-循环"><a href="#2-For…of-循环" class="headerlink" title="2. For…of 循环"></a>2. For…of 循环</h4><p>jQuery 3.0 支持 ‘for…of’ 表达式，一种新型的for循环。这个新的迭代是<a href="http://es6-features.org/" target="_blank" rel="external">ECMAScript 6</a>的一部分。它给出一种更直接的遍历对象（如Arrays，Maps，和Sets）的方式。在jQuery 3.0中，<code>for...of</code>将替换<code>$.each(...)</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var items = $(&apos;.random-class&apos;);  </div><div class="line">// old jQuery way </div><div class="line">$.each(items,  function(index, value)  &#123;  </div><div class="line">	// do something  </div><div class="line">&#125;);  </div><div class="line">// ES6 way  </div><div class="line">for(let item of items)  &#123;  </div><div class="line">	// do something  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><em>说明：<code>for...of</code>仅用于支持ES6的浏览器，或者你使用了JS编译器，比如<a href="https://babeljs.io/" target="_blank" rel="external">Babel</a>。</em></p>
<h4 id="3-动画接口：requestAnimationFrame"><a href="#3-动画接口：requestAnimationFrame" class="headerlink" title="3. 动画接口：requestAnimationFrame( )"></a>3. 动画接口：requestAnimationFrame( )</h4><p>jQuery 3.0 使用<code>requestAnimationFrame()</code> 处理动画。它使动画运行起来更流畅、迅速，减少CPU密集型动画。但仅用于<a href="http://caniuse.com/#feat=requestanimationframe" target="_blank" rel="external">支持</a> 它的浏览器。对于老的浏览器（如IE9），它会使用之前的API。更多 <strong>RequestAnimationFrame</strong>的内容可以查询<a href="https://css-tricks.com/using-requestanimationframe/" target="_blank" rel="external">这里</a>。</p>
<p><img src="http://p3.qhimg.com/t01b8c6185e6954f921.png" alt="requestanimationframe-support"></p>
<h4 id="4-escapeSelector-转义包含特殊意义的字符串"><a href="#4-escapeSelector-转义包含特殊意义的字符串" class="headerlink" title="4. escapeSelector( ) 转义包含特殊意义的字符串"></a>4. escapeSelector( ) 转义包含特殊意义的字符串</h4><p><code>$.escapeSelector()</code>这个新方法将转义CSS选择器中有特殊意义的字符或字符串。它适用于CSS中含有表意特殊的字符的类名或ID，如’.’或者’:’。这种情况不常发生，不过一旦遇上，就可以轻松解决掉了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//consider this is your element  </div><div class="line">&lt;div id=&quot;abc.def&quot;&gt;&lt;/div&gt;  </div><div class="line">//above element can&apos;t be selected like this because the selector is parsed as &quot;an element with id &apos;abc&apos; that also has a class &apos;def&apos;. </div><div class="line">$(&apos;#abc.def&apos;)  </div><div class="line">//with jQuery 3.0 it can be selected like this </div><div class="line">$(  &apos;#&apos;  + $.escapeSelector(  &apos;abc.def&apos;  )  )</div></pre></td></tr></table></figure>
<h4 id="5-对XSS攻击的附加防护"><a href="#5-对XSS攻击的附加防护" class="headerlink" title="5. 对XSS攻击的附加防护"></a>5. 对XSS攻击的附加防护</h4><p>jQuery 3.0添加了额外安全层，用来防止 <a href="https://www.owasp.org/index.php/Cross-site_Scripting_(XSS" target="_blank" rel="external">(XSS)</a>)攻击。使用时需要在 <code>$.ajax()</code> 和 <code>$.get()</code>方法中指定<code>dataType: &#39;script&#39;</code>。即，当请求跨域脚本时，必须要声明这一点。</p>
<blockquote>
<p><em>Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses input from a user within the output it generates without validating or encoding it.</em></p>
<p><em>XSS攻击是一类注入攻击，其中恶意脚本注入受信任站点。XSS攻击发生在攻击者使用web应用发送一段恶意代码（一般使用浏览器端脚本形式），给另一个不同的终端用户。web应用一旦使用了没有经过验证或编码的输入就会有问题。</em></p>
</blockquote>
<h4 id="6-删除-ajax-中的特殊延迟方法"><a href="#6-删除-ajax-中的特殊延迟方法" class="headerlink" title="6. 删除.ajax()中的特殊延迟方法"></a>6. 删除.ajax()中的特殊延迟方法</h4><p>$.ajax()返回的<code>jqXHR</code>对象是一种 <code>Deferred</code>。先前，它有三种附加方法对应着参数对象<code>success</code>, <code>error</code> 和 <code>complete</code>。jQuery 3.0 删除了这些方法。现在可以使用 <code>Deferred</code>的标准方法<code>done</code>, <code>fail</code>和 <code>always</code>，或者使用新的 <code>then</code> 和 <code>catch</code>方法。</p>
<h4 id="7-get-和-post-的新签名"><a href="#7-get-和-post-的新签名" class="headerlink" title="7. .get() 和 .post()的新签名"></a>7. .get() 和 .post()的新签名</h4><p>jQuery 3.0 为$.get() 和 $.post() 增添了新签名<code>settings</code>。增加<code>settings</code>参数，从而与$.ajax()的接口风格一致。<code>settings</code>是一个对象，包含很多属性，与提供给$.ajax()的参数格式一致。唯一不同是传相同的<code>settings</code>给$.get()和$.post()，<code>method</code>属性经常被忽略，而传给$.ajax()不会。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//HTTP Get </div><div class="line">$.get([settings])  </div><div class="line"></div><div class="line">//HTTP Post </div><div class="line">$.post([settings])</div></pre></td></tr></table></figure>
<h4 id="8-支持SVG的类操作方法"><a href="#8-支持SVG的类操作方法" class="headerlink" title="8. 支持SVG的类操作方法"></a>8. 支持SVG的类操作方法</h4><p>从jQuery 3.0起， 开始完全支持SVG。jQuery操作CSS类名的方法，如<code>.addClass()</code> 和 <code>.hasClass()</code> 也可以用来支持SVG了。这意味着可以用jQuery在SVG里查找类，并且指定样式。</p>
<h4 id="9-简易的Show-Hide-逻辑"><a href="#9-简易的Show-Hide-逻辑" class="headerlink" title="9. 简易的Show/Hide 逻辑"></a>9. 简易的Show/Hide 逻辑</h4><p>the <code>.show()</code>,<code>.hide()</code> and <code>.toggle()</code> methods will focus on inline styles rather than computed styles. The docs asserts that the most important result will be:</p>
<p>这是一项重要的变化，需要铭记于心。。从现在开始，这些方法<code>.show()</code>,<code>.hide()</code> 和 <code>.toggle()</code>将只为inline styles服务，不再为computed styles效力了。文档声明最重要的结果将是：</p>
<blockquote>
<p><em>As a result, disconnected elements are no longer considered hidden unless they have inline display: none;, and therefore .toggle() will no longer differentiate them from connected elements as of jQuery 3.0.</em></p>
<p><em>因此，未关联元素不再被考虑hidden，除非它们有inline display: none; .toggle() 不再区分关联和未关联元素。。</em></p>
</blockquote>
<p>如果想更好的理解新的show/hide，可参看jQuery团队的这张 <a href="https://docs.google.com/spreadsheets/d/1UaISjcS3UMxVJ7eSBIXtK-jqF8Grl67w640peCqlkoc/edit" target="_blank" rel="external">表</a>，或阅读这篇关于它的有趣的 <a href="https://github.com/jquery/jquery/issues/2854" target="_blank" rel="external">Github discussion</a> 。</p>
<h4 id="10-width-和-height-支持小数"><a href="#10-width-和-height-支持小数" class="headerlink" title="10. .width ( ) 和 .height ( )支持小数"></a>10. .width ( ) 和 .height ( )支持小数</h4><p>之前，jQuery对<code>width()</code>, <code>height()</code>及类似的方法提供的返回值是round类型（舍入取整），jQuery 3.0解决了这个bug，可以拿到更精确的结果，如float类型。这是非常好的进步，毕竟有时，用户的确需要更精准的数据来处理布局。</p>
<h4 id="11-废弃-bind-和-delegate-方法"><a href="#11-废弃-bind-和-delegate-方法" class="headerlink" title="11. 废弃.bind()和.delegate()方法"></a>11. 废弃.bind()和.delegate()方法</h4><p>jQuery 1.7 引入<code>.on()</code>方法来处理事件捕获。3.0中不建议使用<code>.bind()</code>, <code>.unbind()</code>, <code>.delegate()</code> 和 <code>.undelegate()</code>方法，并且这些方法在以后的版本中可能会被彻底删除。你可以放心大胆地在你的项目里使用<code>on()</code> 和 <code>off()</code>方法，不必担心它之后被删除~</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>很多人认为jQuery已死，并且在以后的web世界里不再有一席之地。但它还在继续发展，拥护它的统计数据（几百万中占有率高达 78.5%）也让这些论调不攻自破。</p>
<p><img src="http://p6.qhimg.com/t01b4563ee4a5566fb6.png" alt="jquery-usage"></p>
<p>本文带领你了解了jQuery 3.0的大部分改动，也许你已经注意到，这个版本不太可能会破坏你现有的项目。继续使用jQuery吧，“Write Less, Do More”。</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@hanyuxinting" target="_blank" rel="external">hanyuxinting</a><br>链接：<a href="http://www.zcfy.cc/article/917" target="_blank" rel="external">http://www.zcfy.cc/article/917</a><br>原文：<a href="https://codebrahma.com/whats-new-jquery-3-0/?utm_source=javascriptweekly&amp;utm_medium=email" target="_blank" rel="external">https://codebrahma.com/whats-new-jquery-3-0/?utm_source=javascriptweekly&amp;utm_medium=email</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[调试CSS的方法]]></title>
      <url>http://jsgrblog.win/2016/12/11/%E8%B0%83%E8%AF%95CSS%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>我经历过许多 CSS 代码的调试工作，有别人写的也有自己写的，有移动端平台的也有标准桌面浏览器的，从陈旧的 IE 到最新的基于 Webkit 的每日构建。经验告诉我，很多人并没有一个标准的 CSS 调试流程。</p>
<p>我发现在大多数情况下，拥有专业的解决问题的方法，能够节省花在 bug 上的时间。</p>
<p>下面是我总结的经验。<br><a id="more"></a><br>我不保证这是最适合的调试 CSS 的方法，但是确实对我很有效。如何 CSS 不是你的主要编程语言，调试它可能就像暗黑艺术一样；遵循下面的指南能够帮助你更有效地定位和解决 bug。</p>
<p>概括地说，我把调试流程分为 3 个阶段：</p>
<ul>
<li>评估并快速修复</li>
<li>还原和重现</li>
<li>定位根源并修复</li>
</ul>
<p>我们挨个解释每个阶段并实践一个例子。</p>
<h2 id="评估并快速修复"><a href="#评估并快速修复" class="headerlink" title="评估并快速修复"></a>评估并快速修复</h2><p>如果 CSS 是你的主要工作语言，或者你对 CSS 有一定的理解和实践经验的话，解决 CSS 问题就有很多简单的方法，否则的话，方法就少一些。</p>
<p>有经验的 CSS 开发者可能都知道的一些 CSS 陷阱：</p>
<ul>
<li>图片周边存在有趣的空白？设置 display: block（图片默认是内联的，因此会有空白）。</li>
<li>元素排列不正确？你可能有浮动的元素。</li>
<li>绝对定位元素不显示、位置错误或者被遮挡？你可能没有设置父元素的 position 属性或者用 transform 及 opacity 创建一个 z-index 上下文。</li>
<li>伪元素不显示？你可能忘记了设置 ‘content’的值。</li>
</ul>
<p>这样的 “bug” 有一大堆。实际上根本没有 bug，更多的是开发者缺少对浏览器行为的理解。更准确地说，是 CSS 代码让浏览器怎么做。</p>
<p>对这些 CSS 特性熟悉的开发者能够快速定位到问题并且修复。他们对 bug 的认识与那些对 CSS 不了解的人会产生分歧。这样在解决 CSS bug 中对‘工作流’需求的重要性的认识就会因人而异。</p>
<p>对于‘快速修复’中没有覆盖的陌生问题，在开发者工具中靠猜来解决问题的方式已经没什么价值。即使运气好问题被解决了，也很难判断出问题到底是怎样被解决的。</p>
<p>如果出现的问题不能被轻易解决，先确定问题区域的范围，抓取 HTML 标签（也就是拷贝 DOM），进入下一个调试阶段：还原和重现。</p>
<p>专业提示：大多数浏览器的开发者工具会让你选择包裹元素并拷贝 HTML 区块。在 Chrome 的开发者工具中，要连同包裹元素一起拷贝，需要点击 ‘Copy &gt; Copy OuterHTML’。</p>
<h2 id="还原和重现"><a href="#还原和重现" class="headerlink" title="还原和重现"></a>还原和重现</h2><p>本阶段的 CSS bug 修复在类似 <a href="http://codepen.io" target="_blank" rel="external">Codepen</a> 的帮助下异常简单。我们目的主要是复现出此问题 - 也就是引起 bug 的代码。这能让我们快速定位 bug，直捣黄龙。</p>
<p>为清晰起见，只把相关的 HTML 和 CSS 提取出来复现问题。你既可以手打 HTML 对应的 CSS，也可以复制真实的代码。如果可能的话，不用把所有 CSS 代码一股脑拷贝过去重现问题，保证最精简的要素即可。保持逐步增加 CSS 的习惯，问题就会自己找到你。</p>
<p>在快要接近真相时，往往只需要一个特殊的 CSS 属性的改变就能让 bug 暴露出来。</p>
<p>相对应的做法是，把所有 CSS 都扔进入复现问题，然后每次移除一点，直到问题出现。在实践中，我发现这略笨，不用也因人而异，你可能有不同的见解。</p>
<p>逐步地增加或删除 CSS 代码已经是重现问题和定位故障的固定套路了。</p>
<h3 id="那么-HTML-标签呢？"><a href="#那么-HTML-标签呢？" class="headerlink" title="那么 HTML 标签呢？"></a>那么 HTML 标签呢？</h3><p>假设使用最少 CSS 代码复现问题时，效果有如原始代码一样。这也是有用的，我们现在看 HTML 标签。</p>
<p>第一件事要做的，也是不能跳过的，就是检查标签的有效性。即使报告出我们不关心的问题（比如 meta），至少能保证它不会以某种方式破坏美感。我们希望能发现未闭合的标签、没有引号的属性，以及其它任何可能影响浏览器解析的问题。建议你使用 <a href="https://validator.w3.org/#validate_by_input" target="_blank" rel="external">W3C validator</a>。</p>
<p>一旦标签检查通过，将有助于消除浏览器引入意外样式的可能性。这样做：</p>
<p>首先，把所有元素改成 div（块级元素）和 span（行内元素），保证它们只被 CSS 的类选择器选中。也许有必要把额外的选择器移除，如把 <code>a.link</code> 改为 <code>.link</code>。</p>
<p>通过使用固定的标签我们消除了浏览器针对特定元素引入默认样式的可能性。表单元素是个特例（马上会在例子中见到）。</p>
<p>如果把所有元素改成 div 和 span，问题消失了，那么浏览器引入默认样式的嫌疑就被确定了。现在在 <code>computed styles</code> 面板中寻找浏览器增加了什么样式，想办法覆盖它。总之就是要看计算后的样式。</p>
<h2 id="定位根源并修复"><a href="#定位根源并修复" class="headerlink" title="定位根源并修复"></a>定位根源并修复</h2><p>如果简化 HTML 标签也没有找到问题，并且是可稳定复现的，那么就该换个浏览器试一试。是否同样的问题出现在 Chrome，IE，Safari 和 Firefox 上？如果不是，哪个的表现是正确的？如果只有一个浏览器是错的，那么就值得去搜索一下对应的 bug 跟踪系统了：</p>
<ul>
<li><p><a href="https://bugs.chromium.org/p/chromium/issues/list" target="_blank" rel="external">Chrome bugs</a></p>
</li>
<li><p><a href="https://bugzilla.mozilla.org/" target="_blank" rel="external">Firefox bugs</a></p>
</li>
<li><p><a href="https://bugs.webkit.org/" target="_blank" rel="external">Safari bugs</a></p>
</li>
<li><p><a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/" target="_blank" rel="external">Microsoft bugs</a></p>
</li>
</ul>
<p>是某浏览器的问题吗？或者是某浏览器的特定版本的问题？问题是否在修复中？有没有不影响其它浏览器的解决方案？实在不行你可以为特定的浏览器编写修复代码吗？</p>
<p><a href="https://benfrain.com/reporting-browser-bugs-chrome-firefox-safari-teams-gets-fixed/" target="_blank" rel="external">过去</a>我曾详细描述过如何向浏览器提 bug，在 2011 年 <a href="https://www.smashingmagazine.com/2011/09/help-the-community-report-browser-bugs" target="_blank" rel="external">Lea Verou 也写过一份描述提 bug 流程的文章</a>。</p>
<p>另一种情况是可能需要‘无害的’hack。例如，我最近遇到的一个场景是在一个块级元素后面的元素必须是绝对定位的才能显示出来。 <code>left: 100%</code> 只有在 IE 浏览器（移动端是Windows Phone 8，8.1 和 10）中不生效。IE 中在两个元素之间总有一个空隙。看起来像是一个亚像素渲染问题，因此 <code>left: 99.99%</code> 就能解决问题而不会影响其它浏览器。这是个 hack 手段，但我们知道原理（有的浏览器会舍入，其它则不会），标注在 CSS 的注释中，没有任何危害。</p>
<p>微软的 <a href="https://twitter.com/gregwhitworth" target="_blank" rel="external">Greg Whitworth</a> 告诉我了关于亚像素舍入的更多细节。WebKit 和 Blink 内核舍入 1/64，Gecko 内核舍入 1/60，Edge 舍入 1/100（感谢 Webkit 开发者 <a href="https://twitter.com/smfr" target="_blank" rel="external">‘smfr’</a>）。</p>
<h2 id="计算后样式"><a href="#计算后样式" class="headerlink" title="计算后样式"></a>计算后样式</h2><p>开发者工具中比较容易被忽视的是 <code>computed styles</code> 面板。如果你对 <code>computed styles</code> 不熟悉的话，顾名思义，就是真正应用到元素上的样式。这很重要，因为你写的样式不一定会生效。同样，你写的样式也不是<strong>所有</strong>生效的样式。下面的例子将解释我的意思：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div></pre></td></tr></table></figure>
<p>对应的 CSS 是：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.outer</span> &#123;</div><div class="line">	<span class="attribute">max-width</span>: <span class="number">400px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.inner</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">overflow-x</span>: auto;</div><div class="line">	<span class="attribute">overflow-y</span>: hidden;</div><div class="line">	<span class="attribute">-ms-overflow-style</span>: -ms-autohiding-scrollbar;</div><div class="line">	<span class="attribute">-webkit-overflow-scrolling</span>: touch;</div><div class="line">	<span class="attribute">white-space</span>: nowrap;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">	<span class="attribute">display</span>: inline-block;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>outer</code> 的宽度会是多少？如果你认为是 <code>max-width</code> 的 400px，我会原谅你的。但是不是我们看到的宽度，看 Ben Frain 编写的 <a href="http://codepen.io/benfrain/pen/mPYqYd/" target="_blank" rel="external">codepen</a>。</p>
<p>什么情况？为什么不是 <code>max-width</code> 的值？给你个思路，打开 <code>Computed Styles</code> 面板。</p>
<p>找到问题的根源了吗？</p>
<p>我来给你解释下。默认地，fieldset 元素的宽度会等于其内容的宽度。在 Chrome 的 <code>Computed Styles</code> 面板中，<code>min-width</code> 的值是一个新的 <code>min-content</code>。</p>
<p>给 <code>min-width</code> 设置一个新值来“修复”它。这个例子中，<code>min-width: 0</code> 就会让 <code>max-width</code> 按照我们期望的那样进行工作。</p>
<p>这正是开发者工具的 <code>Computed Styles</code> 面板中看到的值。记住你写的代码不一定是浏览器计算后的。</p>
<h1 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h1><p>页面出现异常的原因可能很多并且不尽相同。不同浏览器对规范的实现存在差异是普遍存在的现象。相比于编写一个疯狂的浏览器 bug 目录，解决问题的最有效流程还是始终保持条理性。总结来看有效的措施包括：</p>
<ul>
<li>评估 bug，执行快速修复</li>
<li>使用最少的代码重现问题</li>
<li>利用工具和 bug 追踪描述原因</li>
<li>使用更灵活的代码修复问题，或者使用注释过的hack手段，亦或拷贝副本修复</li>
</ul>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@yanni4night" target="_blank" rel="external">yanni4night</a><br>链接：<a href="http://www.zcfy.cc/article/1061" target="_blank" rel="external">http://www.zcfy.cc/article/1061</a><br>原文：<a href="https://benfrain.com/debugging-css/" target="_blank" rel="external">https://benfrain.com/debugging-css/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[148个资源让你成为CSS专家]]></title>
      <url>http://jsgrblog.win/2016/12/10/148%E4%B8%AA%E8%B5%84%E6%BA%90%E8%AE%A9%E4%BD%A0%E6%88%90%E4%B8%BACSS%E4%B8%93%E5%AE%B6/</url>
      <content type="html"><![CDATA[<p>迄今为止，我已经收集了100多个精通CSS的资源，它们能让你更好地掌握CSS技巧，使你的布局设计脱颖而出。<br><a id="more"></a></p>
<h3 id="CSS3-资源"><a href="#CSS3-资源" class="headerlink" title="CSS3 资源"></a>CSS3 资源</h3><ul>
<li><a href="http://sixrevisions.com/css/20-useful-resources-for-learning-about-css3/" target="_blank" rel="external">20个学习CSS3的有用资源</a></li>
<li><a href="http://www.w3avenue.com/2009/06/22/css3-unleashed-tips-tricks-and-techniques/" target="_blank" rel="external">CSS3 风暴 — 提示, 诀窍 和 技巧</a></li>
<li><a href="http://speckyboy.com/2008/04/22/20-very-useful-css3-tutorials/" target="_blank" rel="external">20个非常有用的CSS3教程</a></li>
<li><a href="http://www.noupe.com/css3/css3-exciting-functions-and-features-30-useful-tutorials.html" target="_blank" rel="external">令人激动的CSS3函数与特性: 30多个有用教程</a></li>
</ul>
<h3 id="参考资源与备忘录"><a href="#参考资源与备忘录" class="headerlink" title="参考资源与备忘录"></a>参考资源与备忘录</h3><ul>
<li><a href="http://www.blooberry.com/indexdot/css/propindex/all.htm" target="_blank" rel="external">CSS属性指引</a> —— 一份清单，按字母表顺序列出了每个CSS属性。</li>
</ul>
<p><img src="http://p4.qhimg.com/t01d221c864f3e856b6.jpg" alt=""></p>
<ul>
<li><a href="http://www.w3.org/TR/CSS2/" target="_blank" rel="external">层叠样式表二修订版1</a> — 这是W3C对CSS 2.1 作出的官方说明。</li>
<li><a href="http://www.dustindiaz.com/css-shorthand/" target="_blank" rel="external">CSS简写指引</a> — 覆盖了基础的CSS缩写形式。</li>
<li><a href="http://webdesign.about.com/od/css/a/css_cheat_sheet.htm" target="_blank" rel="external">CSS速查表</a> — 两份表来自About.com — 一份关于CSS基础特性，一份关于CSS布局。</li>
<li><a href="http://css.maxdesign.com.au/listamatic/" target="_blank" rel="external">列表速建</a> — 该网站提供了大量的例子，告诉你如何使用CSS创建各种不同风格的列表。</li>
<li><a href="http://www.cameronmoll.com/archives/001211.html" target="_blank" rel="external">经验丰富的CSS设计师给初学者的指南</a> — 这里有大量的资源适用于CSS初学者。</li>
<li><a href="http://erraticwisdom.com/2006/01/18/5-tips-for-organizing-your-css" target="_blank" rel="external">组合CSS的5点提示</a> — 这篇文章提供了5个真正有效的方法，让你更好地组织你的样式表（而且，有助于以后的编辑修改）。</li>
<li><a href="http://www.businesslogs.com/design_and_usability/my_5_css_tips.php" target="_blank" rel="external">我的5个CSS提示</a> — 收集了5个用于更好地创建CSS的例子。</li>
<li><a href="http://www.quirksmode.org/css/quirksmode.html" target="_blank" rel="external">惯用模式与严格模式</a> - 在现代浏览器里面惯用模式与严格模式指南。</li>
<li><a href="http://www.addedbytes.com/cheat-sheets/css-cheat-sheet/" target="_blank" rel="external">CSS速查表(V2)</a> — 一份单页的CSS参考书，列出了所有CSS 2.1的选择器。</li>
<li><a href="http://refcardz.dzone.com/refcardz/corecss-part1" target="_blank" rel="external">核心CSS: 第一篇</a> — 一份来自Refcardz的基础CSS参考指南.</li>
<li><a href="http://www.eddiewelker.com/wp-content/uploads/2007/09/csscheatsheet.pdf" target="_blank" rel="external">CSS 简写速查表 (PDF)</a> — CSS简写形式参考书.</li>
<li><a href="http://webdesignfromscratch.com/html-css/css.php" target="_blank" rel="external">使用 CSS (层叠样式表)</a> — 基础CSS指南，包含使用CSS的好处介绍.</li>
<li><a href="http://net.tutsplus.com/tutorials/html-css-techniques/5-tips-to-writing-better-css/" target="_blank" rel="external">5个方法快速写成高质量的CSS</a> — 写出高效CSS的一些提示。</li>
<li><a href="http://davidwalsh.name/optimizing-structure-print-css" target="_blank" rel="external">使用CSS优化网页打印效果</a> — 创建适用于打印的样式表指南.</li>
<li><a href="http://css-discuss.incutio.com/?page=PrintStylesheets" target="_blank" rel="external">打印样式表</a> — 创建打印样式表的另一份指南.</li>
<li><a href="http://www.noupe.com/css/css-typography-contrast-techniques-tutorials-and-best-practices.html" target="_blank" rel="external">CSS 排版: 反差技巧、教程和CSS最佳实践</a> — 收集了大量的CSS印刷资源。</li>
<li><a href="http://www.smashingmagazine.com/2008/02/21/powerful-css-techniques-for-effective-coding/" target="_blank" rel="external">高效编码必备的CSS技巧</a> — 为了更好地编写CSS而收集的CSS 技巧、意见和解决方案。</li>
</ul>
<p><img src="http://p6.qhimg.com/t01cf2125b05443f0f4.jpg" alt=""></p>
<ul>
<li><a href="http://sixrevisions.com/css/css-tips/css-tip-1-resetting-your-styles-with-css-reset/" target="_blank" rel="external">用CSS Reset来重置CSS样式</a> — 一份重置样式的完整指南。</li>
<li><a href="http://sixrevisions.com/css/css-tips/css-tip-2-structural-naming-convention-in-css/" target="_blank" rel="external">CSS结构化命名惯例</a> — 一篇关于元素命名的文章，这里讲述基于元素本身的命名，而不是基于它们的位置或外观。</li>
<li><a href="http://www.smashingmagazine.com/2008/05/02/improving-code-readability-with-css-styleguides/" target="_blank" rel="external">用CSS风格指南提高代码的可读性</a> — 文章涵盖5大技巧，让你的代码更加易于维护和管理。</li>
<li><a href="http://www.smashingmagazine.com/2007/05/10/70-expert-ideas-for-better-css-coding/" target="_blank" rel="external">写好CSS的70个专业意见</a> — 搜集了一些关于写好CSS的专业提示。</li>
<li><a href="http://www.smashingmagazine.com/2007/05/01/css-float-theory-things-you-should-know/" target="_blank" rel="external">你必须知道的CSS浮动</a> — 一份帮你理解CSS浮动的指南.</li>
<li><a href="http://www.westciv.com/style_master/academy/css_tutorial/" target="_blank" rel="external">完整的CSS指引</a> — 大量的资源，涵盖了CSS的方方面面.</li>
<li><a href="http://www.webdesignerwall.com/tutorials/typographic-contrast-flow/" target="_blank" rel="external">创建排印样式对比的七个基本方法</a> — 文章列出了一些基本要素，关于在CSS里面使用充分的排版对比来营造优秀的样式风格。</li>
<li><a href="http://www.alistapart.com/articles/howtosizetextincss/" target="_blank" rel="external">如何用CSS处理文本的大小</a> — 一篇关于处理CSS文本大小的透彻指南。</li>
<li><a href="http://lesliefranke.com/files/reference/csscheatsheet.html" target="_blank" rel="external">CSS速查</a> — 一份非常完整的网页CSS速查表.</li>
</ul>
<p><img src="http://p8.qhimg.com/t01a8041a25ceec8d4c.jpg" alt=""></p>
<ul>
<li><a href="http://designreviver.com/tips/13-training-principles-of-css-everyone-should-know/" target="_blank" rel="external">每个人都应该知道的13条CSS训练原则</a> — 列出了你应在注意的一些基本的CSS惯例.</li>
<li><a href="http://www.mezzoblue.com/zengarden/resources/" target="_blank" rel="external">资源指引</a> — 这是来自CSS Zen Garden的CSS资源指引。</li>
<li><a href="http://www.cssbeauty.com/" target="_blank" rel="external">CSS美化</a> — 该网站提供了一些CSS消息、资源和画廊.</li>
</ul>
<p><img src="http://p0.qhimg.com/t0185889786af45c002.jpg" alt=""></p>
<ul>
<li><a href="http://www.tech-evangelist.com/2008/08/23/css-shortcuts/" target="_blank" rel="external">使用CSS简写</a> — 一些CSS缩写的参考指南。</li>
<li><a href="http://www.alvit.de/handbook/" target="_blank" rel="external">网页开发者手册</a> — This is a massive collection of CSS and other resources, including showcases, tools, and more.搜集了CSS以及一些其他的资源，如示例、工具等。</li>
<li><a href="http://www.softwaredeveloper.com/features/designing-on-a-dime-060407/" target="_blank" rel="external">100个免费的CSS资源</a> — 大量CSS资源，包括相关的文章、教程、布局等等。</li>
</ul>
<p><img src="http://p2.qhimg.com/t01dce336ca6f625ada.jpg" alt=""></p>
<ul>
<li><a href="http://www.seomoz.org/blog/css-properties-you-probably-never-use" target="_blank" rel="external">15个你可能从未用过的CSS属性 (但或许要知道)</a> — 文章覆盖了15个经常被忽视的CSS属性，许多开发者可能都不知道它们的存在。</li>
<li><a href="http://net.tutsplus.com/tutorials/html-css-techniques/10-principles-of-the-css-masters/" target="_blank" rel="external">CSS专家的10条原则</a> — 搜集了一些CSS大牛的重要原则和指南.</li>
<li><a href="http://www.smashingmagazine.com/2007/07/27/css-specificity-things-you-should-know/" target="_blank" rel="external">你应该知道的CSS特性</a> — 一份CSS权重特殊性指南，css权重是CSS里面最难掌握的知识点之一。</li>
<li><a href="http://net.tutsplus.com/tutorials/html-css-techniques/solving-5-common-css-headaches/" target="_blank" rel="external">解决5个普遍的CSS难题</a> — 告诉你如何处理一些CSS难题，如 IE6 里面双层外边框的bug，以及无效样式等。</li>
</ul>
<h3 id="教程与技巧"><a href="#教程与技巧" class="headerlink" title="教程与技巧"></a>教程与技巧</h3><ul>
<li><a href="http://www.wpdfd.com/issues/70/css_from_the_ground_up/" target="_blank" rel="external">从零开始学CSS</a> — 这是一个非常基础的教程，让你从零开始学习CSS并用它创建第一个基础网页。该教程对于那些对网页构建不了解的初学者来说，是很好的资源。</li>
</ul>
<p><img src="http://p7.qhimg.com/t01d9eb9adec132ce31.jpg" alt=""></p>
<ul>
<li><a href="http://www.smashingmagazine.com/2007/01/19/53-css-techniques-you-couldnt-live-without/" target="_blank" rel="external">53个生存必备的CSS技巧</a> — 这里收集了大量的CSS技巧，从菜单到表单再到样式表打印，都有相关介绍。</li>
<li><a href="http://www.alistapart.com/articles/cssdropshadows/" target="_blank" rel="external">CSS 阴影效果</a> — 一个关于如何用CSS给图片加阴影的教程。</li>
<li><a href="http://css.maxdesign.com.au/selectutorial/index.htm" target="_blank" rel="external">CSS 选择器教程</a> — CSS选择器的基本介绍以及它们是如何工作的。</li>
<li><a href="http://www.alvit.de/css-showcase/css-navigation-techniques-showcase.php" target="_blank" rel="external">CSS 导航技巧</a> — 搜集了37个不同的CSS导航设计。</li>
</ul>
<p><img src="http://p6.qhimg.com/t01d2a877050eef2c5c.jpg" alt=""></p>
<ul>
<li><a href="http://www.christianmontoya.com/2007/02/01/css-techniques-i-use-all-the-time/" target="_blank" rel="external">我一直使用的CSS技巧</a> — A collection of CSS techniques Christian Montoya finds extremely valuable.</li>
<li><a href="http://www.petefreitag.com/item/475.cfm" target="_blank" rel="external">CSS技巧综述 — 20个CSS提示与诀窍</a> — 收集了关于CSS圆角和弹窗的一些技巧。</li>
<li><a href="http://www.blogherald.com/2006/09/08/css-tips-and-tricks/" target="_blank" rel="external">CSS提示与小窍门</a> — 有效基础的CSS技巧.</li>
<li><a href="http://www.crucialwebhost.com/blog/master-stylesheet-the-most-useful-css-technique/" target="_blank" rel="external">精通样式表: 最有用的CSS技巧</a> — 用于清除和重置浏览器默认的样式。</li>
</ul>
<p><img src="http://p1.qhimg.com/t0166171f1772c742c4.jpg" alt=""></p>
<ul>
<li><a href="http://www.askthecssguy.com/2006/12/showing_hyperlink_cues_with_cs_1.html" target="_blank" rel="external">用CSS展示超链接提示</a> — 本教程告诉你如何快速使用CSS添加链接式图标, 并且能够兼容IE7, Safari和火狐。</li>
<li><a href="http://www.webcredible.co.uk/user-friendly-resources/css/css-tricks.shtml" target="_blank" rel="external">10个你可能不知道的CSS诀窍</a> — 涵盖了CSS字体、图片替换、垂直居中等技巧。</li>
<li><a href="http://www.webcredible.co.uk/user-friendly-resources/css/more-css-tricks.shtml" target="_blank" rel="external">10多个你可能不知道的CSS技巧</a> — 这篇文章涵盖了块级元素与行内元素、设置页面最小宽度及不可见文本等。</li>
<li><a href="http://www.456bereastreet.com/archive/200501/turning_a_list_into_a_navigation_bar/" target="_blank" rel="external">用lists实现导航栏</a> — 这是个很棒的教程，一步步指导你如何用列表来制作导航栏。</li>
</ul>
<p><img src="http://p6.qhimg.com/t0134cf627d77f92e2b.jpg" alt=""></p>
<ul>
<li><a href="http://odyniec.net/articles/turning-lists-into-trees/" target="_blank" rel="external">用lists实现树形图</a> — 如何创建一个多层级无序的页面树形图。</li>
<li><a href="http://www.digital-web.com/articles/web_page_reconstruction_with_css/" target="_blank" rel="external">如何用CSS实现网页重构</a> — 如何用CSS布局重构一个网页。</li>
<li><a href="http://www.webreference.com/authoring/style/sheets/layout/advanced/" target="_blank" rel="external">一步步实现高级网页布局</a> — 一步步教你创建一个高级的三栏布局。</li>
<li><a href="http://www.subcide.com/tutorials/csslayout/" target="_blank" rel="external">从头搭建CSS布局</a> — 该教程教你如何从零开始用CSS创建一个网页。</li>
</ul>
<p><img src="http://p1.qhimg.com/t010c4c2efd1aeb08ed.jpg" alt=""></p>
<ul>
<li><a href="http://www.w3schools.com/css/" target="_blank" rel="external">CSS 教程</a> — 来自 W3Schools 的完整教程。</li>
<li><a href="http://www.yourhtmlsource.com/stylesheets/" target="_blank" rel="external">样式表</a> — 另一个非常全的CSS教程。</li>
<li><a href="http://www.miswebdesign.com/resources/articles/fancy-paragraphs.html" target="_blank" rel="external">CSS实现的精致图表</a> — 创建特殊的图表形式。</li>
<li><a href="http://www.schillmania.com/content/projects/even-more-rounded-corners/" target="_blank" rel="external">关于CSS的更多圆角技巧</a> — 教你如何创建支持PNG和<code>alpha</code>透明度的圆角。</li>
</ul>
<p><img src="http://p7.qhimg.com/t019e1a609a69f6d274.jpg" alt=""></p>
<ul>
<li><a href="http://www.projectseven.com/tutorials/css/uberlinks/index.htm" target="_blank" rel="external">CSS菜单列表</a></li>
<li><a href="http://net.tutsplus.com/tutorials/html-css-techniques/how-to-add-variables-to-your-css-files/" target="_blank" rel="external">如何向你的CSS文件添加变量</a> — 告诉你如何用PHP和Apache的URL向你的CSS文件添加变量。</li>
</ul>
<p><img src="http://p1.qhimg.com/t01583776c58256889d.jpg" alt=""></p>
<ul>
<li><a href="http://www.catswhocode.com/blog/15-techniques-and-tools-for-cross-browser-css-coding" target="_blank" rel="external">跨浏览器CSS编码的15个技巧和工具</a> — 文章涵盖了15条以上的提示，都是关于如何用CSS解决跨浏览器的兼容问题。</li>
<li><a href="http://www.maxdesign.com.au/presentation/center/" target="_blank" rel="external">CSS 轴心化</a> — 如何创建CSS轴心化布局，包括中央CSS流式布局。</li>
<li><a href="http://css-tricks.com/absolute-positioning-inside-relative-positioning/" target="_blank" rel="external">绝对定位在相对定位里面</a> — 关于如何在一个相对定位的父元素中绝对定位一个子元素的指南。</li>
<li><a href="http://www.alistapart.com/articles/fauxabsolutepositioning" target="_blank" rel="external">Faux 绝对定位</a> — 关于把浮动和绝对定位结合起来的方法指南。</li>
<li><a href="http://www.ampsoft.net/webdesign-l/vertical-aligned-nav-list.html" target="_blank" rel="external">多行导航栏的垂直居中</a> — 使用浮动的方法实现列表对齐。</li>
<li><a href="http://www.catswhocode.com/blog/top-10-css-buttons-tutorial-list" target="_blank" rel="external">前10个CSS按钮教程列表</a> — 收藏了10个创建CSS按钮的最好教程。</li>
<li><a href="http://www.alistapart.com/articles/mountaintop" target="_blank" rel="external">山顶角</a> — 用CSS来实现的圆角。</li>
<li><a href="http://www.smileycat.com/miaow/archives/000044.php" target="_blank" rel="external">CSS 圆角综述</a> — 收藏了CSS圆角的技巧和教程。</li>
<li><a href="http://www.macworld.com/article/48296/2005/12/januarycreate.html" target="_blank" rel="external">CSS小窍门–自定义子弹头</a> — 关于如何用CSS实现子弹头的指南。</li>
</ul>
<p><img src="http://p4.qhimg.com/t01ff214f3987218575.jpg" alt=""></p>
<ul>
<li><a href="http://www.alistapart.com/articles/multicolumnlists" target="_blank" rel="external">CSS Swag: 多栏列表</a> — A guide to creating semantically-logical, ordered list that wraps through multiple vertical columns一份关于创建语义化的、有序的多栏列表指南。</li>
<li><a href="http://www.alistapart.com/articles/improvingprint/" target="_blank" rel="external">改善打印版的链接展示</a> — 示范了打印输出时如何在超链接文本中如何包含链接地址.</li>
<li><a href="http://www.3point7designs.com/blog/2007/12/22/advanced-css-menu-trick/" target="_blank" rel="external">高级CSS菜单技巧</a> — 用CSS创建一个真正酷炫的、高级的、带有模糊效果的菜单。</li>
<li><a href="http://www.howtocreate.co.uk/tutorials/testMenu.html" target="_blank" rel="external">CSS 菜单</a> — 一个关于用纯CSS2（不包含JS）嵌套列表创建菜单面板的教程。</li>
<li><a href="http://www.dave-woods.co.uk/?p=104" target="_blank" rel="external">CSS Tab菜单带下拉效果</a> — 一个关于创建带有下拉效果的CSS菜单教程。</li>
</ul>
<p><img src="http://p3.qhimg.com/t019f674c1d6859b120.jpg" alt=""></p>
<ul>
<li><a href="http://www.webdesignerwall.com/tutorials/advanced-css-menu/" target="_blank" rel="external">高级CSS菜单</a> — 来自网页设计墙的绚丽CSS菜单教程。</li>
<li><a href="http://www.dynamicdrive.com/style/csslibrary/item/animated_horizontal_tabs/" target="_blank" rel="external">自动水平化tab</a> — 该教程教你如何创建带有翻转效果的水平菜单。</li>
<li><a href="http://bwebi.com/css_graphic_menu_with_rollovers.html" target="_blank" rel="external">带有翻转效果的CSS图标菜单</a> — 创建带有CSS翻转效果的菜单教程。</li>
<li><a href="http://www.alistapart.com/articles/hybrid/" target="_blank" rel="external">混杂的CSS下拉菜单</a> — 一个教你如何创建CSS下拉菜单并且做到优雅降级，结构合理的教程。</li>
</ul>
<p><img src="http://p3.qhimg.com/t01a097451e5b10af93.jpg" alt=""></p>
<ul>
<li><a href="http://friendlybit.com/css/beginners-guide-to-css-and-standards/" target="_blank" rel="external">初学者CSS指南</a> — 给初识CSS者的完整指南。</li>
<li><a href="http://line25.com/tutorials/getting-started-with-css-a-practical-exercise" target="_blank" rel="external">开始CSS实战</a> — 一个非常基础的CSS实战指南。</li>
<li><a href="http://www.webdesignerwall.com/tutorials/how-to-css-large-background/" target="_blank" rel="external">如何处理CSS大背景</a> — 处理CSS大背景的教程。</li>
<li><a href="http://cameronmoll.com/articles/extensible-css/" target="_blank" rel="external">可扩张性强的CSS背景</a> — 关于创建高度自定义和自适应网站的教程。</li>
<li><a href="http://www.noupe.com/css/using-css-to-do-anything-50-creative-examples-and-tutorials.html" target="_blank" rel="external">用CSS做各种事情: 50多个富有创意的列子和教程</a> — 收藏了50多个创建独特CSS布局的教程。</li>
<li><a href="http://www.tutorial9.net/web-tutorials/quick-easy-css-development-with-firebug/" target="_blank" rel="external">用Firebug快速简单的开发CSS</a> — 一份关于使用Firebug提高网页设计的指南。</li>
<li><a href="http://www.3point7designs.com/blog/2008/06/02/10-examples-of-beautiful-css-typography-and-how-they-did-it/" target="_blank" rel="external">10漂亮的CSS排版例子</a> — 提供了很棒的CSS排版例子并且有教程指导如何创建。</li>
</ul>
<p><img src="http://p3.qhimg.com/t01d15cfb324d299a25.jpg" alt=""></p>
<ul>
<li><a href="http://speckyboy.com/2009/02/04/16-usable-css-graph-and-bar-chart-tutorials-and-techniques/" target="_blank" rel="external">16个可用的CSS图表和长条图教程与技巧</a> — 收藏了一系列关于创建基于CSS的数据可视化图表的教程。</li>
<li><a href="http://css-tricks.com/better-pull-quotes/" target="_blank" rel="external">更好地引用: 不要重复标记</a> — 指导你如何更好地引用，免除一些不必要的、重复的标记。</li>
<li><a href="http://www.webdesignerwall.com/tutorials/css-gradient-text-effect/" target="_blank" rel="external">CSS 渐变文本效果</a> — 一个为标题创建文本渐变的教程。</li>
<li><a href="http://www.1stwebdesigner.com/tutorials/43-psd-to-xhtml-css-tutorials-creating-web-layouts-and-navigation/" target="_blank" rel="external">43 个从 PSD 到 XHTML/CSS 的教程</a> — 列出了大量的教程，教你如何把 PSD 变为有效的 CSS/XHTML 文件。</li>
<li><a href="http://www.frankmanno.com/ideas/css-imagemap/" target="_blank" rel="external">CSS 图片地图</a> — 一个用 CSS 和 XHTML 创建图片地图的教程。</li>
<li><a href="http://www.alistapart.com/articles/fluidgrids" target="_blank" rel="external">流式栅格布局</a> — 一个关于创建流式栅格布局的教程。</li>
</ul>
<p><img src="http://p6.qhimg.com/t01bd347de7d3161fdf.jpg" alt=""></p>
<ul>
<li><a href="http://www.subcide.com/tutorials/debuggingcss/" target="_blank" rel="external">如何调试CSS</a> — 介绍了调试CSS的技巧。</li>
<li><a href="http://net.tutsplus.com/tutorials/html-css-techniques/10-challenging-but-awesome-css-techniques/" target="_blank" rel="external">10项有挑战性但了不起的CSS技能</a> — 指导你掌握一些值得学习的高级CSS技能.</li>
<li><a href="http://www.hongkiat.com/blog/50-nice-clean-css-tab-based-navigation-scripts/" target="_blank" rel="external">50多个漂亮整洁的CSS Tab 导航</a> — 搜集了大量用CSS制作的tab导航。</li>
<li><a href="http://sixrevisions.com/css/30_css_techniques_examples/" target="_blank" rel="external">30个无与伦比的CSS技巧和示例</a> — 收藏了大量真正酷炫的CSS效果，包括 <code>hoverbox</code> 图片画廊、固定页脚和纯CSS实现的手风琴效果等等。</li>
</ul>
<p><img src="http://p0.qhimg.com/t01a334611692d1c9ba.jpg" alt=""></p>
<ul>
<li><a href="http://www.noupe.com/css/101-css-techniques-of-all-time-part-1.html" target="_blank" rel="external">101个CSS技巧</a> — <a href="http://www.noupe.com/css/101-css-techniques-of-all-time-part2.html" target="_blank" rel="external">Part 2</a> — 又一批很好的CSS技巧及其相应的教程。</li>
<li><a href="http://www.wpdfd.com/editorial/thebox/deadcentre4.html" target="_blank" rel="external">固定中心</a> — 一个简短的教程，教你如何在窗口正中心（垂直与水平）定位某些元素。</li>
<li><a href="http://www.maxdesign.com.au/presentation/liquid/" target="_blank" rel="external">流式布局，一种简短的方式</a> — 创建CSS流式布局的完整教程。</li>
</ul>
<h3 id="模板与框架"><a href="#模板与框架" class="headerlink" title="模板与框架"></a>模板与框架</h3><ul>
<li><a href="http://www.1kbgrid.com/" target="_blank" rel="external">1Kb大的CSS栅格</a> — 这也许是最简单最紧凑的栅格系统了，但包含了自定义栅格的工具。</li>
</ul>
<p><img src="http://p8.qhimg.com/t010d875a3303740e7e.jpg" alt=""></p>
<ul>
<li><a href="http://www.csszengarden.com/" target="_blank" rel="external">CSS Zen Garden</a> — CSS Zen Garden 是一个 HTML 和 CSS 框架，用于展示大量能用CSS创建的设计。除了框架之外，还有大量可用的模板和主题。</li>
<li><a href="http://matthewjamestaylor.com/blog/perfect-multi-column-liquid-layouts" target="_blank" rel="external">完美的多栏CSS流式布局</a> — 收集了兼容iPhone的流式布局。</li>
<li><a href="http://960.gs/" target="_blank" rel="external">960栅格系统</a> — 一个基于960像素宽构建的CSS栅格布局。</li>
</ul>
<p><img src="http://p9.qhimg.com/t014327d7190bcfb74b.jpg" alt=""></p>
<ul>
<li><a href="http://www.free-css-templates.com/" target="_blank" rel="external">免费CSS模板</a> — 该网站提供了200多个CSS模板，都遵循知识共享署名许可协议。</li>
</ul>
<p><img src="http://p1.qhimg.com/t01ed6e4df28d7ec975.jpg" alt=""></p>
<ul>
<li><a href="http://www.mycelly.com/" target="_blank" rel="external">漂亮免费的CSS模板</a> — 几十个模板让你着手CSS设计，包括动态居中盒子、4栏不定宽布局、宽度固定的盒子上下左右完全居中等。</li>
<li><a href="http://www.thenoodleincident.com/tutorials/box_lesson/boxes.html" target="_blank" rel="external">小型盒子</a> — 收藏了各种布局的CSS文件。</li>
</ul>
<p><img src="http://p6.qhimg.com/t01947dd7d3130e9ff8.jpg" alt=""></p>
<ul>
<li><a href="http://net.tutsplus.com/tutorials/html-css-techniques/prototyping-with-the-grid-960-css-framework/" target="_blank" rel="external">960px宽的CSS栅格系统设计</a> — 使用栅格创建960px宽的网页模型。</li>
<li><a href="http://net.tutsplus.com/tutorials/html-css-techniques/prototype-a-magazine-style-home-page-template-with-the-blueprint-css-framework/" target="_blank" rel="external">用CSS框架设计一个杂志类首页模板</a> — 一份创建杂志和栅格布局的有效指南。</li>
</ul>
<p><img src="http://p6.qhimg.com/t01edd53e432487de42.jpg" alt=""></p>
<h3 id="画廊与陈列"><a href="#画廊与陈列" class="headerlink" title="画廊与陈列"></a>画廊与陈列</h3><ul>
<li><a href="http://www.cssstars.com/" target="_blank" rel="external">CSS Stars</a> — 画廊提供了一些基于CSS的设计，让你熟读掌握。</li>
</ul>
<p><img src="http://p9.qhimg.com/t0146c3213d7514fbb7.jpg" alt=""></p>
<ul>
<li><a href="http://cssbased.com/" target="_blank" rel="external">CSS Based</a> — 上千个不同设计的CSS画廊。</li>
<li><a href="http://www.cssdrive.com/index.php" target="_blank" rel="external">CSS Drive</a> — 一个分类的CSS画廊。</li>
<li><a href="http://cssmania.com/" target="_blank" rel="external">CSS Mania</a> — 一个已经有5年历史的CSS画廊。</li>
<li><a href="http://www.csselite.com/" target="_blank" rel="external">CSSelite.com</a> — 一个分类的CSS画廊。</li>
<li><a href="http://csscreme.com/" target="_blank" rel="external">CSS Creme</a> — 大量可以根据颜色、分类或者设计师划分的画廊，也包括相关的教程和信息。</li>
<li><a href="http://www.css-website.com/" target="_blank" rel="external">csswebsite</a> — 一个可以通过类型、日期或者颜色帅选的画廊。</li>
<li><a href="http://www.toxel.com/design/2008/12/07/40-beautiful-dark-css-website-designs/" target="_blank" rel="external">40 漂亮的深色CSS网页设计</a> — 该画廊提供了一些漂亮的深颜色网页设计。</li>
<li><a href="http://www.webdesignerwall.com/trends/best-of-css-design-2008/" target="_blank" rel="external">2008年最好的CSS设计</a> — 又一个画廊展示了2008年最好的CSS设计。</li>
<li><a href="http://www.cssbeauty.com/gallery/" target="_blank" rel="external">CSS美丽画廊</a> — 该CSS画廊的条目是从2004年至今的，按年代顺序排列。</li>
</ul>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul>
<li><a href="http://getfirebug.com/" target="_blank" rel="external">Firebug</a> — 火狐浏览器的一个插件，你可以在该调试器里面看到你的CSS代码，并且可以在里面编辑。</li>
</ul>
<p><img src="http://p0.qhimg.com/t01a5cbac42892e76c6.jpg" alt=""></p>
<ul>
<li><a href="http://karmatics.com/aardvark/" target="_blank" rel="external">Aardvark</a> — 火狐浏览器的扩展，可以看到每段HTML及它的类或者id。</li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/2104" target="_blank" rel="external">CSSViewer 1.0.3</a> — 也是火狐浏览器的扩展工具，你可以看到任何页面的CSS属性。</li>
<li><a href="http://www.puidokas.com/portfolio/gridfox/" target="_blank" rel="external">GridFox</a> — 火狐浏览器的另一个扩展，通过在任何网页覆盖一层栅格来辅助栅格设计。</li>
<li><a href="http://tools.sitepoint.com/codeburner/" target="_blank" rel="external">CodeBurner</a> — 开发的一款插件，可以在浏览器中看到HTML和CSS的参考资料。</li>
</ul>
<p><img src="http://p0.qhimg.com/t016e02f332a52fed3e.jpg" alt=""></p>
<ul>
<li><a href="http://www.izzymenu.com/" target="_blank" rel="external">IzzyMenu</a> — 一个免费的CSS菜单创建器，支持创建下拉二级菜单。</li>
<li><a href="http://tools.sitepoint.com/spanky/index.php" target="_blank" rel="external">Spanky Corners</a> — 一个圆角盒子生成器。</li>
<li><a href="http://www.cleancss.com/" target="_blank" rel="external">CleanCSS</a> — 一款CSS美化工具。</li>
<li><a href="http://rafael.adm.br/css_browser_selector/" target="_blank" rel="external">CSS浏览器选择器</a> — A useful tool for empowering CSS selectors based on the visitor’s browser.一款有用的工具，可以基于访问者的浏览器来使用CSS选择器。</li>
<li><a href="http://iceyboard.no-ip.org/projects/css_compressor" target="_blank" rel="external">CSS 压缩器</a> — 一款CSS文件压缩器。</li>
<li><a href="http://csscreator.com/?q=tools/layout" target="_blank" rel="external">CSS 布局生成器</a> — 一个简单、在线的CSS生成器，可以创建一个基础的布局框架。</li>
<li><a href="http://csstidy.sourceforge.net/" target="_blank" rel="external">CSSTidy</a> — 一款开源的、可供下载的CSS分析器和优化器。</li>
</ul>
<p><img src="http://p0.qhimg.com/t01dfcfd2bc14103b56.jpg" alt=""></p>
<ul>
<li><a href="http://www.cssdrive.com/index.php/main/csscompressor/" target="_blank" rel="external">CSS驱动CSS压缩器</a> — 一款CSS压缩工具，根据你的需求，可以有基础和高级的压缩模式。</li>
<li><a href="http://tools.arantius.com/tabifier" target="_blank" rel="external">Tabifier</a> — 缩进你的代码。</li>
<li><a href="http://www.cssfly.net/" target="_blank" rel="external">CSSFly</a> — 基于浏览器的CSS和XHTML编辑器，可以实时编辑。</li>
</ul>
<p><img src="http://p5.qhimg.com/t01fe55b1406a7935f7.jpg" alt=""></p>
<ul>
<li><a href="http://www.accessify.com/tools-and-wizards/developer-tools/list-o-matic/" target="_blank" rel="external">List-O-Matic</a> — 一款可以创建基于列表的导航菜单。</li>
<li><a href="http://www.accessify.com/tools-and-wizards/developer-tools/markup-maker/" target="_blank" rel="external">Markup Maker</a> — 根据你输入的页面ID来创建一个有效的XHTML/HTML框架。</li>
<li><a href="http://cssmate.com/csseditor.htm" target="_blank" rel="external">CSSMate</a> — 一款在线CSS编辑器。</li>
<li><a href="http://www.csstypeset.com/" target="_blank" rel="external">CSS Type Set</a> — 一个CSS排版生成器。</li>
</ul>
<p><img src="http://p8.qhimg.com/t01328a44645b2d009b.jpg" alt=""></p>
<ul>
<li><a href="http://www.constructyourcss.com/" target="_blank" rel="external">Construct 0.5</a> — 一款可视的，可以基于蓝图框架创建的布局工具。</li>
</ul>
<p><img src="http://p5.qhimg.com/t01fd793b527d8b3617.jpg" alt=""></p>
<ul>
<li><a href="http://pxtoem.com/" target="_blank" rel="external">PXtoEM.com</a> — 一个把px转换成em的转换工具。</li>
<li><a href="http://www.smashingmagazine.com/2008/06/19/css-editors-reviewed/" target="_blank" rel="external">CSS编辑器回顾</a> — 收藏了一些流行的CSS编辑器。</li>
<li><a href="http://builder.yaml.de/" target="_blank" rel="external">YAML构建器</a> —  一个创建YAML布局的可视工具。</li>
<li><a href="http://gridinator.com/" target="_blank" rel="external">布局构造器</a> — 一个CSS布局构建器。</li>
<li><a href="http://www.smashingmagazine.com/2006/09/02/list-of-css-tools/" target="_blank" rel="external">CSS工具列表</a> — 列出了大量的CSS工具，从字体到优化。</li>
<li><a href="http://www.smashingmagazine.com/2008/12/09/50-really-useful-css-tools/" target="_blank" rel="external">50个非常有用的CSS工具</a> — 列出了一些非常棒的CSS工具。</li>
</ul>
<h3 id="特殊的CSS博客和网站"><a href="#特殊的CSS博客和网站" class="headerlink" title="特殊的CSS博客和网站"></a>特殊的CSS博客和网站</h3><ul>
<li><a href="http://css-tricks.com/" target="_blank" rel="external">CSS技巧</a> — 来自Chris Coyier的博客。</li>
<li><a href="http://www.artypapers.com/csshelppile/" target="_blank" rel="external">CSS Help Pile</a> — 不断收集CSS相关的教程和资源。</li>
</ul>
<p><img src="http://p3.qhimg.com/t0103b3af5fc4019550.jpg" alt=""></p>
<p>祝你愉快！</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@grace_wang" target="_blank" rel="external">旭日云中竹</a><br>链接：<a href="http://www.zcfy.cc/article/1057" target="_blank" rel="external">http://www.zcfy.cc/article/1057</a><br>原文：<a href="https://medium.com/@bradley_nice/148-resources-to-help-you-become-a-css-expert-ced300b173e7" target="_blank" rel="external">https://medium.com/@bradley_nice/148-resources-to-help-you-become-a-css-expert-ced300b173e7</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[运动曲线提升CSS动画效果]]></title>
      <url>http://jsgrblog.win/2016/12/10/%E8%BF%90%E5%8A%A8%E6%9B%B2%E7%BA%BF%E6%8F%90%E5%8D%87CSS%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<p>先有UI动画，然后才会有好的UI动画。好的动画会让人惊叹“哇哦！”——因为页面看上去很流畅、很漂亮，最重要的是，自然，一点都不会让人觉得不和谐或者僵硬死板。如果你经常逛Dribbble或者 <a href="http://www.uplabs.com" target="_blank" rel="external">UpLabs</a>这类网站的话，你就会明白我在说什么了。</p>
<a id="more"></a>
<h3 id="一些极好的拓展阅读资源"><a href="#一些极好的拓展阅读资源" class="headerlink" title="一些极好的拓展阅读资源:"></a>一些极好的拓展阅读资源:</h3><ul>
<li><p><a href="https://www.smashingmagazine.com/2015/12/animating-clipped-elements-svg/" target="_blank" rel="external">SVG和CSS的路径剪辑动画</a></p>
</li>
<li><p><a href="https://www.smashingmagazine.com/2015/06/practical-techniques-on-designing-animation/" target="_blank" rel="external">若干实用的动画技术</a></p>
</li>
<li><p><a href="https://www.smashingmagazine.com/2015/09/creating-cel-animations-with-svg/" target="_blank" rel="external">使用SVG手绘动画</a></p>
</li>
<li><p><a href="https://www.smashingmagazine.com/2014/11/the-state-of-animation-2014/" target="_blank" rel="external">新的网页动画API</a></p>
</li>
</ul>
<p>既然有这么多天才设计师创造了如此漂亮的动画，自然是任何开发者都会想要在自己的项目中引进这些效果。如今，CSS为<a href="https://developer.mozilla.org/en/docs/Web/CSS/transition-timing-function" target="_blank" rel="external"><code>transition-timing-function</code></a>提供了一些预置变量，比如<code>ease-in</code>, <code>ease-out</code> 和 <code>ease-in-out</code>, 它们将页面的平滑感和真实感提升了一个档次，但是，你不觉得这个方法太大众化了吗？试想如果页面上的每个动画都用了这3个相同的时间变量，那该是有多乏味啊。</p>
<p>(引自: <a href="https://dribbble.com/LukasStranak" target="_blank" rel="external">Lukáš Straňák</a>)</p>
<p> <code>transition-timing-function</code>有一个变形是<code>cubic-bezier(n1, n2, n3, n4)</code>, 你可以传进4个参数来创建自己独一无二的时间函数。在这篇文章的最后，你将会看到这4个参数各自代表什么——但是，相信我，要找到四个数字来捕获你想象中的转变并不是一件容易事儿。 幸亏有<a href="http://cubic-bezier.com" target="_blank" rel="external"><code>cubic-bezier</code></a>和<a href="https://matthewlein.com/ceaser/" target="_blank" rel="external"><code>Ceasar</code></a>, 你不必非得自己来完成。这些工具将运动曲线引入到了网页中。</p>
<p>(引自: <a href="https://dribbble.com/m-2-h" target="_blank" rel="external">m-2-h</a>)</p>
<p>运动曲线最早是被动画师们用来创造先进、逼真的动画(比如 <a href="http://www.adobe.com/products/aftereffects.html" target="_blank" rel="external">Adobe After Effects</a>)。通过<code>cubic-bezier</code> 和Ceasar, 你可以很容易地操纵曲线的形状，另外 (<code>n1, n2, n3, n4</code>) 这4个数字也会为你填好，这绝对超赞! 尽管如此，如果使用时想要最大化运动曲线的功能，你则需要了解它们的工作原理，这就是我们接下来在这篇文章中要讲到的。现在我们开始吧。</p>
<h3 id="理解运动曲线"><a href="#理解运动曲线" class="headerlink" title="理解运动曲线"></a>理解运动曲线</h3><p>运动曲线其实只是连接 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties" target="_blank" rel="external">动画属性</a> 和时间的一个点。一条运动曲线展示了一个动画运动的速度是如何受时间的影响并随之变化的。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig26_large-opt.png" target="_blank" rel="external"><img src="http://p7.qhimg.com/t0198f1985b49e43d5d.png" alt="运动曲线是连接动画属性和时间的一个点。"></a></p>
<p>运动曲线是连接动画属性和时间的一个点。 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig26_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>让我们拿 <a href="https://css-tricks.com/almanac/properties/t/transform/#article-header-id-3" target="_blank" rel="external">distance (<code>translateX</code>)</a> 作为动画属性举例。(这个解释同样适用于其他的任何一个动画属性。)</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig27_large-opt.png" target="_blank" rel="external"><img src="http://p1.qhimg.com/t012147368daf259496.png" alt="在一张距离－时间图上计算t1时刻的速度。"></a></p>
<p>在一张距离－时间图上计算t1时刻的速度。(<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig27_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>如果你有一定的物理学和初级微积分学的基础，你就会知道从一张距离－时间表上算出速度是非常容易的。表中的<strong>单位时间内走过的距离</strong>除以<strong>单位时间</strong>得到的某时刻的导数，就是速度。 也就是说，距离－时间曲线上的物体在曲线陡峭的地方有更快的运动速度，而在曲线平缓的地方，速度则比较慢。如果你知道它的原理，那太棒了！说明你已经做好了充足的准备，可以跳过下面这节。</p>
<p>如今，我意识到设计和开发是完全不同的领域，毕竟不是每个人都有相同的背景。 也许上面那段话你完全听不懂，也用不着灰心丧气，因为我接下来会慢慢解释的。</p>
<p>看到下面的红盒了吗？请允许我童心未泯地将之称为“Boxy”；这样提及它时会更方便一些。好了，我们可以看到Boxy正在以线性的方式从屏幕的一边移动到另一边，接下来我们来分析一下它的运动。</p>
<p><code>transition-timing-function</code> 的一个预置参数是<code>linear</code>。为了让Boxy动起来，我们要做的就是添加下面的这个方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> .moveForward &#123;</div><div class="line">  transform: translateX(1000px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了控制动画效果，我们会为Boxy设<code>transition</code>属性，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#boxy &#123;</div><div class="line">  width: 200px;</div><div class="line">  height: 200px;</div><div class="line">  background: red;</div><div class="line">  transition-property: transform; </div><div class="line">  transition-duration: 1s; </div><div class="line">  transition-timing-function: linear; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>想要将<code>transition</code>解释清楚是一件很麻烦的事情，实际上，你将会发现<code>transition</code>都是用速记形式写的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#boxy &#123;</div><div class="line">  width: 200px;</div><div class="line">  height: 200px;</div><div class="line">  background: red;</div><div class="line">  transition: transform 1s linear;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看它动起来的效果。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/TNndMJe.gif" target="_blank" rel="external"><img src="http://p8.qhimg.com/t01e59111828ca82798.gif" alt="Boxy 做直线运动。"></a></p>
<p>红盒在做直线运动。</p>
<p>它看上去很像一个机器人，不是吗？当然你可以说它之所以看上去很机械，完全是因为它做的是直线运动，这听起来好像很合理。但是你又要如何解释导致这一现象的原因呢？我们可以看到直线运动使得物品的移动显得很机械，但是隐藏在屏幕后面的工作原理又是什么呢？所以，我们的当务之急就是搞清楚为什么这样的移动会让人觉得很机械、不和谐又不自然。</p>
<p>让我们将Boxy的移动用坐标轴来展现，看看是否能得到一些有用的信息。坐标轴有两根轴线，纵轴表示距离，横轴表示时间。Boxy在1秒钟内走过了1000像素的距离。 我们接下来会用到一些数学知识，不过不用担心，因为都很简单。</p>
<p>这就是我们建的非常简易的图表，上面有两根坐标轴， 正如我刚刚提到的那样。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig1_large-opt.png" target="_blank" rel="external"><img src="http://p5.qhimg.com/t01c6e2853a8edca4fb.png" alt="只有坐标轴的空表"></a></p>
<p>只有坐标轴的空表 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig1_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>现在，它是空的，让我们填进去一些数据。</p>
<p>首先，我们可以看到在初始时刻（也就是0秒时），动画还没有开始，Boxy处在它的初始位置（也就是0像素的位置）。1秒钟过后，Boxy一共运动了1000像素，停在了初始位置的对面。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig2_large-opt.png" target="_blank" rel="external"><img src="http://p1.qhimg.com/t0165a65b34ba906b01.png" alt="Boxy的起点和终点位置"></a></p>
<p>Boxy的起点和终点位置。 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig2_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>让我们在图中标出数据。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig3_large-opt.png" target="_blank" rel="external"><img src="http://p2.qhimg.com/t01235d7dd83ccf8b53.png" alt="标有Boxy起点和终点位置的图表"></a></p>
<p>标有Boxy起点和终点位置的图表 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig3_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>到现在为止一切都很顺利。但是只有两个点的数据远远不够——我们需要更多。接下来的数据记录了Boxy在不同时间点的所处位置（这一切都多亏了我的高速摄像机）。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig4_large-opt.png" target="_blank" rel="external"><img src="http://p3.qhimg.com/t01d64520c0d8b9dba7.png" alt="不同时间点Boxy所处的位置"></a></p>
<p>不同时间点Boxy所处的位置 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig4_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>我们将这些数据添加到坐标轴中。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig5_large-opt.png" target="_blank" rel="external"><img src="http://p2.qhimg.com/t013a6e88ee6a11857f.png" alt="标有不同位置的坐标轴。"></a></p>
<p>标有不同位置的坐标轴。 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig5_large-opt.png" target="_blank" rel="external">View large version</a>)</p>
<p>当然，你也可以搜集更多不同时刻的点（比如0.375s、0.6s等等），但是我们现在有的已经足够来建成这张表了。标注了上面的所有点后，我们的表就建成啦。来，击个掌！</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig6_large-opt.png" target="_blank" rel="external"><img src="http://p4.qhimg.com/t01ba54f1b734954250.png" alt="最终版本的坐标轴"></a></p>
<p>坐标轴最终版本 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig6_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>酷！但是我们能从这得到什么呢？我们要时刻记住，实验的目的是弄明白为什么Boxy的线性运动看上去会不自然并且很机械。很显然，我们建好的这张表还不能告诉我们这是为什么。我们需要更深入地探索。</p>
<p>让我们记住这张表，然后花1分钟时间来讨论一下速度。我相信你应该了解速度的概念——我指的就是数学术语上的速度。它的计算方法如下所示：</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig7_large-opt.png" target="_blank" rel="external"><img src="http://p3.qhimg.com/t01b54717a25957ef45.png" alt="计算速度的数学公式"></a></p>
<p>计算速度的数学公式 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig7_large-opt.png" target="_blank" rel="external">View large version</a>)</p>
<p>因此，如果一辆卡车在1小时内行驶100公里，我们就说它的速度是100km／h。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig8_large-opt.png" target="_blank" rel="external"><img src="http://p0.qhimg.com/t01128b6bfb975a19d3.png" alt="速度的计算"></a></p>
<p>速度的计算 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig8_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>如果这辆卡车将速度加倍，他就会在相同的时间间隔1小时内行驶双倍的距离（也就是200公里），换句话说，要行驶100公里，它现在只需要刚才的一半时间（也就是半个小时）。能理解我的意思吗？</p>
<p>类似的，如果这辆卡车将它的速度减半，它将在相同的时间段1小时内走过50公里，也就是说，要行驶100公里，它将需要双倍时间（也就是2个小时）。</p>
<p>好！让我们回到之前的思路上，我们目前是在尝试弄清楚这张距离－时间表是如何帮助我们找到Boxy的线性运动看上去很僵硬的原因。</p>
<p>嘿，等一下！我们有一张距离－时间表，并且速度可以通过路程和时间求得，不是吗？接下来我们就尝试计算Boxy不同单位时间内的速度。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig9_large-opt.png" target="_blank" rel="external"><img src="http://p0.qhimg.com/t011b0845a4fe631ea1.png" alt="计算不同单位时间段的速度"></a></p>
<p>计算不同单位时间段的速度。 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig9_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>在这里，我挑选了3个不同的时间段：一段靠近起点，一段在中间位置，还有一段是接近终点的位置。很明显，在这三个时间段内，Boxy速度相同（它运动的路程s1=s2=s3），即1000px／s。由此可见，不管你在上表中选择的是哪个时间段，你会发现Boxy都是以1000px／s的速度移动的。是不是很意外？现实生活中，没有物体能够一直以一个恒定的速度运动；它们起步时速度都比较慢，然后会逐渐增加速度，运动一段时间后，又会在停下来之前减速，但Boxy却是以1000px／s的速度突然起步，接着做匀速运动，并且恰恰是以相同的速度突然停止。这就是为什么Boxy的移动看上去很机械且不自然，接着我们必须重新绘制我们的坐标系来体现这一点。但是在深入研究之前，我们需要了解速度的改变是如何改变距离－时间表的。准备好了吗？接下来的探索将会很有趣。</p>
<p>我们将Boxy的速度提升一倍，来看看坐标图相应地会如何变化。Boxy的初始速度，还是如我们上面计算的那样是1000px／s。因为我们将它的速度变为了两倍，Boxy只需一半时间——也就是0.5秒，就可以走完全程。让我们在坐标图中画出来。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig10_large-opt.png" target="_blank" rel="external"><img src="http://p3.qhimg.com/t016a3c8cd96966370b.png" alt="两倍速度时的坐标图"></a></p>
<p>两倍速度时的坐标图 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig10_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>如果我们将它的速度增加至3倍呢？Boxy只需要三分之一的时间就可以走完全程（也就是1/3秒）。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig11_large-opt.png" target="_blank" rel="external"><img src="http://p3.qhimg.com/t0136e8b23dbeaa5f38.png" alt="三倍速度时的坐标图"></a></p>
<p>三倍速度时的坐标图 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig11_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>嗯，看出什么了吗？我们可以看到，随着速度的增长，坐标图发生变化，这条直线与时间横轴间的夹角也在不断增加。</p>
<p>那好，我们继续将Boxy的速度减半。将它的速度减半意味着Boxy只能在1秒钟内走过500像素（也就是刚刚距离的一半）。然后让我们在坐标图中画出来。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig12_large-opt.png" target="_blank" rel="external"><img src="http://p6.qhimg.com/t0158a16075eacf4bb0.png" alt="一半速度时的坐标图"></a></p>
<p>一半速度时的坐标图 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig12_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>我们将Boxy的速度再放慢一些，让它以原本速度的三分之一运动。这样的话，1秒钟内Boxy就只能走过一开始走过路程的三分之一。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig13_large-opt.png" target="_blank" rel="external"><img src="http://p7.qhimg.com/t01accc2bf891f52d73.png" alt="三分之一速度时的坐标图"></a></p>
<p>三分之一速度时的坐标图 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig13_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>看出规律了吗？我们增加Boxy的速度时，线条越来越陡峭；而减慢Boxy的速度时，线条又变得平滑。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig14_large-opt.png" target="_blank" rel="external"><img src="http://p9.qhimg.com/t0169af68ecb7a6d71b.png" alt="速度增加时直线变陡，减慢时直线变得平缓"></a></p>
<p>速度增加时直线变陡，减慢时直线变得平缓。 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig14_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>这个结论很重要，因为对一条很陡的直线而言，也就是速度更快时，一小段时间内Boxy走过的路程会变化很多。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig15_large-opt.png" target="_blank" rel="external"><img src="http://p2.qhimg.com/t01c21cc078bd03d502.png" alt="对线段更陡的表而言，小段时间相应会在距离上有很大的改变。"></a></p>
<p>对线段更陡的表而言，小段时间相应会在距离上有很大的改变。 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig15_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig16_large-opt.png" target="_blank" rel="external"><img src="http://p0.qhimg.com/t015f17780bd1ef0798.png" alt="对线段更陡的表而言，小段时间相应会在距离上有很大的改变。"></a></p>
<p>对线段更陡的表而言，小段时间相应会在距离上有很大的改变。(<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig16_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>另一方面，对于坡度不那么大的直线，就算过去很长时间，距离上也只会变化一点点，这是运动速度比较慢的情况。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig17_large-opt.png" target="_blank" rel="external"><img src="http://p8.qhimg.com/t01699e55ca96ec49db.png" alt="坡度比较平缓时坐标图中时间和距离的变化关系"></a></p>
<p>坡度比较平缓时坐标图中时间和距离的变化关系 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig17_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig18_large-opt.png" target="_blank" rel="external"><img src="http://p8.qhimg.com/t011b56611c1e410553.png" alt="坡度比较平缓时，坐标图中时间和距离的变化关系"></a></p>
<p>坡度比较平缓时，坐标图中时间和距离的变化关系 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig18_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>以上我们所做的只是改变了Boxy的运动速度，它仍然是在做直线运动。但是，我们以新的方式弄清楚了距离和时间是如何改变速度的，接下来就可以绘制一张表来让Boxy以一种自然、真实的方式运动。</p>
<p>让我们一步一个脚印。首先，现实生活中的物体都是慢慢开始运动，并且逐渐增加运动速度的。所以，我们来模拟这一过程。</p>
<p>仔细观察下图，你会发现起点和终点位置没有变。因为我们不想改变动画的持续时间，也不想改变Boxy的运动距离。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig19_large-opt.png" target="_blank" rel="external"><img src="http://p1.qhimg.com/t0166f30888eb0272a0.png" alt="私人定制的运动曲线"></a></p>
<p>私人定制的运动曲线 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig19_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>Boxy如果照着上面的这张图运动，前0.25秒它的速度会比较慢，因为0秒到0.25秒之间这条线比较平缓，接着它会突然增速（因为0.25秒之后线段突然变陡）。 但是我们需要将这一转变变得平滑，因为我们不想要任何转角——毕竟，这是一条运动曲线。接下来就将这个急转弯换成一条曲线。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig20_large-opt.png" target="_blank" rel="external"><img src="http://p8.qhimg.com/t017802f475cf1c2e4a.png" alt="私人定制的运动曲线"></a></p>
<p>私人定制的运动曲线 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig20_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>留心Boxy从静止状态到逐渐增速过程中平滑的转变。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/xs6l6oW.gif" target="_blank" rel="external"><img src="http://p9.qhimg.com/t0139848eccb1cfdb8f.gif" alt="按照上面那条运动曲线运动的Boxy"></a></p>
<p>按照上面那条运动曲线运动的Boxy (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/xs6l6oW.gif" target="_blank" rel="external">点开看大图</a>)</p>
<p>很好！实际生活中，运动的物体停下来之前速度也是逐渐减慢的。让我们修改坐标图来适应这一变化。类似的，我们会在想要Boxy慢下来的地方增加一个点。就加在0.6秒处怎么样？我已经将这个转折点换成曲线了。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig21_large-opt.png" target="_blank" rel="external"><img src="http://p9.qhimg.com/t01e62c7869c74bf660.png" alt="运动曲线终极版"></a></p>
<p>运动曲线终极版 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig21_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>看Boxy动起来! 现在看上去自然了很多，不是吗?</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/iI5mrff.gif" target="_blank" rel="external"><img src="http://p1.qhimg.com/t01171f1e6f34c6398b.gif" alt="按照终极版运动曲线运动的Boxy"></a></p>
<p>按照终极版运动曲线运动的Boxy (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/iI5mrff.gif" target="_blank" rel="external">点开看大图</a>)</p>
<p>我们用来代替转角的曲线实际上是由很多短线段组成的；并且正如你已经知道的，表中的线段越陡峭，Boxy的运动速度就越快，线段越平缓，Boxy的速度就越慢。看坐标图的左边部分，会发现组成曲线的小线段坡度越来越大，导致速度逐渐增加；相应地，右边部分的线段越来越平缓，所以速度才会越来越慢。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig22_large-opt.png" target="_blank" rel="external"><img src="http://p8.qhimg.com/t01a801b1c9bf2bdaa0.png" alt="一条曲线只是由很多的短线段组成的。"></a></p>
<p>一条曲线只是很多的短线段的集合 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig22_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>就以上我们所知道的，想要弄清楚运动曲线容易了很多。接下来我们来看一些例子。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig23_large-opt.png" target="_blank" rel="external"><img src="http://p5.qhimg.com/t01ad551b479d334a67.png" alt=""></a></p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig23_large-opt.png" target="_blank" rel="external">(点开看大图)</a></p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/Ij44EBG.gif" target="_blank" rel="external"><img src="http://p9.qhimg.com/t010a833a5c28ad96f4.gif" alt="例 1"></a></p>
<p>例 1 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/Ij44EBG.gif" target="_blank" rel="external">点开看大图</a>)</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig24_large-opt.png" target="_blank" rel="external"><img src="http://p2.qhimg.com/t01a666f25b484eeeb3.png" alt=""></a></p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig24_large-opt.png" target="_blank" rel="external">(点开看大图)</a></p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/F4Ve4Xl.gif" target="_blank" rel="external"><img src="http://p1.qhimg.com/t013f39a117a808117a.gif" alt="例 2"></a></p>
<p>例 2 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/F4Ve4Xl.gif" target="_blank" rel="external">点开看大图</a>)</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig25_large-opt.png" target="_blank" rel="external"><img src="http://p1.qhimg.com/t01eb41932ccada2483.png" alt=""></a></p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig25_large-opt.png" target="_blank" rel="external">(点开看大图)</a></p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/a0YYL8I.gif" target="_blank" rel="external"><img src="http://p9.qhimg.com/t0139848eccb1cfdb8f.gif" alt="例 3"></a></p>
<p>例 3 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/a0YYL8I.gif" target="_blank" rel="external">点开看大图</a>)</p>
<h3 id="在UI动画中使用运动曲线"><a href="#在UI动画中使用运动曲线" class="headerlink" title="在UI动画中使用运动曲线"></a>在UI动画中使用运动曲线</h3><p>接下来你需要让一个UI元素动起来，可以将运动曲线为你所用。无论是一个滑杆儿、一个窗口模型，还是一个下拉菜单，增加适量的动画效果让它们看上去平滑自然可以大幅度提高你的用户界面质量。它会让用户对你的界面感觉良好。拿下面的滑出式菜单举个例子：</p>
<p>这是 Nash Vail (<a href="http://codepen.io/nashvail" target="_blank" rel="external">@nashvail</a>)在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上创建的Pen <a href="http://codepen.io/nashvail/pen/qNYmLG/" target="_blank" rel="external">nJial</a>。</p>
<p>点击菜单栏会从左边跳出菜单，但是这个出现的动作显得很生硬。CSS表的第51行将这个动画的<code>transition-timing-function</code> 设置为<code>linear</code>。这个动画效果显然可以优化。让我们使用<a href="http://cubic-bezier.com" target="_blank" rel="external">cubic-bezier</a> 来创建一个私人定制的定时功能。</p>
<p>如果你读到了这里，我猜你一定是个设计师或者开发人员，又或者两者兼是，因此，你对三次贝塞尔曲线一定不会感到陌生，很有可能至少遇到过1次。贝塞尔曲线的创造就是一个奇迹。  它们一开始是被用于计算机图形学来绘制形状，并且被用在<a href="https://www.sketchapp.com/" target="_blank" rel="external">Sketch</a>和<a href="http://www.adobe.com/in/products/illustrator.html" target="_blank" rel="external">Adobe Illustrator</a>这类工具中来绘制矢量图形。三次Bezier曲线使用如此广泛的原因是它们用起来非常方便：我们只需要改变4个不同点的位置，然后创造我们需要的曲线。</p>
<p>我们一般都会知道动画中物体的起点和终点位置，所以可以轻易锁定这两个点。然后就只要找到我们需要改变速度的两点位置。前两个固定的点被称为锚点，剩下的两个又叫控制点。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig28_large-opt.png" target="_blank" rel="external"><img src="http://p8.qhimg.com/t019c04674d1c9e6e94.png" alt="截取的贝塞尔曲线的一部分"></a></p>
<p>截取的贝塞尔曲线的一部分。 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig28_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>正如你所知，<code>cubic-bezier</code> 需要四个参数(<code>n1, n2, n3, n4</code>)来定制 <code>transition-timing-function</code>。这四个参数代表的是两个控制点的位置： <code>n1, n2</code>表示第一个控制点的x、y坐标点，<code>n3, n4</code>则表示第二个控制点的x、y坐标点。改变控制点的位置会使曲线的形状发生变化，<code>n1, n2, n3, n4</code> 全部或部分改变时我们的动画效果也会不一样。 举个例子，下面是传入参数为<code>cubic-bezier(.14, .78, .89, .35)</code>时的结果:</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig29_large-opt.png" target="_blank" rel="external"><img src="http://p0.qhimg.com/t018530bdbc9dd415d1.png" alt="传入参数为`(.14, .78, .89, .35)` 的三次方贝塞尔曲线。"></a></p>
<p>传入参数为<code>(.14, .78, .89, .35)</code> 的三次方贝塞尔曲线。(<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig29_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>这些<a href="https://medium.freecodecamp.com/nerding-out-with-bezier-curves-6e3c0bc48e2f#.113c4usq9" target="_blank" rel="external">隐藏在看似简单的曲线背后的数学知识</a>着实令人着迷。</p>
<p>好了，好了，让我们回想一下初衷：我们想借助<a href="http://cubic-bezier.com" target="_blank" rel="external">三次方贝塞尔曲线</a>来定制<code>过渡时间功能的函数</code>。我们需要的是能够快速滑出，然后速度逐渐慢下来，最后停止的菜单：</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/bezierDemo.gif" target="_blank" rel="external"></a></p>
<p>调整后的三次贝塞尔曲线。 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/bezierDemo.gif" target="_blank" rel="external">点开看大图</a>)</p>
<p>看上去很不错。这个动画会开始很快然后逐渐慢下来，而不是全程都以一个恒定的速度移动。我只是简单地从上文中复制<code>cubic-bezier(.05, .69, .14, 1)</code> 然后拿它替换了<code>linear</code>。</p>
<p>这是Nash Vail (<a href="http://codepen.io/nashvail" target="_blank" rel="external">@nashvail</a>)在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>发布的Pen <a href="http://codepen.io/nashvail/pen/rLvymO/" target="_blank" rel="external">nJial</a>。</p>
<p>看到差别了吧？第二个版本看上去自然了很多，显得更有吸引力。试想，如果你的页面中每个动画都有一个自然定时功能，那将是有多赞啊？</p>
<p>由此可见，运动曲线一点都不复杂，它们理解、使用起来都非常简单。借助它们，你可以将你的UI页面提升一个档次。</p>
<p>我希望你已经明白了运动曲线的工作原理。如果你在使用运动曲线的过程中遇到了一些问题，或者你还根本没有用过它们，目前对你而言，让它们照你的意愿创造漂亮的动画，应该都是很简单的。毕竟，动画效果至关重要。</p>
<p><em>(完)</em></p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@JourneyWT" target="_blank" rel="external">鞠大宝</a><br>链接：<a href="http://www.zcfy.cc/article/1162" target="_blank" rel="external">http://www.zcfy.cc/article/1162</a><br>原文：<a href="https://www.smashingmagazine.com/2016/08/css-animations-motion-curves/" target="_blank" rel="external">https://www.smashingmagazine.com/2016/08/css-animations-motion-curves/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[70个老司机技巧教你更好的进行CSS编程]]></title>
      <url>http://jsgrblog.win/2016/12/10/70%E4%B8%AA%E8%80%81%E5%8F%B8%E6%9C%BA%E6%8A%80%E5%B7%A7%E6%95%99%E4%BD%A0%E6%9B%B4%E5%A5%BD%E7%9A%84%E8%BF%9B%E8%A1%8CCSS%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><strong>CSS 并不总是容易处理。</strong> 在你的能力和经验不够的时候，CSS编程会成为一个噩梦，特别是你不确定为页面元素中选择哪种选择器的时候。使用一个不常见的CSS属性以实现更好的语义化，没有比这个方法更好用的更简单的的实现减少代码复杂度的了。</p>
<p>我们研究了一些很有用的CSS窍门，提示，意见，方法，技巧以及编程解决方案，并在下面列出了他们。我们也把一些开发中会用到却一时无法查到的基础技巧列入其中。</p>
<p>下面列出的<strong>70+条专业CSS建议</strong>可以提高你的CSS编程效率。在文章的结尾可以查阅相关参考文献和文章。<br><a id="more"></a><br>对于那些与读者分享建议，技巧，方法，知识和经验的设计师，我们向他们<strong>表示重心的感谢</strong>。无论是程序员，还是设计师，开发者，信息架构师，不一而足，真的非常感谢。</p>
<p>你可能对我们之前的文章<a href="http://www.smashingmagazine.com/2007/01/19/53-css-techniques-you-couldnt-live-without/" target="_blank" rel="external">离不开的53种Css工具</a><a href="#1">1</a>很感兴趣，这篇文章提供了一个CSS基础技巧的基础工具集，你可能在之后的项目中用到他们。</p>
<p>Update (29/05/2007): <a href="http://www.maujor.com/blog/2007/05/29/70-dicas-para-escrever-css/" target="_blank" rel="external">文章的巴西-葡萄牙语翻译</a><a href="#2">2</a> 也发布了. 在此致谢 Maurício Samy Silva。</p>
<h3 id="1-1-工作流：开始"><a href="#1-1-工作流：开始" class="headerlink" title="1.1. 工作流：开始"></a>1.1. 工作流：开始</h3><ul>
<li><p><strong>当你有了设计图之后，开始于一个空白页。</strong> “页面包括页面的页眉，标题，页面示例，页脚。然后开始添加html标记。再然后添加CSS。这样页面效果看起来更好了。” [<a href="http://cssing.blogspot.com/2006/02/10-css-tips-for-new.html" target="_blank" rel="external">CSSing</a><a href="#17">17</a><a href="#3">3</a>]</p>
</li>
<li><p><strong>使用master样式表</strong> “我观察到初等水平和中等水平开发者都会犯的一个相同的错误，他们都会因为没有移除浏览器的默认CSS样式而困扰。这会导致一个你通过浏览器展现出的设计图与原设计图是矛盾的，最终使很多设计师把这种矛盾归咎于浏览器。当然这是一种误解。因此当你编写网站之前，首先要重置样式表。” [<a href="http://www.crucialwebhost.com/blog/master-stylesheet-the-most-useful-css-technique/" target="_blank" rel="external">Master Stylesheet: The Most Useful CSS Technique</a><a href="#4">4</a>], [Ryan Parr]</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/* master.css */</div><div class="line">@import url(&quot;reset.css&quot;);</div><div class="line">@import url(&quot;global.css&quot;);  </div><div class="line">@import url(&quot;flash.css&quot;);</div><div class="line">@import url(&quot;structure.css&quot;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;style type=&quot;text/css&quot; media=&quot;Screen&quot;&gt;</div><div class="line">   @import url(&quot;css/master.css&quot;);</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>首先重置CSS样式</strong> “你可能经常使用某属性的默认值而不是专门为该属性设置一个值。有的开发者倾向于设置<a href="http://leftjustified.net/journal/2004/10/19/global-ws-reset/" target="_blank" rel="external">Global white space reset</a><a href="#5">5</a> ，在样式表的顶部将所有元素的margin和padding都设置为0。”[<a href="http://www.456bereastreet.com/archive/200503/css_tips_and_tricks_part_1/" target="_blank" rel="external">Roger Johansson</a><a href="#66">66</a><a href="#53">53</a><a href="#49">49</a><a href="#45">45</a><a href="#30">30</a><a href="#23">23</a><a href="#6">6</a>]</p>
</li>
<li><p><strong>编写一个辅助CSS类库</strong>此类库用于辅助调试，但是要避免用于已发布的版本中（将标记层与表现层分离）。 你可以使用如下多种类名(即 <code>...</code>)来调试标记层。 (<em>updated</em>) [<a href="http://www.richardkmiller.com/blog/archives/2006/08/css-best-practices" target="_blank" rel="external">Richard K. Miller</a><a href="#7">7</a>]</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.width100 &#123; width: 100%; &#125;</div><div class="line">.width75 &#123; width: 75%; &#125;</div><div class="line">.width50 &#123; width: 50%; &#125;</div><div class="line">.floatLeft &#123; float: left; &#125;</div><div class="line">.floatRight &#123; float: right; &#125;</div><div class="line">.alignLeft &#123; text-align: left; &#125;</div><div class="line">.alignRight &#123; text-align: right; &#125;</div></pre></td></tr></table></figure>
<ul>
<li>Eric Meyer’s <a href="http://meyerweb.com/eric/thoughts/2007/05/01/reset-reloaded/" target="_blank" rel="external">Global Reset</a><a href="#8">8</a>, <a href="http://www.christianmontoya.com/2007/02/01/css-techniques-i-use-all-the-time/" target="_blank" rel="external">Christian Montoya’s initial CSS file</a><a href="#9">9</a>, <a href="http://businesslogs.com/design_and_usability/my_5_css_tips.php" target="_blank" rel="external">Mike Rundle’s initial CSS file</a><a href="#10">10</a>, <a href="http://www.pingmag.jp/2006/05/18/5-steps-to-css-heaven/" target="_blank" rel="external">Ping Mag’s initial CSS file</a><a href="#11">11</a>.</li>
</ul>
<h3 id="1-2-编写你自己的CSS代码"><a href="#1-2-编写你自己的CSS代码" class="headerlink" title="1.2. 编写你自己的CSS代码"></a>1.2. 编写你自己的CSS代码</h3><ul>
<li><strong>编写你自己的CSS样式之使用master样式表</strong> “编写你自己的CSS有助于未来的网站维护。从主样式表开始。在这个样式表里可以引入<code>reset.css</code>，<code>global.css</code>， <code>flash.css</code>（如果需要的话）和 <code>structure.css</code> ，有时还有布局样式表。下面是一个 “master”样式表的例子以及它是如何嵌入到文件里的：”</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">h2 &#123; &#125;</div><div class="line">#snapshot_box h2 &#123; padding: 0 0 6px 0; font: bold 14px/14px &quot;Verdana&quot;, sans-serif; &#125;</div><div class="line">#main_side h2 &#123; color: #444; font: bold 14px/14px &quot;Verdana&quot;, sans-serif; &#125;</div><div class="line">.sidetagselection h2 &#123; color: #fff; font: bold 14px/14px &quot;Verdana&quot;, sans-serif; &#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>编写你自己的样式表之使用标记</strong> “把你的样式表分为具体的部分：即全局样式-（body，paragraphs， lists等），页眉，页面结构，标题，字体样式，导航栏，表单，注释，其他内容。[<a href="http://www.erraticwisdom.com/2006/01/18/5-tips-for-organizing-your-css" target="_blank" rel="external">编写CSS样式表的5个tips</a><a href="#12">12</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`/* ------------------------*/ /* ----------&gt;&gt;&gt; GLOBAL &lt;&lt;&lt;-----------*/ /* ------------------------*/`</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>编写你自己的样式之制作一个内容表</strong> 在你CSS文件的顶部，编写一个内容表。例如，你可以概括出CSS文件所设置样式（header,main,footer等）的不同区域。然后，设置一个大的明显的板块断点来划分这些区域。Then, use a large, obvious section break to separate the areas. [<a href="http://www.pingmag.jp/2006/05/18/5-steps-to-css-heaven/" target="_blank" rel="external">5 Steps to CSS Heaven</a><a href="#89">89</a><a href="#24">24</a><a href="#13">13</a>]</p>
</li>
<li><p><strong>编写你自己的样式表之按字母顺序排列属性</strong> “我忘了我是从哪里得到这个灵感的，但在将CSS属性按字母排序一个月以来，不管你信不信，这个方法使一些特殊的属性很容易找到。” [<a href="http://www.christianmontoya.com/2007/02/01/css-techniques-i-use-all-the-time/" target="_blank" rel="external">Christian Montoya</a><a href="#38">38</a><a href="#14">14</a>]</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">   background: #fdfdfd;</div><div class="line">   color: #333;</div><div class="line">   font-size: 1em;</div><div class="line">   line-height: 1.4;</div><div class="line">   margin: 0;</div><div class="line">   padding: 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>划分单独的代码块</strong>. “这对一些人来说可能是常识，但是有时我看到一些CSS并没有被分解成几部分。这样做可以让你更容易的处理数周、数月甚至数年后的代码。你能够轻而易举的找到需要修改的类和元素。如： <code>/* Structure */</code>, <code>/* Typography */</code>等” [<a href="http://www.blogherald.com/2006/09/08/css-tips-and-tricks/" target="_blank" rel="external">CSS Tips and Tricks</a><a href="#15">15</a>]</p>
</li>
<li><p><strong>挂钩，线和铅坠。</strong> “当CSS及其分段都准备就绪，你会开始考虑选择器要钩在哪里，那么接下来就需要依靠在你的标记里使用结构挂钩。这为网站未来的编写和维护创造了优势，也增强了文档的健壮性。” [Ryan Parr]</p>
</li>
<li><p><strong>将样式表分解成单独的代码块</strong> “我把自己的样式表分解成三个单独的代码块。第一部分是直接的元素声明。改变body、一些links样式、一些header样式，以及重置窗体的margin和padding等等。 […] 在元素声明之后是类声明：一些像错误信息或者callout的东西会放在这里。 [..] 最后我开始声明主容器，然后对这个容器里的元素样式进行缩进。扫视之后我就能看清楚我的页面是如何划分的，而且找一些东西也会变得很容易。即使容器里没有任何内容我也会声明它。” [<a href="http://snook.ca/archives/html_and_css/top_css_tips/" target="_blank" rel="external">Jonathan Snook</a><a href="#68">68</a><a href="#34">34</a><a href="#18">18</a><a href="#16">16</a>]</p>
</li>
</ul>
<h3 id="1-3-工作流程：处理ID、类、选择器和属性。"><a href="#1-3-工作流程：处理ID、类、选择器和属性。" class="headerlink" title="1.3. 工作流程：处理ID、类、选择器和属性。"></a>1.3. 工作流程：处理ID、类、选择器和属性。</h3><ul>
<li><p><strong>使容器保持最小化。</strong> “将你的文档从结构臃肿中拯救出来。新手开发者倾向于使用很多类似于表格单元格的DIV来实现布局。实际上许多其他结构元素都可以用来实现布局。不要使用过多的DIV。在使用过多的包装（DIV）去实现效果前考虑所有的选择，会发现使用一点漂亮的CSS也能达到相同的预期效果。” [Ryan Parr]</p>
</li>
<li><p><strong>使属性保持最少化</strong> “工作时要多思考而不是纠结于CSS。在这条规则之下会衍生出很多子规则：如果添加一个CSS属性不是必需的，那么不要添加；如果你不确定为什么要添加一个CSS属性，不要添加；如果你感觉同一个属性添加了很多次，那么把它们找出来处理后只添加一次。” [<a href="http://cssing.blogspot.com/2006/02/10-css-tips-for-new.html" target="_blank" rel="external">CSSing</a><a href="#17">17</a><a href="#3">3</a>]</p>
</li>
<li><p><strong>使选择器保持最小化</strong> “避免不必要的选择器。使用较少的选择器意味着在实现特殊样式时所重写的选择器也较少-这更有利于故障排除。” [<a href="http://snook.ca/archives/html_and_css/top_css_tips/" target="_blank" rel="external">Jonathan Snook</a><a href="#68">68</a><a href="#34">34</a><a href="#18">18</a><a href="#16">16</a>]</p>
</li>
<li><p><strong>使CSS hack保持最少</strong> “除非遇到了已知的已公布的bug，否则不要使用hack。这是一个很重要的要点，因为我也经常看到hack被用来处理一些压根儿就没有问题的东西。如果你发现需要找一个hack来处理某个设计中的问题，那么首先你需要做一些调查（Google这里能派上用场），然后试着鉴定一下你遇到的这个问题（是否真的需要hack来处理）。[<a href="http://www.search-this.com/2007/03/26/10-quick-tips-for-an-easier-css-life/" target="_blank" rel="external">10 Quick Tips for an easier CSS life</a><a href="#19">19</a>]</p>
</li>
<li><p><strong>在敏捷开发中使用CSS常量</strong> “常量的概念-通过你的代码可以使用的固定值是有用的。有一种应对CSS中缺乏常量的方法是在CSS文件顶部注释中添加一些相关的定义来定义‘常量’。这种方法常见的一种应用是‘创建颜色词汇表’。这种方法可以让你对网站中使用的颜色有一个快速的参考，避免在使用颜色时失误，并且一旦你需要修改颜色，你可以马上利用这个速查表进行搜索和替换。” [<a href="http://24ways.org/2006/faster-development-with-css-constants" target="_blank" rel="external">Rachel Andrew</a><a href="#20">20</a>]</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">   # Dark grey (text): #333333</div><div class="line">   # Dark Blue (headings, links) #000066</div><div class="line">   # Mid Blue (header) #333399</div><div class="line">   # Light blue (top navigation) #CCCCFF</div><div class="line">   # Mid grey: #666666 #</div><div class="line">*/</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>使用一个通用的命名系统。</strong> 在寻找bug或者更新文件时，如果你有一个id和class的命名系统会节省很多时间。特别是大型的CSS文件，如果命名不规范，很快就会导致巨大的混乱。我推荐使用<code>parent_child</code>模式。 [<a href="http://christopher-scott.org/blog/10-css-tips-you-might-not-have-known-about" target="_blank" rel="external">10 CSS Tips</a><a href="#67">67</a><a href="#43">43</a><a href="#21">21</a>]</p>
</li>
<li><p><strong>根据class和id的语义适当的为他们命名。</strong> “我们倾向于避免表明表象方面的命名。否则，如果我们命名一些右列的东西，完全可能改变CSS并且“右列”最终在页面的左边显示。这在未来可能导致混乱，所以最好避免这种表象的命名方案。 [<a href="http://www.digital-web.com/articles/markup_as_craft/" target="_blank" rel="external">Garrett Dimon</a><a href="#22">22</a>]</p>
</li>
<li><p><strong>分类常见的CSS声明选择器。</strong> “分类选择器。当一些元素类型，类或者id共享一些属性时，你可以分类选择器避免在有些时候设置了相同的属性。这将会节省潜在的大量空间。” [<a href="http://www.456bereastreet.com/archive/200503/css_tips_and_tricks_part_1/" target="_blank" rel="external">Roger Johansson</a><a href="#66">66</a><a href="#53">53</a><a href="#49">49</a><a href="#45">45</a><a href="#30">30</a><a href="#23">23</a><a href="#6">6</a>]</p>
</li>
<li><p><strong>将你可能会重复使用很多次某个唯一的属性单独分离出来。</strong> “如果你发现你使用某个唯一的属性很多次，为了使你不再一遍又一遍的重复不仿将其分离出来，而且也使你能够改变网站中所有使用过此属性的部分的显示。” [<a href="http://www.pingmag.jp/2006/05/18/5-steps-to-css-heaven/" target="_blank" rel="external">5 Steps to CSS Heaven</a><a href="#89">89</a><a href="#24">24</a><a href="#13">13</a>]</p>
</li>
<li><p><strong>尽量将id和class的命名持平文档树</strong> 尽可能的使用 <a href="http://www.456bereastreet.com/archive/200509/css_21_selectors_part_1/" target="_blank" rel="external">上下文选择器</a><a href="#25">25</a> 。不要担心这样做会使选择器变得冗长。长的选择器会使css文档更容易阅读，也减少了发展成 classitis 或者 <a href="http://juicystudio.com/article/div-mania.php" target="_blank" rel="external">divitis</a><a href="#26">26</a>的可能。[<a href="http://placenamehere.com/article/156/TenSimpleCSSTips" target="_blank" rel="external">Chric Casciano</a><a href="#76">76</a><a href="#41">41</a><a href="#27">27</a>]</p>
</li>
<li><p><strong>学会利用CSS级联的特性</strong> “比方说你的网站里有两个相似的有些许不同的盒模型-你可以分别为每个盒模型写好CSS样式，也可以为两个盒模型写一个CSS样式，然后再下面写出两个盒模型的不同属性样式来区分两个盒模型。” [<a href="http://www.pingmag.jp/2006/05/18/5-steps-to-css-heaven/" target="_blank" rel="external">5 Steps to CSS heaven</a><a href="#28">28</a>]</p>
</li>
<li><p><strong>使用实用标签: <code>&lt;small&gt;</code>, <code>&lt;em&gt;</code> 和 <code>&lt;strong&gt;</code></strong> “很多时候在设计中会设置一个对各种印刷权重做出要求的部分，比如设置为同一行或者字与字之间间距很近。这些设置分散在各个div和class中，我觉得它们不符合语义化，而且会干扰你一直遵循的良好的XHTML准则。” 建议使用语义化标签代替这些设置。[<a href="http://businesslogs.com/design_and_usability/my_5_css_tips.php" target="_blank" rel="external">Mike Rundle’s 5 CSS Tips</a><a href="#29">29</a>]</p>
</li>
</ul>
<h3 id="1-4-工作流程-使用简写标记"><a href="#1-4-工作流程-使用简写标记" class="headerlink" title="1.4. 工作流程: 使用简写标记"></a>1.4. 工作流程: 使用简写标记</h3><ul>
<li><p><strong>缩写16进制颜色标记。</strong> “在CSS中，一种颜色由三对十六进制数组成，当你使用这种颜色标记时，你可以使用省略每组的第二个数字这种有效率的方法：<code>#000 相当于 #000000, #369 相当于 #336699</code>。 [<a href="http://www.456bereastreet.com/archive/200503/css_tips_and_tricks_part_1/" target="_blank" rel="external">Roger Johansson</a><a href="#66">66</a><a href="#53">53</a><a href="#49">49</a><a href="#45">45</a><a href="#30">30</a><a href="#23">23</a><a href="#6">6</a>]</p>
</li>
<li><p><strong>根据LoVe/HAte排序法定义伪类链接。</strong>: Link, Visited, Hover, Active. “首先确定你了解各种链接样式，然后最好把样式按照“link-visited-hover-active”或者“LVHA”顺序排列。如果你关注焦点样式，那么可以在这之后加入—但是在决定之前看一下这个解释。” [<a href="http://meyerweb.com/eric/css/link-specificity.html" target="_blank" rel="external">Eric Meyer</a><a href="#31">31</a>]</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a:link &#123; color: blue; &#125;</div><div class="line">a:visited &#123; color: purple; &#125;</div><div class="line">a:hover &#123; color: purple; &#125;</div><div class="line">a:active &#123; color: red; &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>按照TRouBLed排序法定义元素的margin, padding 或者border </strong>: Top, Right, Bottom, Left. “这里介绍一个简写定义元素的margin,padding或border的方法，从top开始按照顺时针：Top, Right, Bottom, Left。” [<a href="http://www.456bereastreet.com/lab/developing_with_web_standards/css/" target="_blank" rel="external">Roger Johansson</a><a href="#44">44</a><a href="#32">32</a>]</p>
</li>
<li><p><strong>你可以使用 <a href="http://www.456bereastreet.com/archive/200502/efficient_css_with_shorthand_properties/" target="_blank" rel="external">简写属性</a><a href="#33">33</a>.</strong> “为 <code>margin</code>, <code>padding</code> and <code>border</code> 使用简写属性可以节省很大空间。”</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">margin: top right bottom left;</div><div class="line">margin: 1em 0 2em 0.5em;</div><div class="line">(margin-top: 1em; margin-right: 0; margin-bottom: 2em; margin-left: 0.5em;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">border: width style color;</div><div class="line">border: 1px solid #000;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">background: color image repeat attachment position;</div><div class="line">background: #f00 url(background.gif) no-repeat fixed 0 0;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">font: font-style (italic/normal) font-variant (small-caps) font-weight font-size/line-height font-family;</div><div class="line">font: italic small-caps bold 1em/140% &quot;Lucida Grande&quot;,sans-serif;</div></pre></td></tr></table></figure>
<h3 id="1-5-工作流程-设置字体"><a href="#1-5-工作流程-设置字体" class="headerlink" title="1.5. 工作流程: 设置字体"></a>1.5. 工作流程: 设置字体</h3><ul>
<li><strong>在body标签里设置字号为62.5%从而像使用px一样使用EM</strong>. <code>font-size</code>的默认值是16px; 应用这个规则之后，Em的值大约相当于10px(16 x 62.5% = 10).“我更倾向于在body标签里设置字号为:62.5%。这种方法能够在考虑px时使用em去指定大小，例如，1.3em几乎相当于1.3px。 ” [<a href="http://snook.ca/archives/html_and_css/top_css_tips/" target="_blank" rel="external">Jonathan Snook</a><a href="#68">68</a><a href="#34">34</a><a href="#18">18</a><a href="#16">16</a>]<br>（译者注：经众成翻译用户[拉着你的手说爱你]提示，在chrome中默认最小字体12px，所以这种方法在chrome中不适用。）</li>
</ul>
<ul>
<li><strong>使用通用字符集进行编码</strong>. “[..] 答案就是使用单独的通用字符集去覆盖大部分异常事件。幸运的是这种字符集是存在的：基于Unicode的UTF-8。Unicode是一种行业标准，是为了使所有语言的文字和符号能够为电脑一视同仁的所表示和操控而设计的。 UTF- 8 应该像这样包含在你的网页页头中。” [<a href="http://www.netmag.co.uk/zine/design-tutorials/20-pro-tips" target="_blank" rel="external">20 pro tips</a><a href="#77">77</a><a href="#71">71</a><a href="#36">36</a><a href="#35">35</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/ html;charset=utf-8&quot; /&gt;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>你可以使用CSS来切换大写。</strong> 如果你需要吧一些东西转换成大写，比如一个标题，又不行重写一个副本，那么可以使用CSS来进行这项无聊的工作。下面的代码会将目标h1的所有文本转化为大写，无论是什么格式”。 [<a href="http://www.netmag.co.uk/zine/design-tutorials/20-pro-tips" target="_blank" rel="external">20 pro tips</a><a href="#77">77</a><a href="#71">71</a><a href="#36">36</a><a href="#35">35</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`h1 &#123; text-transform: uppercase; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>你可以用small-caps自动显示文本。</strong>  <code>font-variant</code> 属性是用来显示小型大写字母文本，这其中所有的小写字母被转化为大写字母，但是所有的小型大写字母下的文本相比其余的文本字号较小。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`h1 &#123; font-variant: small-caps; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>定义通用字体类型来覆盖通用设置。</strong> “当我们声明一个设计中使用的特定字体时，我们会希望这种字体以及在用户的系统中安装。简单的说如果他们的系统没有安装这个字体，那么将无法看到这个字体。我们需要做的就是参考用户在他们机器上可能会安装的字体，比如下面的font-family属性。我们完成一个通用字体类型是非常重要的。”[<a href="http://www.communitymx.com/content/article.cfm?cid=FAF76&amp;print=true" target="_blank" rel="external">Getting into good coding habits</a><a href="#37">37</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`p &#123; font-family: Arial, Verdana, Helvetica, sans-serif; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>将<code>line-height</code>设置为1.4em – 1.6em。</strong> “<code>line-height:1.4</code>”为易读的行，合理的行高避免了行超过10个字而过长，而且颜色对比也不会太不明显。比如，对于过亮的CRT显示屏来说，纯黑色在纯白色的背景下往往对比太强烈，因此我尝试运用米白色(<code>#fafafa</code>是一个好的选择)和暗灰色（<code>#333333</code>也不错）。” [<a href="http://www.christianmontoya.com/2007/02/01/css-techniques-i-use-all-the-time/" target="_blank" rel="external">Christian Montoya</a><a href="#38">38</a><a href="#14">14</a>]</p>
</li>
<li><p><strong>设置 <code>html</code>-元素为100.01%。</strong> 这个针对字号的奇怪100.01%会对几个浏览器bug进行弥补。首先，设置一个默认的body百分比字号（而不是em）消除了IE/Win系统中的字体缩放比例问题，即使之后在其它元素中设置为em。此外，一些版本的Opera浏览器会设置一个比其他浏览器小的100%的默认字号。另一方面，Safari浏览器却有一个101%字号的问题。目前流行的最佳解决方案是针对这个属性设置为100.01%的值。” [<a href="http://www.communitymx.com/content/article.cfm?cid=FAF76&amp;print=true" target="_blank" rel="external">CSS: Getting into good habits</a><a href="#39">39</a>]</p>
</li>
</ul>
<h3 id="1-6-工作流程-调试"><a href="#1-6-工作流程-调试" class="headerlink" title="1.6. 工作流程: 调试"></a>1.6. 工作流程: 调试</h3><ul>
<li><strong>添加边框以确定容器</strong> “在构建文档或者调整布局问题时使用大量的测试样式，比如额外的边框或者背景颜色。<code>div { border:1px red dashed; }</code>就像一个小装饰品。这里有 <a href="http://www.squarefree.com/bookmarklets/webdevel.html" target="_blank" rel="external">应用边框的书签</a><a href="#40">40</a> ，并且还能为你做其它事情。” 你也可以使用 <code>* { border: 1px solid #ff0000; }</code>. [<a href="http://placenamehere.com/article/156/TenSimpleCSSTips" target="_blank" rel="external">Chric Casciano</a><a href="#76">76</a><a href="#41">41</a><a href="#27">27</a>]. 为元素添加一个边框来认清它们，这样有助于识别正常情况下不易察觉的重叠部分或者额外的空白部分。[<a href="http://www.mezzoblue.com/css/cribsheet/" target="_blank" rel="external">CSS Crib Sheet</a><a href="#69">69</a><a href="#42">42</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`* &#123; border: 1px solid #f00; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>在调试前首先检查封闭的元素。</strong> “如果你曾经因为只修改了很少的东西就破坏了你优美的宝贝布局而沮丧，那么很可能是因为没有封闭的元素。[<a href="http://christopher-scott.org/blog/10-css-tips-you-might-not-have-known-about" target="_blank" rel="external">10 CSS Tips</a><a href="#67">67</a><a href="#43">43</a><a href="#21">21</a>]</li>
</ul>
<h3 id="2-1-技术性技巧-IDs-Classes"><a href="#2-1-技术性技巧-IDs-Classes" class="headerlink" title="2.1. 技术性技巧: IDs, Classes"></a>2.1. 技术性技巧: IDs, Classes</h3><ul>
<li><strong>每个页面一个id，每个页面很多class。</strong> “检查你使用的id:文档中只有一个元素能使用某个值的id属性，而共享同一个类名的元素个数是无限制的。[..]class名和id名只能由字母[A-Za-z0-9]和连字符 (-)组成，而且不能由连字符或者数字开头(参考 CSS2 的语法和基本数据类型)。” [<a href="http://www.456bereastreet.com/lab/developing_with_web_standards/css/" target="_blank" rel="external">Roger Johansson</a><a href="#44">44</a><a href="#32">32</a>]</li>
</ul>
<ul>
<li><p><strong>区分选择器中元素名的大小写。</strong> “记住要严格区分大小写。当CSS与XHTML用在一起时，选择器中的元素名是区分大小写的。为了避免这个问题我总是推荐在CSS选择器中使用小写的元素名。class和id属性值在HTML和XHTML中都是区分大小写的，所以要避免混合大小写的class和id名字。”[<a href="http://www.456bereastreet.com/archive/200503/css_tips_and_tricks_part_1/" target="_blank" rel="external">Roger Johansson</a><a href="#66">66</a><a href="#53">53</a><a href="#49">49</a><a href="#45">45</a><a href="#30">30</a><a href="#23">23</a><a href="#6">6</a>]</p>
</li>
<li><p><strong>CSS中的class与id必须是有效的</strong>“即 <a href="http://www.w3.org/TR/html401/types.html#type-id" target="_blank" rel="external">由字母开头</a><a href="#46">46</a>, 而不是数字或者下划线。id必须是唯一的。他们的名字应当 <a href="http://www.w3.org/QA/Tips/goodclassnames" target="_blank" rel="external">具有普遍性</a><a href="#47">47</a>,能够描述功能而不是装装样子。” [<a href="http://learningtheworld.eu/2006/best-practices/#css" target="_blank" rel="external">CSS Best Practices</a><a href="#48">48</a>]</p>
</li>
<li><p><strong>你可以将多个class的名字分配给一个给定的元素。</strong> “你可以将多个class的名字分配给一个元素。这样有利于书写不同的规则来定义不同的属性，并且只在需要的地方应用它们。” [<a href="http://www.456bereastreet.com/archive/200503/css_tips_and_tricks_part_1/" target="_blank" rel="external">Roger Johansson</a><a href="#66">66</a><a href="#53">53</a><a href="#49">49</a><a href="#45">45</a><a href="#30">30</a><a href="#23">23</a><a href="#6">6</a>]</p>
</li>
</ul>
<h3 id="2-2-技术性技巧：充分用好选择器。"><a href="#2-2-技术性技巧：充分用好选择器。" class="headerlink" title="2.2. 技术性技巧：充分用好选择器。"></a>2.2. 技术性技巧：充分用好选择器。</h3><p>Roger Johansson写了一系列关于<a href="http://www.456bereastreet.com/archive/200509/css_21_selectors_part_1/" target="_blank" rel="external">CSS 2.1 选择器</a><a href="#50">50</a>的<strong>非常</strong>有实用性的文章。这篇文章 <strong>重磅推荐</strong>  – 下面会列举其中一些有用的方面。要注意IE6及其更早的版本是不支持选择器  ‘&gt;’ 和 ‘+’的。 (<em>updated</em>).</p>
<ul>
<li><strong>你可以使用子选择器</strong> “一个子选择器指向某个元素的直接孩子。一个子选择器由两个或者更多的选择器组成，这些选择器由大于号“&gt;”分割。父类在大于号“&gt;”的左边，并且选择符和选择器之间允许出现空格。这个规则会影响所有div元素下的strong元素。  [<a href="http://www.456bereastreet.com/archive/200510/css_21_selectors_part_2/" target="_blank" rel="external">Roger Johansson</a><a href="#52">52</a><a href="#51">51</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`div &gt; strong &#123; color:#f00; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>你可以使用相邻选择器。</strong> 一个相邻选择器由两个简单的选择器组成，这两个选择器由加号“+”分开。相邻选择器内部允许出现空格。这个选择器匹配一个元素，这个元素是前一个元素的相邻元素。这两个元素必须有相同的父元素，并且第一个元素必须是紧挨第二个元素。[<a href="http://www.456bereastreet.com/archive/200510/css_21_selectors_part_2/" target="_blank" rel="external">Roger Johansson</a><a href="#52">52</a><a href="#51">51</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`p + p &#123; color:#f00; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>你可以使用属性选择器。</strong> 属性选择器匹配的元素是基于这个属性的存在或值。下面是四条属性选择器的匹配情况：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[att] 匹配包含att属性的元素，无论它是什么值。</div><div class="line">[att=val] 匹配包含属性att值为“val”的元素。</div><div class="line">[att~=val] 匹配含属性att，且att的值中包含“val”的元素。这种情况下“val”中不能包含空格。</div><div class="line">[att|=val] 匹配含属性att且值为连字号分割的开头为“val”的元素。这种匹配主要用于匹配由lang属性(xml:lang in XHTML)指定的语言码，即 “en”, “en-us”, “en-gb”等。</div></pre></td></tr></table></figure>
<ul>
<li>下面规则中的选择器匹配含<code>title</code>属性的<code>p</code>元素，无论它是什么值：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`p[title] &#123; color:#f00; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li>这个选择器匹配所有的class属性值为error的div元素:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`div[class=error] &#123; color:#f00; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li>多属性的选择器可以用于同一个选择器。这个方法可以实现对同一个元素的不同属性的匹配。下面的规则将适用于所有类值为“quate”且包含cite属性的blockquote元素：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`blockquote[class=quote][cite] &#123; color:#f00; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>你也可以使用后代选择器。</strong> “后代选择器可以帮助你从你的标记中消除很多类属性，从而是你的CSS选择器更加的有效。 ” [<a href="http://www.456bereastreet.com/archive/200503/css_tips_and_tricks_part_1/" target="_blank" rel="external">Roger Johansson</a><a href="#66">66</a><a href="#53">53</a><a href="#49">49</a><a href="#45">45</a><a href="#30">30</a><a href="#23">23</a><a href="#6">6</a>]</li>
</ul>
<h3 id="2-3-技术性技巧-样式链接"><a href="#2-3-技术性技巧-样式链接" class="headerlink" title="2.3.技术性技巧:样式链接"></a>2.3.技术性技巧:样式链接</h3><ul>
<li><p><strong>如果你使用锚，在设计链接时要小心。</strong> “如果你在代码中使用了经典的锚(<code>&lt;a name=&quot;anchor&quot;&gt;</code>) ，那么你会注意到它失去了<code>:hover</code>和<code>:active</code> 伪类作用。为了避免这种情况，你需要为锚设置<code>id</code>而不是用<a href="http://dbaron.org/css/1999/09/links" title="Notes on suggesting link styles" target="_blank" rel="external">略晦涩难懂</a><sup><a href="https://hackhands.com/70-Expert-Ideas-For-Better-CSS-Coding/#54" target="_blank" rel="external">54</a></sup>的语法： <code>:link:hover, :link:active</code>来设计。” [<a href="http://www.mezzoblue.com/css/cribsheet/" target="_blank" rel="external">Dave Shea</a><a href="#55">55</a>]</p>
</li>
<li><p><strong>为链接定义关系。</strong> “rel属性是用来从一个资源指向另一个资源表示语义链接关系。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a[rel~=&quot;nofollow&quot;]::after &#123; content: &quot;2620&quot;; color: #933; font-size: x-small; &#125;</div><div class="line">a[rel~=&quot;tag&quot;]::after &#123; content: url(http://www.technorati.com/favicon.ico); &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>“这些使用空格分隔的值列表的属性选择器。包含这些值的关系的任何一个元素将会被匹配。含禁止链接关联的链接将会伴随一个暗红色的骷髅头（？）而标签关联的链接将会伴随一个Technocrati图标。” [<a href="http://lachy.id.au/log/2005/04/handy-css" target="_blank" rel="external">Handy CSS</a><a href="#90">90</a><a href="#57">57</a><a href="#56">56</a>]</p>
</li>
<li><p>你可以自动标记外部链接。许多人利用非标准关联 <code>rel=&quot;external&quot;</code>来指定一个外部站点的链接。然而，把它添加到每一个link上是消耗时间并且没有必要的。这个样式规则将会使网站上的外部链接放在一个东北向箭头上。[<a href="http://lachy.id.au/log/2005/04/handy-css" target="_blank" rel="external">Handy CSS</a><a href="#90">90</a><a href="#57">57</a><a href="#56">56</a>]</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`a[href^=&quot;http://&quot;]:not([href*=&quot;smashingmagazine.com&quot;])::after &#123; content: &quot;2197&quot;; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>你可以使用 <code>outline: none;</code>来去除链接的虚线</strong>使用 <code>outline: none;</code><a href="http://sonspring.com/journal/removing-dotted-links" target="_blank" rel="external">去除链接虚线</a><a href="#58">58</a>：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`a:focus &#123; outline: none; &#125;`</div></pre></td></tr></table></figure>
<h3 id="2-4-技术性技巧-CSS-Techniques"><a href="#2-4-技术性技巧-CSS-Techniques" class="headerlink" title="2.4. 技术性技巧: CSS-Techniques"></a>2.4. 技术性技巧: CSS-Techniques</h3><ul>
<li><p><strong>你可以指定body标签的id。</strong> “大多数情况下在body标签上设置一个id有助于操作CSS的表面条目及标记页面的基础元素。你不仅仅可以组织你的章节，而且还可以在不改变模板和标记的情况下创建多个CSS样式。” [Ryan Parr, <a href="http://alistapart.com/articles/bodyswitchers" target="_blank" rel="external">Invasion of Body Switchers</a><a href="#59">59</a>]</p>
</li>
<li><p><strong>你可以通过CSS创建高度相等的列。</strong> <a href="http://www.positioniseverything.net/articles/onetruelayout/equalheight" target="_blank" rel="external">等高技术</a><a href="#60">60</a>: 使所有列展示为相同高度的方法。但是没有伪列式背景图片的需要。 <a href="http://www.alistapart.com/articles/fauxcolumns/" target="_blank" rel="external">伪列</a><a href="#61">61</a>: 结合背景图片。</p>
</li>
<li><p><strong>你可以使CSS垂直对齐。</strong> “比方说一个导航菜单，高度指定为2em。解决方法：在CSS中将行高设置为与盒子高度相同。 在这种情况下，盒子高度是2em，因此我们可以在CSS规则中设置line-height：2em，那么盒子中的文本将会浮动在中间位置。” [<a href="http://evolt.org/article/rdf/17/60369/" target="_blank" rel="external">Evolt.org</a><a href="#62">62</a>]</p>
</li>
<li><p><strong>你可以使用伪元素和类来动态生成内容。</strong> <a href="http://www.456bereastreet.com/archive/200510/css_21_selectors_part_3/" target="_blank" rel="external">伪类和伪元素</a><a href="#63">63</a>. 伪类和伪元素可以用来格式化元素，这些元素的信息都是在文档树中无法得到的。例如，没有元素指向一段的第一行或者一个元素文本的第一个字母。你可以使用 :first-child, :hover, :active, :focus, :first-line, :first-letter, :before, :after and more.</p>
</li>
<li><p><strong>你可以使用<code>&lt;hr&gt;</code>来优雅的分隔帖子。</strong> “重新设计的水平规则 (</p>
</li>
</ul>
<hr>
<p>) 结合图片将会给网页很大程度的加分。[<a href="http://www.richardkmiller.com/blog/archives/2006/08/css-best-practices" target="_blank" rel="external">CSS: Best Practices</a><a href="#64">64</a>]</p>
<ul>
<li><strong>你可以在每页上都是用相投的导航(X)HTML代码。</strong> “大多数网站突出了用户位置的导航栏。但是这样会很痛苦，因为你必须调整每一个页面的导航栏后面的HTML代码。能不能找到一个两全其美的方法呢？” [<a href="http://www.sitepoint.com/article/top-ten-css-tricks" target="_blank" rel="external">Ten More CSS Tricks you may not know</a><a href="#65">65</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">   &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;home&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;</div><div class="line">   &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;about&quot;&gt;About us&lt;/a&gt;&lt;/li&gt;  </div><div class="line">   &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;contact&quot;&gt;Contact us&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<ul>
<li>将一个<code>id</code> 加入到 <code>body</code> 标签中。这个id应该能表现出网站中用户的位置，并且当用户访问站点的不同部分时也能随之变化。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`#home .home, #about .about, #contact .contact &#123;  commands for highlighted navigation go here &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>使用<code>margin: 0 auto;</code> 实现水平居中布局。</strong> “要实现用CSS水平居中一个元素，你需要指定这个元素的宽度和水平的margin。” [Roger Johansson]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`&lt;div id=&quot;wrap&quot;&gt; &lt;!-- Your layout goes here --&gt; &lt;/div&gt;`</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`#wrap &#123; width:760px; /* Change this to the width of your layout */  margin:0 auto; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>你可以将CSS样式添加到RSS源。</strong> “你可以用XSL样式表做很多事情（将链接转化为可点击链接等），但是CSS可以使非专业人员对你的代码不那么恐惧。 [Pete Freitag]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`&lt;?xml version=&quot;1.0&quot; ?&gt; &lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;http://you.com/rss.css&quot; ?&gt;  ...`</div></pre></td></tr></table></figure>
<ul>
<li><strong>你可以隐藏旧浏览器的CSS。</strong> “从旧的浏览器隐藏CSS文件的一种常用方法是使用 <code>@import</code>的诀窍。 [<a href="http://www.456bereastreet.com/archive/200503/css_tips_and_tricks_part_1/" target="_blank" rel="external">Roger Johansson</a><a href="#66">66</a><a href="#53">53</a><a href="#49">49</a><a href="#45">45</a><a href="#30">30</a><a href="#23">23</a><a href="#6">6</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`@import &quot;main.css&quot;;`</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>别忘了声明块级元素中的margin和padding。</strong> [<a href="http://christopher-scott.org/blog/10-css-tips-you-might-not-have-known-about" target="_blank" rel="external">10 CSS Tips</a><a href="#67">67</a><a href="#43">43</a><a href="#21">21</a>]</p>
</li>
<li><p><strong>设置宽度或者margin和padding。</strong> “我的经验法则是，如果设置了一个宽度，就不设置margin或padding。同样，如果设置了一个margin或padding，就不设置宽度。处理盒模型是就是会有如此的痛苦，特别是当你处理百分比的那种。所以，我设置外部容器的宽度，然后对其中的元素设置margin和padding。如此一来一切都会顺利。” [<a href="http://snook.ca/archives/html_and_css/top_css_tips/" target="_blank" rel="external">Jonathan Snook</a><a href="#68">68</a><a href="#34">34</a><a href="#18">18</a><a href="#16">16</a>]</p>
</li>
<li><p><strong>避免将padding/border和固定宽度应用到元素中。</strong> “IE5的盒模型是有误的，这带来了一大堆麻烦。这其中有很多解决方案，但是最好是通过设置父元素的padding来避开这个问题，而不是对子元素设置固定宽度。 [<a href="http://www.mezzoblue.com/css/cribsheet/" target="_blank" rel="external">CSS Crib Sheet</a><a href="#69">69</a><a href="#42">42</a>]</p>
</li>
<li><p><strong>提供打印样式。</strong> “你可以像加入一个正规样式一样为你的页面加入一个打印样式：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;print.css&quot; media=&quot;print&quot;&gt;`</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`&lt;style type=”text/css” media=”print”&gt; @import url(print.css); &lt;/style&gt;`</div></pre></td></tr></table></figure>
<ul>
<li>这将确保此CSS只会应用于打印时的页面而不会影响这个页面在屏幕上的显示。应用新的打印样式后你可以确保实现白色背景下的实心黑色文本并且移除多余的特性，极大提高可读性。 <a href="http://www.smashingmagazine.com/2007/02/21/printing-the-web-solutions-and-techniques/" target="_blank" rel="external">More about CSS-based print-Layouts</a><a href="#70">70</a>. [<a href="http://www.netmag.co.uk/zine/design-tutorials/20-pro-tips" target="_blank" rel="external">20 pro tips</a><a href="#77">77</a><a href="#71">71</a><a href="#36">36</a><a href="#35">35</a>]</li>
</ul>
<h3 id="2-5-技术性技巧-IE-调整"><a href="#2-5-技术性技巧-IE-调整" class="headerlink" title="2.5. 技术性技巧: IE 调整"></a>2.5. 技术性技巧: IE 调整</h3><ul>
<li><strong>你可以强制使IE应用透明PNG图片。</strong> “理论上，PNG文件支持各种级别的透明程度；然而，一个IE6的bug阻碍了这个属性的跨浏览器运作。” [<a href="http://blog.outer-court.com/archive/2007-03-30-n51.html" target="_blank" rel="external">CSS Tips, Outer-Court.com</a><a href="#72">72</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#regular_logo &#123; background: url(&apos;test.png&apos;); width:150px; height:55px; &#125;</div><div class="line">* html #regular_logo &#123;</div><div class="line">   background:none;</div><div class="line">   float:left;</div><div class="line">   width:150px;</div><div class="line">   filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src=&apos;test.png&apos;, sizingMethod=&apos;scale&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>你可以在IE中定义<code>min-width</code> 和 <code>max-width</code> 。</strong>[<a href="http://www.sitepoint.com/article/top-ten-css-tricks" target="_blank" rel="external">Ten More CSS Trick you may not know</a><a href="#73">73</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#container &#123;</div><div class="line">   min-width: 600px;</div><div class="line">   max-width: 1200px;</div><div class="line">   width:expression(document.body.clientWidth &lt; 600? &quot;600px&quot; : document.body.clientWidth &gt; 1200? &quot;1200px&quot; : &quot;auto&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>你可以为IE设置条件注释。</strong> “IE/Win条件下最安全的处理方式是使用条件注释。使用微软专有的条件注释感觉起来比CSS hack更有前途。你可以利用这个方法为IE/Win设置一个单独的样式表，这个样式表包含所有使其正确运作的必须的规则。” [<a href="http://www.456bereastreet.com/archive/200503/css_tips_and_tricks_part_2/" target="_blank" rel="external">Roger Johansson</a><a href="#74">74</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`&lt;!--[if IE]&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie.css&quot; /&gt; &lt;![endif]--&gt;`</div></pre></td></tr></table></figure>
<h3 id="工作流程-获得灵感"><a href="#工作流程-获得灵感" class="headerlink" title="工作流程:获得灵感"></a>工作流程:获得灵感</h3><ul>
<li><p><strong>娱乐试验向CSS</strong> “去玩。玩背景图。玩浮动. ” [<a href="http://chunkysoup.net/article/12/AbusingMargins" target="_blank" rel="external">Play with positive and negative margins</a><a href="#75">75</a>. 玩继承和级联规则。就是玩。[<a href="http://placenamehere.com/article/156/TenSimpleCSSTips" target="_blank" rel="external">Chric Casciano</a><a href="#76">76</a><a href="#41">41</a><a href="#27">27</a>]</p>
</li>
<li><p><strong>向别人学习</strong> 从别人优秀的网站中汲取知识。任何网站的HTML都可以轻易的通过查看网页的源代码得到。观察别人是如何做的并把他们的方法应用到自己的中做种。 [<a href="http://www.netmag.co.uk/zine/design-tutorials/20-pro-tips" target="_blank" rel="external">20 pro tips</a><a href="#77">77</a><a href="#71">71</a><a href="#36">36</a><a href="#35">35</a>]</p>
</li>
</ul>
<h3 id="来源及相关"><a href="#来源及相关" class="headerlink" title="来源及相关"></a>来源及相关</h3><ul>
<li><p><a href="http://www.456bereastreet.com/archive/200503/css_tips_and_tricks_part_1/" target="_blank" rel="external">CSS Tips and Tricks</a> by <em>Roger Johansson</em></p>
</li>
<li><p><a href="http://blog.jm3.net/2007/03/16/the-only-ten-things-to-know-about-css/" target="_blank" rel="external">(The Only) Ten Things To Know About CSS</a> by <em>John Manoogian</em></p>
</li>
<li><p><a href="http://www.mezzoblue.com/archives/2003/11/19/css_crib_she/" target="_blank" rel="external">CSS Crib Sheet</a> by <em>Dave Shea</em></p>
</li>
<li><p><a href="http://www.sitepoint.com/article/top-ten-css-tricks" target="_blank" rel="external">My Top Ten CSS Tricks [CSS Tutorials]</a> by <em>Trenton Moss</em></p>
</li>
<li><p><a href="http://blog.outer-court.com/archive/2007-03-30-n51.html" target="_blank" rel="external">CSS Tips</a> by <em>Philipp Lenssen</em></p>
</li>
<li><p><a href="http://www.snook.ca/archives/html_and_css/top_css_tips/" target="_blank" rel="external">Top CSS Tips</a> by <em>Jonathan Snook</em></p>
</li>
<li><p><a href="http://tantek.com/log/2004/09.html#d07t1434" target="_blank" rel="external">Ten CSS tricks — corrected and improved</a> by <em>Tantek Çelik</em></p>
</li>
<li><p><a href="http://www.webcredible.co.uk/user-friendly-resources/css/more-css-tricks.shtml" target="_blank" rel="external">Ten More CSS Trick you may now know</a> by <em>Trenton Moss</em></p>
</li>
<li><p><a href="http://www.christianmontoya.com/2007/02/01/css-techniques-i-use-all-the-time/" target="_blank" rel="external">CSS techniques I use all the time</a> by <em>Christian Montoya</em></p>
</li>
<li><p><a href="http://www.stopdesign.com/log/2005/05/03/css-tip-flags.html" target="_blank" rel="external">CSS Tip Flags</a> by <em>Douglas Bowman</em></p>
</li>
<li><p><a href="http://businesslogs.com/design_and_usability/my_5_css_tips.php" target="_blank" rel="external">My 5 CSS Tips</a> by <em>Mike Rundle</em></p>
</li>
<li><p><a href="http://www.pingmag.jp/2006/05/18/5-steps-to-css-heaven/" target="_blank" rel="external">5 Steps to CSS Heaven</a> by <em>Ping Mag</em></p>
</li>
<li><p><a href="http://lachy.id.au/log/2005/04/handy-css" target="_blank" rel="external">Handy CSS</a> by <em>Lachlan Hunt</em></p>
</li>
<li><p><a href="http://erraticwisdom.com/2006/01/18/5-tips-for-organizing-your-css" target="_blank" rel="external">Erratic Wisdom: 5 Tips for Organizing Your CSS</a> by <em>Thame Fadial</em></p>
</li>
<li><p><a href="http://www.seomoz.org/blog/css-properties-you-probably-never-use" target="_blank" rel="external">15 CSS Properties You Probably Never Use (but perhaps should)</a> by <em>SeoMoz</em></p>
</li>
<li><p><a href="http://christopher-scott.org/blog/10-css-tips-you-might-not-have-known-about" target="_blank" rel="external">10 CSS Tips You Might Not Have Known About</a> by <em>Christopher Scott</em></p>
</li>
<li><p><a href="http://www.alistapart.com/articles/12lessonsCSSandstandards" target="_blank" rel="external">A List Apart: Articles: 12 Lessons for Those Afraid of CSS and Standards</a> by <em>Ben Henick</em></p>
</li>
<li><p><a href="http://www.dkeithrobinson.com/entry/tips_for_a_better_design_review_process/" target="_blank" rel="external">Tips for a better design review process</a> by <em>D. Keith Robinson</em></p>
</li>
<li><p><a href="http://www.netmag.co.uk/zine/design-tutorials/20-pro-tips" target="_blank" rel="external">20 pro tips – .net magazine</a> by <em>Jason Arber</em></p>
</li>
<li><p><a href="http://www.richardkmiller.com/blog/archives/2006/08/css-best-practices" target="_blank" rel="external">CSS Best Practices</a> by <em>Richard K Miller</em></p>
</li>
<li><p><a href="http://www.search-this.com/2007/03/26/10-quick-tips-for-an-easier-css-life/" target="_blank" rel="external">10 Quick Tips for an Easier CSS Life</a> by <em>Paul Ob</em></p>
</li>
<li><p>10 CSS Tips from a Professional CSS Front-End Architect by <em>72 DPI in the shade team blog</em></p>
</li>
<li><p><a href="http://www.d.umn.edu/itss/support/Training/Online/webdesign/css.html#tips" target="_blank" rel="external">Web Design References: Cascading Style Sheets</a> by <em>Laura Carlson</em></p>
</li>
<li><p><a href="http://www.communitymx.com/content/article.cfm?cid=FAF76&amp;print=true" target="_blank" rel="external">Getting Into Good Coding Habits</a> by <em>Adrian Senior</em></p>
</li>
</ul>
<p>This article is by <strong>Vitaly Friedman</strong> from <a href="http://smashingmagazine.com" target="_blank" rel="external">smashingmagazine.com</a>.</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@ziyekkk" target="_blank" rel="external">网瘾少年</a><br>链接：<a href="http://www.zcfy.cc/article/1078" target="_blank" rel="external">http://www.zcfy.cc/article/1078</a><br>原文：<a href="https://hackhands.com/70-Expert-Ideas-For-Better-CSS-Coding/" target="_blank" rel="external">https://hackhands.com/70-Expert-Ideas-For-Better-CSS-Coding/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用CSS相对单位构建可缩放的组件]]></title>
      <url>http://jsgrblog.win/2016/12/10/%E4%BD%BF%E7%94%A8CSS%E7%9B%B8%E5%AF%B9%E5%8D%95%E4%BD%8D%E6%9E%84%E5%BB%BA%E5%8F%AF%E7%BC%A9%E6%94%BE%E7%9A%84%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p><em>这是 <a href="https://ishadeed.com/" target="_blank" rel="external">Ahmad Shadeed</a> 的一篇博客，他为我们列举了使用相对单位的诸多好处。说到<code>em</code>这类相对单位，可能大多数人的第一反应是可以用于设置字体大小，事实上，还有许多其他yong chu用处，比如将字体大小与其他视觉元素的尺寸绑定。</em></p>
<p>在这个动态的世界中，我们所做的任何事情随时都可能发生变化。作为前端开发者，我们也应该使用动态的方法进行布局。<br><a id="more"></a><br>本文将讨论使用CSS相对单位（％，em，或rem）来缩放元素组件中所有UI的方法。我们将举出一些实际的例子，分析各种方法的利弊，最后，还给出了一个使用这种方法建立完整页面的例子。</p>
<h3 id="一个关于字体大小比例的简单例子"><a href="#一个关于字体大小比例的简单例子" class="headerlink" title="一个关于字体大小比例的简单例子"></a>一个关于字体大小比例的简单例子</h3><p><img src="http://p3.qhimg.com/t016c9b944f1a0955a1.jpg" alt=""></p>
<p>这里面包含了三个元素：</p>
<ol>
<li>副标题</li>
<li>主标题</li>
<li>左边框</li>
</ol>
<p>HTML如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;article class=&quot;post&quot;&gt;</div><div class="line">   &lt;a href=&quot;#&quot;&gt;</div><div class="line">     &lt;span class=&quot;post-category&quot;&gt;Featured&lt;/span&gt;</div><div class="line">     &lt;h2 class=&quot;post-title&quot;&gt;Building Dynamic Components is Awesome&lt;/h2&gt;</div><div class="line">   &lt;/a&gt;</div><div class="line">&lt;/article&gt;</div></pre></td></tr></table></figure>
<p>我希望每个元素相当于其他元素都是成比例的，这样当产生缩放时，他们会发生等比例的变化：</p>
<p><img src="http://p6.qhimg.com/t01fd7aab55668ae1b2.jpg" alt=""></p>
<p>假设我们采用绝对单位（px）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.post &#123;</div><div class="line">  border-left: 4px solid #4a90e2;</div><div class="line">&#125;</div><div class="line">.post-category &#123;</div><div class="line">  font-size: 14px;</div><div class="line">  color: #7d7d7d;</div><div class="line">&#125;</div><div class="line">.post-title &#123;</div><div class="line">  font-size: 36px;</div><div class="line">  font-weight: bold;</div><div class="line">  color: #4a90de;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当发生缩放时，要使各部分的比例不变，唯一方法就是重新计算各个元素的字体大小。比如，客户说，他们想让这个区域增大1.5倍，那你就得将字体大小分别调整到 <code>21px</code> 和 <code>54px</code>。</p>
<p>为了使得调整起来更方便，我们可以使用百分比单位。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.post-category &#123;</div><div class="line">  font-size: 85%;</div><div class="line">&#125;</div><div class="line">.post-title &#123;</div><div class="line">  font-size: 135%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码的意思是，<code>font-size</code> 的大小要等于其定义了 <code>font-size</code> 属性的最近父级元素字体大小的 85%。</p>
<p>我们可以给父级元素设置 <code>font-size</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.post &#123;</div><div class="line">  font-size: 24px;</div><div class="line"></div><div class="line">  /* </div><div class="line">    Child elements with % font sizes...</div><div class="line"></div><div class="line">    85%</div><div class="line">    0.85 * 24 = 20.4</div><div class="line"></div><div class="line">    135%</div><div class="line">    1.35 * 24 = 32.4</div><div class="line">  */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你不需要考虑最终的计算值是多少，因为浏览器会自动计算相应的字体大小。对你来说，它只是一个比例而已。</p>
<p><img src="http://p8.qhimg.com/t017c9466decf7cc958.jpg" alt=""></p>
<p>使用 <code>em</code>，我们也可以做到一样的事情。对于字体大小来说，百分比和 em 其实是一样的东西。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.post-category &#123;</div><div class="line">  font-size: 85%;</div><div class="line">  /* the same as */</div><div class="line">  font-size: 0.85em;</div><div class="line">&#125;</div><div class="line">.post-title &#123;</div><div class="line">  font-size: 135%;</div><div class="line">  /* the same as */</div><div class="line">  font-size: 1.35em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们对除了 <code>font-size</code> 之外的属性使用 <code>em</code> 时，计算值的大小仍然基于 <code>font-size</code> 得到的。这和百分比不同，比如，对于使用百分比的 <code>width</code> 属性，它的计算值是由父级元素的 <code>width</code> 属性而不是 <code>font-size</code> 属性得到的。</p>
<p>举个栗子，如果我们设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.post &#123;</div><div class="line">  font-size: 24px;</div><div class="line">  border-left: 0.25em solid #4a90e2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>border-left-width</code> 属性的值会计算得到 <code>6px</code>。</p>
<p>在下面这个demo中，滑动条会改变两个组件的 <code>font-size</code> 值。第一个组件的每个元素的大小都通过像素设置，第二个组件的各个元素大小则都通过 em 设置。</p>
<p><a href="http://codepen.io/shadeed/pen/5037e798ccb88eb220f26540e6886f5c/" target="_blank" rel="external">demo.</a></p>
<p>可以看到，使用 em 时，一切都会成比例缩放。</p>
<h3 id="等比例的按钮"><a href="#等比例的按钮" class="headerlink" title="等比例的按钮"></a>等比例的按钮</h3><p>我们有时需要不同尺寸的按钮。比如，用一个更大尺寸的按钮版本来强调该动作的重要性。使用 <code>em</code>，我们可以轻松的同时增加 <code>font-size</code> 和 <code>padding</code> 的大小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;button class=&quot;button&quot;&gt;Save Settings&lt;/button&gt;</div><div class="line"></div><div class="line">&lt;button class=&quot;button button--medium&quot;&gt;Save Settings&lt;/button&gt;</div><div class="line"></div><div class="line">&lt;button class=&quot;button button--large&quot;&gt;Save Settings&lt;/button&gt;</div></pre></td></tr></table></figure>
<p>如果我们把尺寸都通过像素来设置，那么我们将需要这么做：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.button &#123;</div><div class="line">  font-size: 16px;</div><div class="line">  padding: 10px 16px;</div><div class="line">  border-radius: 3px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.button--medium &#123;</div><div class="line">  font-size: 24px;</div><div class="line">  padding: 15px 24px;</div><div class="line">  border-radius: 4px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.button--large &#123;</div><div class="line">  font-size: 32px;</div><div class="line">  padding: 20px 32px;</div><div class="line">  border-radius: 5px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相反，结合百分比和 em 值，我们可以使尺寸值成比例变化，甚至包括 <code>border-radius</code>！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.button &#123;</div><div class="line">  font-size: 1em; /* Let&apos;s say this computes to 16px */</div><div class="line">  padding: 0.625em 1em; /* 0.1875 * 16 = 10px */</div><div class="line">  border-radius: 0.1875em; /* 0.1875 * 16 = 3px */</div><div class="line">&#125;</div><div class="line"></div><div class="line">.button--medium &#123;</div><div class="line">  font-size: 130%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.button--large &#123;</div><div class="line">  font-size: 160%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它们将成比例缩放：</p>
<p><a href="http://codepen.io/shadeed/pen/f2de84b1d64c07b5085f2e4dadbca4e1/" target="_blank" rel="external">demo.</a></p>
<h3 id="图片宽／高的成比例缩放"><a href="#图片宽／高的成比例缩放" class="headerlink" title="图片宽／高的成比例缩放"></a>图片宽／高的成比例缩放</h3><p>下面是一个需要让头像图片比署名和发表时间稍大的例子。注意图中的蓝色高亮部分。当我们改变 <code>font-size</code> 大小时，它的高度将发生变化。</p>
<p><img src="http://p3.qhimg.com/t015d06d6466d4221e8.jpg" alt=""></p>
<p>HTML如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;bio&quot;&gt;</div><div class="line">  &lt;img src=&quot;author.jpg&quot; alt=&quot;Photo of author Ahmad Shadeed&quot;&gt;</div><div class="line">  &lt;div class=&quot;bio__meta&quot;&gt;</div><div class="line">    &lt;h3&gt;&lt;b&gt;By:&lt;/b&gt; Ahmad Shadeed&lt;/h3&gt;</div><div class="line">    &lt;time&gt;Posted on August 5, 2016&lt;/time&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>我们不仅将字体的尺寸设置为 em 值，图片的宽高也是一样。并且要确保图片质量足够好，不会因为过度放大而失真。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.bio h3 &#123;</div><div class="line">  font-size: 1em;</div><div class="line">&#125;</div><div class="line">.bio time &#123;</div><div class="line">  font-size: 0.875em;</div><div class="line">&#125;</div><div class="line">.bio img &#123;</div><div class="line">  width: 3.125em;</div><div class="line">  height: 3.125em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="成比例变化的边界"><a href="#成比例变化的边界" class="headerlink" title="成比例变化的边界"></a>成比例变化的边界</h3><p>另一种能用 em 值来设置的属性就是 <code>box-shadow</code>。</p>
<p><img src="http://p4.qhimg.com/t0152ef5abbfcbd1243.jpg" alt=""></p>
<p>我们已经知道，边界的大小可以利用 em 值进行放缩。这里，我们将一个内层的 <code>box-shadow</code> 的高度设为 em 值，从而令其随着文本大小进行缩放。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.headline &#123;</div><div class="line">  box-shadow: inset 0 -0.25em 0 0 #e7e7e7;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/shadeed/pen/2ec1144b424ca7017c22fea52aa01494/" target="_blank" rel="external">demo.</a></p>
<p>注意：在为CSS渐变设置断点颜色时，我们也可以使用这种方法，只需要把断点也设为 em 值即可。</p>
<h3 id="给图标留出位置"><a href="#给图标留出位置" class="headerlink" title="给图标留出位置"></a>给图标留出位置</h3><p>假设在左上角要有一个用自定义图标实现的装饰性引号``。我们应该考虑到字体大小发生变化的情况，这时，相对单位就有用武之地了。</p>
<p><img src="http://p5.qhimg.com/t01252ce7226885b2da.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;blockquote class=&quot;quote&quot;&gt;</div><div class="line">  &lt;p&gt;</div><div class="line">    &lt;span&gt;</div><div class="line">      Building dynamic web components using modular design concepts is awesome. </div><div class="line">      &lt;em&gt;- Ahmad Shadeed&lt;/em&gt;</div><div class="line">    &lt;/span&gt;</div><div class="line">  &lt;/p&gt;</div><div class="line">&lt;/blockquote&gt;</div></pre></td></tr></table></figure>
<p>和上面提到的那样，我们将一切都用相对单位来表示。装饰性SVG图标通过伪元素引入，然后，将该伪元素绝对定位，让其父级元素相对定位，大小用相对单位表示，最后用相对单位表示的padding为伪元素留出足够的空间。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">.quote &#123;</div><div class="line">  position: relative;</div><div class="line">  padding: 1.5em 2em;</div><div class="line">  padding-left: 4.5em;</div><div class="line">  border-radius: 0.3125em;</div><div class="line">&#125;</div><div class="line">.quote p &#123;</div><div class="line">  font-size: 2em;</div><div class="line">&#125;</div><div class="line">.quote span &#123;</div><div class="line">  box-shadow: inset 0 -0.25em 0 0 rgba(255, 255, 255, 0.4);</div><div class="line">&#125;</div><div class="line">.quote:before &#123;</div><div class="line">  content: &quot;&quot;;</div><div class="line">  position: absolute;</div><div class="line">  top: 2.125em;</div><div class="line">  left: 1.875em;</div><div class="line">  background: url(&quot;quotes.svg&quot;) no-repeat;</div><div class="line">  height: 1.875em;</div><div class="line">  width: 1.875em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过这种方法，当我们改变字体大小时，所有的东西都能自由缩放。</p>
<p><img src="http://p5.qhimg.com/t01d7514d96ef5ff183.jpg" alt=""></p>
<p>注意这一过程中，各个元素是如何等比例缩放的，这一效果就像在设计软件中我们全选所有元素，然后同时缩放一样！</p>
<p><img src="http://p8.qhimg.com/t01c5a410544cde30a8.gif" alt=""></p>
<p>如果使用的是像素值，那么缩放的效果就会不尽如人意。特别是小图标，它将要不然离文字特别近，要不然就特别远。</p>
<p><img src="http://p1.qhimg.com/t01d0f5adf19f53edf5.jpg" alt=""></p>
<p>示例如下：</p>
<p><a href="http://codepen.io/shadeed/pen/2ec1144b424ca7017c22fea52aa01494/" target="_blank" rel="external">demo.</a></p>
<h3 id="在图片中添加说明文字"><a href="#在图片中添加说明文字" class="headerlink" title="在图片中添加说明文字"></a>在图片中添加说明文字</h3><p>想象一下有排列成这样的一组的图片和说明文字：</p>
<p><img src="http://p7.qhimg.com/t0191cc0e7479a752da.jpg" alt=""></p>
<p>通过字体大小，我们可以实现大部分设计效果，比如向左向上的偏移大小，padding，甚至阴影效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;figure class=&quot;figure&quot;&gt;</div><div class="line">  &lt;img src=&quot;sunrise.jpg&quot; alt=&quot;Sunrise&quot;&gt;</div><div class="line">  &lt;figcaption&gt;The feeling you got from watching the sunrise is amazing.&lt;/figcaption&gt;</div><div class="line">&lt;/figure&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.figure figcaption &#123;</div><div class="line">  position: absolute;</div><div class="line">  top: 1.25em;</div><div class="line">  left: -1.875em;</div><div class="line">  right: 0;</div><div class="line">  padding: 1em;</div><div class="line">  box-shadow: -0.3125em 0.3125em 0 0 rgba(0, 0, 0, 0.15);</div><div class="line">  font-size: 1.75em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/shadeed/pen/c51b4e5d3e635e1bfc8d9fe499c247d6/" target="_blank" rel="external">demo.</a></p>
<h3 id="装饰性背景"><a href="#装饰性背景" class="headerlink" title="装饰性背景"></a>装饰性背景</h3><p>在标题的后面有个黑色的圆形背景：</p>
<p><img src="http://p0.qhimg.com/t018309de496d228476.jpg" alt=""></p>
<p>让我们首先确保其大小能够随着字体大小的变化而变化。除此之外，还有一些更加微妙的细节。border－radius值和虚线的粗细应该也是成比例变化的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;section class=&quot;block&quot;&gt;</div><div class="line">  &lt;h3 class=&quot;block__title&quot;&gt;Content outline&lt;/h3&gt;</div><div class="line">  &lt;div class=&quot;block__content&quot;&gt;</div><div class="line">    &lt;p&gt;Description to be there....&lt;/p&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">.block__title &#123;</div><div class="line">  position: relative;</div><div class="line">  font-size: 1.5em;</div><div class="line">  padding: 0.5em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.block__title:after &#123;</div><div class="line">  content: &quot;&quot;;</div><div class="line">  position: absolute;</div><div class="line">  left: 0.25em;</div><div class="line">  top: 0;</div><div class="line">  width: 2.5em;</div><div class="line">  height: 2.5em;</div><div class="line">  border-radius: 50%;</div><div class="line">  background: #000;</div><div class="line">  opacity: 0.5;</div><div class="line">  transform: scale(1.75);</div><div class="line">&#125;</div><div class="line"></div><div class="line">.block__title:before &#123;</div><div class="line">  content: &quot;&quot;;</div><div class="line">  margin-left: 0.5em;</div><div class="line">  border-bottom: 0.0625em dashed rgba(255, 255, 255, 0.5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>尽可能的使用相对单位，这能使得每一个元素都能自如缩放：<br><a href="http://codepen.io/shadeed/pen/8993265d72b2dc808ed144ff8a448295/" target="_blank" rel="external">demo.</a></p>
<h3 id="带icon的搜索框"><a href="#带icon的搜索框" class="headerlink" title="带icon的搜索框"></a>带icon的搜索框</h3><p>使用带小图标的button是很常见的，不过，你也可以在input中使用小图标。一个很常见的例子就是用一个放大镜的小图标来表示搜索按钮：</p>
<p><img src="http://p2.qhimg.com/t01321f19b5edda68df.jpg" alt=""></p>
<p>小图标通过<code>background-image</code>来放置，并且给input加了padding－left，以防止文字覆盖小图标。当文字尺寸增加时，我们也应该增加小图标的尺寸。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;form class=&quot;search&quot;&gt;</div><div class="line">  &lt;label for=&quot;search&quot;&gt;Enter keyword:&lt;/label&gt;</div><div class="line">  &lt;input type=&quot;search&quot; id=&quot;search&quot; placeholder=&quot;What are you searching about?&quot;&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.search input &#123;</div><div class="line">  width: 25em;</div><div class="line">  font-size: 1em;</div><div class="line">  padding: 0.625em;</div><div class="line">  padding-left: 2.5em;</div><div class="line">  border-radius: 0.3125em;</div><div class="line">  border: 0.125em solid #b4b4b4;</div><div class="line">  background: url(&quot;search.svg&quot;) left 0.625em center/1.5em 1.5em no-repeat;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所有经典尺寸都被设为了相对单位：padding、border、border－radius等等，此外，我们还给背景位置和背景尺寸也设置了相对单位。现在，一切都可以很好的进行缩放了。</p>
<p><a href="http://codepen.io/shadeed/pen/a9eabeb1090744105254dd52fc2f6a6b/" target="_blank" rel="external">demo.</a></p>
<h3 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h3><p>考虑一个典型的表单勾选框，它有一个可以反复切换的开关：</p>
<p><img src="http://p4.qhimg.com/t013112188be137e583.jpg" alt=""></p>
<p>没有什么是我们不能缩放滴！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;&quot; class=&quot;switch&quot;&gt;</div><div class="line">  &lt;p&gt;Do you want to subscribe?&lt;/p&gt;</div><div class="line">  &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;switch&quot; class=&quot;off-screen&quot;&gt;</div><div class="line">  &lt;label for=&quot;switch&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Do you want to subscribe?&lt;/span&gt;&lt;/label&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.switch label &#123;</div><div class="line">  width: 5.625em;</div><div class="line">  height: 2.5em;</div><div class="line">  border: 0.125em solid #b4b4b4;</div><div class="line">  border-radius: 2.5em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.switch label:before &#123;</div><div class="line">  content: &quot;&quot;;</div><div class="line">  right: 0.25em;</div><div class="line">  top: 0.21875em;</div><div class="line">  width: 2em;</div><div class="line">  height: 2em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完美缩放：</p>
<p><a href="http://codepen.io/shadeed/pen/1179b6e57a4fbe914bf099743b4e6945/" target="_blank" rel="external">demo.</a></p>
<h3 id="只在需要的时候限制行宽"><a href="#只在需要的时候限制行宽" class="headerlink" title="只在需要的时候限制行宽"></a>只在需要的时候限制行宽</h3><p>假如有这样一个内容块：</p>
<p><img src="http://p8.qhimg.com/t01c7c34b616fd55eb8.jpg" alt=""></p>
<p>图中，我们还剩余了许多水平空间。当不做任何限制的时候，行的长度可能会太长，以至于看起来不舒服。设置<code>max-width</code>属性可以很好的限制行的长度。我们可能不会选择以像素为单位（正如之前一直提到的，它不能自由缩放）；也可能不会选择百分比，因为只有在更窄的宽度时，100%才会看起来不错。而相对单位则正好满足各项需求。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;hero&quot;&gt;</div><div class="line">  &lt;h2&gt;This is title for this hero section&lt;/h2&gt;</div><div class="line">  &lt;p&gt;And this paragraph is a sub title, as you know I&apos;m writing an article about using em units to build dynamic components.&lt;/p&gt;</div><div class="line">  &lt;a href=&quot;#&quot;&gt;Read about hero&lt;/a&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.hero h2 &#123;</div><div class="line">  margin-bottom: 0.25em;</div><div class="line">  font-size: 1.75em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.hero p &#123;</div><div class="line">  margin-bottom: 1em;</div><div class="line">  max-width: 28.125em; /* limit line length */</div><div class="line">  font-size: 1.25em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.hero a &#123;</div><div class="line">  display: inline-block;</div><div class="line">  background: #4a90e2;</div><div class="line">  padding: 0.7em 1.5em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在行的最大长度已经被限制住了，当行宽变小的时候，行的长度将会如意料中的那样占满整行。</p>
<p><a href="http://codepen.io/shadeed/pen/df7e6366a508171035ab9d5c96683eb5/" target="_blank" rel="external">See the demo.</a></p>
<h3 id="按钮中的SVG小图标"><a href="#按钮中的SVG小图标" class="headerlink" title="按钮中的SVG小图标"></a>按钮中的SVG小图标</h3><p>人们喜欢图标字体的原因之一是，图标大小是随着文本大小自动变化的。不过，这也可以通过小图标实现。</p>
<p><img src="http://p9.qhimg.com/t0189a628d8aa2512c8.jpg" alt=""></p>
<p>我们用em值设置<code>width</code>和<code>height</code>，然后，小图标就会随着字体大小的缩放而成比例变化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;social&quot;&gt;</div><div class="line">    &lt;li class=&quot;social__item&quot;&gt;</div><div class="line">      &lt;a href=&quot;#&quot;&gt;</div><div class="line">        &lt;svg width=&quot;32&quot; height=&quot;32&quot; viewBox=&quot;0 0 32 32&quot;&gt;</div><div class="line">        &lt;!-- SVG Data --&gt;                    </div><div class="line">        &lt;/svg&gt; </div><div class="line">        Like on Facebook</div><div class="line">      &lt;/a&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">    &lt;li class=&quot;social__item&quot;&gt;</div><div class="line">      &lt;a href=&quot;#&quot;&gt;</div><div class="line">        &lt;svg width=&quot;32&quot; height=&quot;32&quot; viewBox=&quot;0 0 32 32&quot;&gt;</div><div class="line">        &lt;!-- SVG Data --&gt;                    </div><div class="line">        &lt;/svg&gt;  </div><div class="line">        Follow on Twitter</div><div class="line">      &lt;/a&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">    &lt;li class=&quot;social__item&quot;&gt;</div><div class="line">      &lt;a href=&quot;#&quot;&gt;</div><div class="line">        &lt;svg width=&quot;32&quot; height=&quot;32&quot; viewBox=&quot;0 0 32 32&quot;&gt;</div><div class="line">        &lt;!-- SVG Data --&gt;                    </div><div class="line">        &lt;/svg&gt; </div><div class="line">        Follow on Dribbble</div><div class="line">      &lt;/a&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.social__item svg &#123;</div><div class="line">  display: inline-block;</div><div class="line">  vertical-align: middle;</div><div class="line">  width: 2.1875em;</div><div class="line">  height: 2.1875em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/shadeed/pen/06fb18a477bd6f2bf4b4f52db4adc424/" target="_blank" rel="external">demo.</a></p>
<h3 id="列表序号"><a href="#列表序号" class="headerlink" title="列表序号"></a>列表序号</h3><p>假如我们给一个列表设计了经典的序号样式。如下所示，设置如下内容，那么最好确保所有元素都能成比例缩放，否则，可能出现如下问题：</p>
<p><img src="http://p4.qhimg.com/t012d7462bb1ca04e84.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;list&quot;&gt;</div><div class="line">  &lt;li&gt;Go to example.com and click on Register&lt;/li&gt;</div><div class="line">  &lt;li&gt;Enter your email address&lt;/li&gt;</div><div class="line">  &lt;li&gt;Pick a strong password&lt;/li&gt;</div><div class="line">  &lt;li&gt;Congrats! You now have an account&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.list li &#123;</div><div class="line">  position: relative;</div><div class="line">  padding-left: 3.125em;</div><div class="line">  margin-bottom: 1em;</div><div class="line">  min-height: 2.5em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.list li:before &#123;</div><div class="line">  font-size: 1em;</div><div class="line">  width: 2.5em;</div><div class="line">  height: 2.5em;</div><div class="line">  text-align: center;</div><div class="line">  line-height: 2.5em;</div><div class="line">  border-radius: 50%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，就能愉快的缩放了：</p>
<p><a href="http://codepen.io/shadeed/pen/9eb5d1e604e275a2dce29f161aca1809/" target="_blank" rel="external">demo.</a></p>
<h3 id="在列表／警告／模态中定位小图标"><a href="#在列表／警告／模态中定位小图标" class="headerlink" title="在列表／警告／模态中定位小图标"></a>在列表／警告／模态中定位小图标</h3><p>我想你现在应该已经掌握了相对单位的要点，那么就让我们看一些只有例子的demo，进一步的展示相对单位的好处：<br><a href="http://codepen.io/shadeed/pen/67bbdf87c292767549ce1ae0f71861f6/" target="_blank" rel="external">demo.</a></p>
<h3 id="汉堡包菜单图标"><a href="#汉堡包菜单图标" class="headerlink" title="汉堡包菜单图标"></a>汉堡包菜单图标</h3><p>也许你已经通过在元素之外使用伪元素伪造了一个图标。这也是可以缩放的：</p>
<p><a href="http://codepen.io/shadeed/pen/cf7eac4b80b41bd011a6e7699d05bdb1/" target="_blank" rel="external">demo.</a></p>
<h3 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h3><p>我们已经看过如何使用相对单位来控制背景大小。其实，渐变效果中的颜色断点也能通过相对单位来设置。现在就让我们来试试吧：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.box-1 &#123;</div><div class="line">  background: </div><div class="line">    linear-gradient(</div><div class="line">      to right, </div><div class="line">      #4a90e2 0, </div><div class="line">      #4a90e2 0.625em, </div><div class="line">      #1b5dab 0.625em, </div><div class="line">      #1b5dab 1.875em, </div><div class="line">      #4a90e2 0, </div><div class="line">      #4a90e2 3.125em</div><div class="line">    );</div><div class="line">  background-size: 1.25em 100%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/shadeed/pen/c30dacfa463f2862bf845ffd707228b5/" target="_blank" rel="external">See the demo.</a></p>
<h3 id="雪碧图"><a href="#雪碧图" class="headerlink" title="雪碧图"></a>雪碧图</h3><p>用像素来设置一些具有固定大小的元素是更方便的，比如栅格图片。但是，这并不意味着我们就不能通过相对单位来进行设置。如果将背景位置和背景大小通过em结合，我们就可以使用能自由缩放的<a href="https://css-tricks.com/css-sprites/" target="_blank" rel="external">雪碧图</a>了。</p>
<p><a href="http://codepen.io/shadeed/pen/a761b067a8b7094bf58d7c6fe450ece5/" target="_blank" rel="external">See the demo.</a></p>
<hr>
<h3 id="结合em和rem"><a href="#结合em和rem" class="headerlink" title="结合em和rem"></a>结合<code>em</code>和<code>rem</code></h3><p>本文主要使用的是<code>em</code>单位。我们已经确认过，<code>em</code>值是建立在<code>font-size</code>之上的，并且会产生层叠。<code>em</code>还有一个兄弟单位：<code>rem</code>。rem值也是相对的，不过，是相对于根节点的字体大小（e.g.<code>html{}</code>或<code>:root{}</code>）。所以，rem不会和em值一样发生层叠，不过，如果你改变根节点的<code>font-size</code>，rem的值也会相应改变。<br>结合em和rem，我们可以使一些尺寸固定，而让另一些动态变化。例如，你可能希望一些组件中的文字仅仅相对根节点变化，而另一些元素随着更直接的字体大小变化。如下图所示:</p>
<p><img src="http://p5.qhimg.com/t01eac0d726ef186c1c.jpg" alt=""></p>
<p>下面是一个改变直接字体大小对图片大小产生影响的例子：<br><a href="http://codepen.io/shadeed/pen/f7fcc697cb69f606cd45e0a877379337/" target="_blank" rel="external">See the demo.</a></p>
<hr>
<h3 id="使用相对单位建立一个完整的站点"><a href="#使用相对单位建立一个完整的站点" class="headerlink" title="使用相对单位建立一个完整的站点"></a>使用相对单位建立一个完整的站点</h3><p>我创建了一个完整的页面来演示我们如何应用动态组件的概念到现实需求中，而不是仅仅写一些小的demo。</p>
<p><img src="http://p7.qhimg.com/t018916a1889ca7c6e7.jpg" alt=""></p>
<p>这里的一切都是可动态变化的：logo、标签、标题、作者、小节标题、有序列表、表单输入框、按钮、引用。。。</p>
<p><img src="http://p7.qhimg.com/t0193912417769614a6.jpg" alt=""></p>
<p>如果我们将浏览器的默认字体大小从16px增加至20px，下面是整个站点的变化情况：</p>
<p><img src="http://p7.qhimg.com/t01ca5b3a5514f551e4.gif" alt=""></p>
<p>这个效果很棒，对不对？你一定注意到了除了字体之外，其他元素也是动态变化的。这就是<code>em</code>的魅力所在！ ?<br><a href="http://codepen.io/shadeed/full/d616aee645f87445b88df2a47d91dc95/" target="_blank" rel="external">Check out the full page demo.</a></p>
<p>注意，字体大小也会因为媒体查询而变化。</p>
<h3 id="放大"><a href="#放大" class="headerlink" title="放大"></a>放大</h3><p>我们提出的基于em值的设计方式也是和浏览器放大效果兼容的。</p>
<p><img src="http://p2.qhimg.com/t01b7709dc9b4055008.jpg" alt=""><br>然而，基于像素的设计就会出现一些问题：</p>
<p><img src="http://p1.qhimg.com/t011d926b22b1c41ce7.jpg" alt=""></p>
<h3 id="em的挑战"><a href="#em的挑战" class="headerlink" title="em的挑战"></a><code>em</code>的挑战</h3><p>使用em值时，有一样事情要特别注意，那就是当你设置字体大小时，它是基于最近的父级元素明确声明的字体大小值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.parent &#123;  </div><div class="line">  font-size: 20px;</div><div class="line">  .child &#123; </div><div class="line">    /* This is based on 20px, so it&apos;s 30px */</div><div class="line">    font-size: 1.5em;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我想，我们已经把这点说的够明白了。<br>但是，当我们将其他属性的尺寸设为em值时，它基于的值是当前元素新计算出来的字体大小值。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.parent &#123;</div><div class="line">  font-size: 20px;</div><div class="line">  .child &#123;</div><div class="line"></div><div class="line">    /* This is based on 20px, so it&apos;s 30px */</div><div class="line">    font-size: 1.5em;</div><div class="line"></div><div class="line">    /* This is based on 1.5em (not 20px), so it&apos;s also 30px */</div><div class="line">    border: 1em solid black;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同一个元素中的两个不同em值，最后得到的计算值却是相同的，这看起来非常奇怪。</p>
<p>这也再次说明了，em值的继承特性会造成一些困扰。当你在组件中用em设置大小，然后组件发生了层叠，那么尺寸将可能发生难以理解的层叠效果。</p>
<p><img src="http://p3.qhimg.com/t01d4a25adf9eec9852.png" alt=""></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>使用像素设置大小是<strong>难以维护的</strong>。它们不相对于任何元素发生变化。当需要进行缩放时，你要手动的调整它们。这是困难、耗时且易出错的。</li>
<li>使用em值设置大小能够让元素<strong>按字体大小成比例缩放</strong>，所以改变字体大小将会改变元素中所有值的大小（子元素也会发生继承）。</li>
<li>明确的设置字体大小将会阻止用户通过浏览器设置改变他们的默认字体大小，这是<strong>对网页可访问性不利的</strong></li>
</ul>
<h3 id="阅读更多"><a href="#阅读更多" class="headerlink" title="阅读更多"></a>阅读更多</h3><ul>
<li><p><a href="http://simurai.com/blog/2015/09/09/back-to-the-roots" target="_blank" rel="external">Back to the :roots</a></p>
</li>
<li><p><a href="https://css-tricks.com/rems-ems/" target="_blank" rel="external">Font Size Idea: px at the Root, rem for Components, em for Text Elements</a></p>
</li>
</ul>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@yuduxyz" target="_blank" rel="external">谢于中</a><br>链接：<a href="http://www.zcfy.cc/article/1276" target="_blank" rel="external">http://www.zcfy.cc/article/1276</a><br>原文：<a href="https://css-tricks.com/building-resizeable-components-relative-css-units/" target="_blank" rel="external">https://css-tricks.com/building-resizeable-components-relative-css-units/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于css定位，你需要知道的5件事]]></title>
      <url>http://jsgrblog.win/2016/12/10/%E5%85%B3%E4%BA%8Ecss%E5%AE%9A%E4%BD%8D%EF%BC%8C%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%845%E4%BB%B6%E4%BA%8B/</url>
      <content type="html"><![CDATA[<p>近年来前端工程师已经可以通过不同的css布局技巧制作出很复杂的布局。其中有些技巧有很长的历史（比如：<a href="https://drafts.csswg.org/css-box-3/#the-float-property" target="_blank" rel="external">floats</a>）,也有一些是近几年才被青睐的(比如<a href="https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties" target="_blank" rel="external">flexbox</a>)。</p>
<p>在这篇文章中，我们会更加细致地探索一些鲜为人知的关于 <a href="https://drafts.csswg.org/css-position-3/#position-property" target="_blank" rel="external">CSS positioning</a>定位的事情。<br><a id="more"></a><br>在我们开始学习这些事情前，让我们快速浏览当然也是很必要地看一下可用的定位类型。</p>
<h2 id="css中的定位类型一览"><a href="#css中的定位类型一览" class="headerlink" title="css中的定位类型一览"></a>css中的定位类型一览</h2><p><code>position</code>这个css属性允许我们指定元素的定位类型。</p>
<h3 id="css定位选项"><a href="#css定位选项" class="headerlink" title="css定位选项"></a>css定位选项</h3><p><strong>static</strong>是此属性的默认值。这时候，我们称那个元素没有被定位。为了定位它，我们需要改变预定义的类型。<br>为了改变预定义类型，我们将<code>position</code>的属性值设置为下面中的一个：</p>
<ul>
<li><code>relative</code></li>
<li><code>absolute</code></li>
<li><code>fixed</code></li>
<li><code>sticky</code></li>
</ul>
<p>只有设置了之后，我们才能使用offset参数来为我们的元素指定我们想要的位置：</p>
<ul>
<li><code>top</code></li>
<li><code>right</code></li>
<li><code>bottom</code></li>
<li><code>left</code></li>
<li>这些属性的初始值是关键字“auto”</li>
</ul>
<p>我们需要记住一点，当一个元素的<code>position</code>被设置为<code>absolute</code>或者<code>fixed</code>，我们称之为一个<strong>绝对定位元素</strong>。同样，注意一个被定位的元素可以用<code>z-index</code>属性来指定他的堆叠顺序。</p>
<h3 id="CSS定位类型的主要差别"><a href="#CSS定位类型的主要差别" class="headerlink" title="CSS定位类型的主要差别"></a>CSS定位类型的主要差别</h3><p>现在，让我们简单的讨论下这些定位类型之间的<strong>三个关键差别</strong>：</p>
<ul>
<li><p>一个—<em>绝对</em>定位的元素是完全脱离正常流的。邻近的兄弟节点元素会占据它的位子。</p>
</li>
<li><p>一个<em>相对或者粘性</em>定位的元素保留他们的位置。邻近的元素不会占据这个元素保留的空间。然而，这个元素的偏移量（offsets）不会占据空间。他们完全忽略其他的元素，因此这可能会与其他元素相互重叠。</p>
</li>
<li><p>一个<em>绝对（fixed）</em>定位的元素（记住：fixed是absolute定位的一个子类）经常相对于视图的定位（除了一个有<code>transform</code>属性的父元素，最新版本的桌面浏览器都支持这种行为）。</p>
</li>
<li><p>一个粘性的定位元素是相对于最近的可滑动的父元素（比如：<code>overflow:auto</code>）.如果没有这种父元素，它就相对于视图定位。</p>
</li>
</ul>
<p>在接下来的事例中，我们将探索这些类型的定位是如何运行的：</p>
<p>看一下Pen<a href="http://codepen.io/georgemarts/pen/qOqNgm/" target="_blank" rel="external">定位概述</a> by George (<a href="http://codepen.io/georgemarts" target="_blank" rel="external">@georgemarts</a>) 在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上.</p>
<p><em>注意：粘性定位类型依然被认为是实验性的技术，<a href="http://caniuse.com/#search=sticky" target="_blank" rel="external">并且浏览器支持有限</a>.当然，如果你想要，你可以将方法加入不支持的浏览器。鉴于他有限的支持，我们在接下来的文章中不会提到这个属性。</em></p>
<h2 id="绝对定位类型的定位元素"><a href="#绝对定位类型的定位元素" class="headerlink" title="绝对定位类型的定位元素"></a>绝对定位类型的定位元素</h2><p>我相信你们中许多人已经知道绝对定位是如何实现的了。然而这个定位类型是需要技巧的并且容易迷惑新手设计者。</p>
<p>因为这个原因，我决定将此列入鲜为人知的概念列表之中（包括相应的实例），涵盖在这片文章之中。</p>
<p>因此，一个定位类型被设置成绝对定位的元素是相对于它最近的父元素。当然，这仅仅在定位类型不是‘staic’的情况下有效。考虑到这一点，如果元素没有任何定位的父元素，那么它是相对于视图定位。</p>
<p>为了解释这种行为，看下面的在线实例：</p>
<p>看一下Pen<a href="http://codepen.io/georgemarts/pen/dYOpMm" target="_blank" rel="external">绝对定位类型的定位元素</a> by George (<a href="http://codepen.io/georgemarts" target="_blank" rel="external">@georgemarts</a>) 在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上.</p>
<p>在这个实例中，我们给绿盒子一个初始的绝对定位类型，设置他的偏移量（offsets）为<code>bottom:0</code>和<code>left:0</code>。此外，我们不需要给直接父元素（红盒子）一个特定的定位类型。</p>
<p>然而，我们相对定位父元素（比如：一个class为<code>jumbotron</code>的元素）。只要我们改变他父元素的定位类型，注意绿盒子的定位是如何改变的。</p>
<h2 id="绝对定位的元素无视了float-这个属性"><a href="#绝对定位的元素无视了float-这个属性" class="headerlink" title="绝对定位的元素无视了float 这个属性"></a>绝对定位的元素无视了<code>float</code> 这个属性</h2><p>如果一个元素是浮动左或右，而且我们将此定位类型设置为 ‘absolute’ 或者 ‘fixed’ ，那么float的属性就会被设置为 ‘none’ .另一方面，如果我们将定位类型设置成relative，那么元素依然包含浮动的属性。</p>
<p>看一个相关的例子：</p>
<p>看一下Pen<a href="http://codepen.io/georgemarts/pen/WQovLM" target="_blank" rel="external">绝对定位的元素无视了<code>float</code> 这个属性</a> by George (<a href="http://codepen.io/georgemarts" target="_blank" rel="external">@georgemarts</a>) 在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上.</p>
<p>在这个例子中，我们将两个不同的元素定义为 <code>float:right</code>. 注意当红盒子变成了绝对定位的元素，这就无视了 <code>float</code> 属性，然而相对定位的绿盒子保留了他float的值。</p>
<h2 id="内联元素如果被设置为绝对定位，那么他会表现出块级元素的特征"><a href="#内联元素如果被设置为绝对定位，那么他会表现出块级元素的特征" class="headerlink" title="内联元素如果被设置为绝对定位，那么他会表现出块级元素的特征"></a>内联元素如果被设置为绝对定位，那么他会表现出块级元素的特征</h2><p>一个内联元素，如果他的position设置为 absolute或者fixed，那么它就有块级元素的属性。<a href="https://drafts.csswg.org/css-position-3/#dis-pos-flo" target="_blank" rel="external">这张表</a>总结什么类型的元素被转换成块级元素。</p>
<p>这里有一个例子：</p>
<p>看一下Pen<a href="http://codepen.io/georgemarts/pen/xwEymK" target="_blank" rel="external">内联元素如果被设置为绝对定位，那么他会表现出块级元素的特征</a> by George (<a href="http://codepen.io/georgemarts" target="_blank" rel="external">@georgemarts</a>) 在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上.</p>
<p>在这个例子中，我们定义两个不同元素。第一个（比如：绿盒子）为块级元素（比如：div）。第二个（比如：红盒子）为内联元素（如 span）。注意只有绿盒子有显示。</p>
<p>红盒暂时没有出现，因为我们给它的 <code>width</code> 和 <code>height</code>的这两个属性，这属性只能用于块级元素和内联元素。外加，这是一个空元素（不包含任何子元素比如文本节点）。<br><strong>译者ps：不知道是不是这里写错了 宽高属性只能用于块级元素，用在内联元素上，不会有效果</strong></p>
<p>记住如果我们设置定位的类型是absolute或者fixed，元素会呈现出块级元素的特性。</p>
<h2 id="外边距（margins）不会在绝对定位的元素上合并"><a href="#外边距（margins）不会在绝对定位的元素上合并" class="headerlink" title="外边距（margins）不会在绝对定位的元素上合并"></a>外边距（margins）不会在绝对定位的元素上合并</h2><p>默认情况下，当两个垂直外边距互相接触，他们之间的间距会取得两个之间比较大的外边距。这种行为可以理解为<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing" target="_blank" rel="external">外边距合并</a>.</p>
<p>就像在一个浮动的元素上的外边距一样，一个绝对定位元素的外边距不会和其他外边距合并。</p>
<p>思考下下面的例子：</p>
<p>看一下Pen<a href="http://codepen.io/georgemarts/pen/jbVrGd" target="_blank" rel="external">外边距（margins）不会在绝对定位的元素上合并</a> by George (<a href="http://codepen.io/georgemarts" target="_blank" rel="external">@georgemarts</a>) 在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上.</p>
<p>在这个例子中个，最初的元素的外边距等于<code>20px</code>。此外，他的<code>top</code>外边距和父元素的<code>top</code>外边距重叠了，这也是<code>20px</code>。正如你所见，只有当我们绝对定位元素，这个<code>top</code>外边距才不会和父元素的相关外边距重叠。</p>
<p>但是，我们该如何防止外边距合并？当然，我们需要放些东西放去分开他们。</p>
<p>比如说，举个例子，有一点内边距或者边框（我们可以把这条规则用于父元素或者子元素）。另一个选择是添加<code>clearfix</code>类（在我的例子中）到父元素之中。</p>
<h2 id="用px和百分比定位元素"><a href="#用px和百分比定位元素" class="headerlink" title="用px和百分比定位元素"></a>用px和百分比定位元素</h2><p>你用过百分比而不是px来定义定位元素的偏移量（offsets）吗？如果答案是是的，你可能会发现坐标值的计算和你选择的CSS单位是不一样的（比如px或者百分比）。</p>
<p>这看上去有点迷惑，是吧？因此让我看下<a href="https://drafts.csswg.org/css-position-3/#valdef-top-percentage" target="_blank" rel="external">规范</a>中关于声明为百分比的偏移量。</p>
<blockquote>
<p>偏移量是包含框的宽度（对于<code>left</code>或者<code>right</code>）或者高度（对于<code>top</code>和<code>bottom</code>）的百分比。对于黏着定位的元素，偏移量是底部的宽度（对于<code>left</code>或者<code>right</code>）或者高度（对于<code>top</code>和<code>bottom</code>）的百分比。负值也是允许的。</p>
</blockquote>
<p>也就是说，只要我们定义偏移量为百分比，目标元素的定位就依赖于父元素的宽（对于左右的偏移量）和高（对于上下的偏移量）。</p>
<p>下面的例子说明了差别：<br>看一下Pen<a href="http://codepen.io/georgemarts/pen/PPbGbL" target="_blank" rel="external">用px和百分比定位元素</a> by George (<a href="http://codepen.io/georgemarts" target="_blank" rel="external">@georgemarts</a>) 在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上.</p>
<p>在这个例子中，我们用px和百分比移动元素。很明显，当偏移量是px的时候，元素按照我们所期待地移动。又快又好。</p>
<p>相反的是，当我们用百分比作为css单位的时候，元素的定位按照它父元素的尺寸。这里有一个有用的可视化告诉你新位置（用百分比）是如何计算的。</p>
<p><img src="http://p0.qhimg.com/t01dddcccf2f135d7b8.png" alt="New Position"></p>
<p><em>注意：你也已经许知道，<code>transform</code>属性（伴随着不同的<code>translate</code>方法）也可以让我们改变元素的位置。但是，请记住如果我们使用百分比作为css单位，那么元素会相对于他的尺寸定位并且不是相对于父元素尺寸定位（和偏移量（offsets）不一样）。</em></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>我希望这篇文章能够帮助你牢固掌握css定位布局方式并且突出一些可能会迷惑的css概念。 我喜欢你们在下方的评论中分享你们的想法，问题或者建议。感谢你们的阅读。</p>
<p>译者PS：第一次翻译技术类文章，希望对大家有所帮助。</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@cherryvenus" target="_blank" rel="external">cherryvenus</a><br>链接：<a href="http://www.zcfy.cc/article/1390" target="_blank" rel="external">http://www.zcfy.cc/article/1390</a><br>原文：<a href="https://scotch.io/bar-talk/5-things-you-might-not-know-about-the-css-positioning-types" target="_blank" rel="external">https://scotch.io/bar-talk/5-things-you-might-not-know-about-the-css-positioning-types</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[了解并使用 CSS 中的 rem 单位]]></title>
      <url>http://jsgrblog.win/2016/12/10/%E4%BA%86%E8%A7%A3%E5%B9%B6%E4%BD%BF%E7%94%A8CSS%E4%B8%AD%E7%9A%84rem%E5%8D%95%E4%BD%8D/</url>
      <content type="html"><![CDATA[<p>在 SitePoint 上有几篇是以 CSS 单位为主题的文章（比如：<a href="http://www.sitepoint.com/look-at-length-units-in-css/" target="_blank" rel="external">CSS 长度单位一览</a>, <a href="http://www.sitepoint.com/new-css3-relative-font-size/" target="_blank" rel="external">CSS 3 中新的文字大小单位</a>, and <a href="http://www.sitepoint.com/power-em-units-css/" target="_blank" rel="external">CSS 中 em 单位的作用</a>）</p>
<p>今天我们深度了解一下 <strong>rem 单位</strong>，这个单位目前已经得到了优秀浏览器的支持，并且有一些兼容方案来帮助你在低版本的 IE 浏览器中的使用它。</p>
<h3 id="作者的其他作品"><a href="#作者的其他作品" class="headerlink" title="作者的其他作品"></a>作者的其他作品</h3><ul>
<li><a href="https://www.sitepoint.com/front-end-development-internet-explorer/?utm_source=sitepoint&amp;utm_medium=relatedinline&amp;utm_term=&amp;utm_campaign=relatedauthor" target="_blank" rel="external">结束低版本 Internet Explorer 支持后的前端开发</a></li>
<li><a href="https://www.sitepoint.com/cleaning-house-after-internet-explorer/?utm_source=sitepoint&amp;utm_medium=relatedinline&amp;utm_term=&amp;utm_campaign=relatedauthor" target="_blank" rel="external">结束低版本 Internet Explorer 支持后的代码整理</a></li>
</ul>
<a id="more"></a>
<h2 id="什么是-rem"><a href="#什么是-rem" class="headerlink" title="什么是 rem"></a>什么是 rem</h2><p>可能在你使用收音机或者用其他音乐播放器之前，就已经听过“R.E.M.”这个词了。在这个乐队眼中，这个词是“浅睡眠时眼球的快速转动”的缩写，而在 css 中，rem 代表着“以根元素为参照物的 em 单位“。他不会让你抛弃你的宗教信仰也不会让你相信那个远在月球的人，但是它可以帮助你实现一个和谐、平稳的设计。</p>
<p>根据 <a href="http://www.w3.org/TR/2013/CR-css3-values-20130730/#font-relative-lengths" target="_blank" rel="external">W3C 规范</a>中对 1rem 的定义：</p>
<blockquote>
<p>1rem 与等于根元素 <code>font-size</code> 的计算值。当明确规定根元素的 <code>font-size</code> 时，rem 单位以该属性的初始值作参照。</p>
</blockquote>
<p>这就意味着 <code>1rem</code> 等于 <code>html</code> 元素的字体大小（大部分浏览器根元素的字体大小为16px）</p>
<h2 id="Rem-单位-vs-Em-单位"><a href="#Rem-单位-vs-Em-单位" class="headerlink" title="Rem 单位 vs Em 单位"></a>Rem 单位 vs Em 单位</h2><p>使用 em 单位最主要的问题是他们与用户元素相关联。在这种情况下，这些元素可以相互嵌套并且造成意想不到的结果。我们来思考下面一个例子，在根元素的文字大小为默认值 <code>16px</code> 的情况下，我们想要所有列表的字体大小均为 <code>12px</code> :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">  font-size: 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ul &#123;</div><div class="line">  font-size: 0.75em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假如有一个列表是嵌套在另一个列表下，那么内列表的字体大小将会是外列表字体大小的 75%（也就是 <code>9px</code> ），我们仍然可以通过几行代码来解决这个问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ul ul &#123;</div><div class="line">  font-size: 1em;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就可以解决这个问题，然而我们仍需要特别关注那些嵌套特别深的元素。</p>
<p>当使用 rem 单位后，事情就变得简单了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">  font-size: 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ul &#123;</div><div class="line">  font-size: 0.75rem;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当所有尺寸都以根元素的文字大小作为参照后，就不再需要为嵌套的元素单独定义样式了。</p>
<h2 id="使用-rem-单位定义文字大小"><a href="#使用-rem-单位定义文字大小" class="headerlink" title="使用 rem 单位定义文字大小"></a>使用 rem 单位定义文字大小</h2><p>Jonathan Snook 是使用 rem 单位来定义文字大小的先驱，早在 2011 年 5 月，他就发表了题为<a href="http://snook.ca/archives/html_and_css/font-size-with-rem" target="_blank" rel="external">《使用 rem 来定义文字大小》</a> 的文章。和大多数 CSS 开发者一样，他必须去解决在 em 单位在复杂的布局上的一系列问题。</p>
<p>在那时候，老版本的 IE 依然有很大的市场份额，并且他们不可以缩放由 px 来定义的文本。然而，就像我们之前看到的那样，在使用 em 单位的情况下，很容易忘记元素之前的嵌套关系，并且得到一个意想不到的结果。</p>
<p>使用 rem 单位来定义文字的大小最大的问题在于这些值有点难以使用。让我们来看一个例子，假设根元素的文字大小是 16px，我们常用的文字大小转换为 rem 值如下： </p>
<ul>
<li><p>10px = 0.625rem</p>
</li>
<li><p>12px = 0.75rem</p>
</li>
<li><p>14px = 0.875rem</p>
</li>
<li><p>16px = 1rem (base)</p>
</li>
<li><p>18px = 1.125rem</p>
</li>
<li><p>20px = 1.25rem</p>
</li>
<li><p>24px = 1.5rem</p>
</li>
<li><p>30px = 1.875rem</p>
</li>
<li><p>32px = 2rem</p>
</li>
</ul>
<p>正如我们看到的那样，这些值在计算起来非常不方便。因此，Snook 使用一个叫 <strong>62.5</strong> 的方式来解决这个问题。然而这并不是一个创新，因为它早已在 em 单位中运用了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">body &#123; font-size:62.5%; &#125;  /* =10px */</div><div class="line">h1   &#123; font-size: 2.4em; &#125; /* =24px */</div><div class="line">p    &#123; font-size: 1.4em; &#125; /* =14px */</div><div class="line">li   &#123; font-size: 1.4em; &#125; /* =14px? */</div></pre></td></tr></table></figure>
<p>因为 rem 单位与根元素相关联，Snook 改进后的方案变为了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">html &#123; font-size: 62.5%; &#125;  /* =10px */</div><div class="line">body &#123; font-size: 1.4rem; &#125; /* =14px */</div><div class="line">h1   &#123; font-size: 2.4rem; &#125; /* =24px */</div></pre></td></tr></table></figure></p>
<p>有一点值得考虑的是有一些浏览器不支持 rem 单位。因此上面的代码可以按照以下方式来改写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">    font-size: 62.5%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">body &#123;</div><div class="line">    font-size: 14px;</div><div class="line">    font-size: 1.4rem;</div><div class="line">&#125;</div><div class="line"></div><div class="line">h1 &#123;</div><div class="line">    font-size: 24px;</div><div class="line">    font-size: 2.4rem;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>尽管这个解决方案看起来是最好的解决方案，但还是有人不建议使用这种方式。Harry Roberts 写了一篇<a href="http://csswizardry.com/2011/05/font-sizing-with-rem-could-be-avoided/" target="_blank" rel="external">文章</a>，里面记录了他在实际使用 rem 单位过程中的一些感受。从他的观点来看，虽然 <strong>62.5%</strong> 这种解决方案使得计算变得简单（因为字体大小以 px 为单位时的值正好是以 rem 为单位的 10 倍），但是他迫使开发者重写他们网站中的所有文字大小。</p>
<p>Chris Coyier 在 CSS-Tricks 提出了第三种<a href="https://css-tricks.com/rems-ems/" target="_blank" rel="external">解决方案</a>。他的解决方式充分利用了到目前为止我们遇到的三种单位。根元素的长度单位依旧采用 <code>px</code> ，模块用 rem 单位，模块内的元素使用 em 单位。这种方式可以很容易的操作根元素的大小、缩放模块，模块内内容的大小以模块自身文字大小来进行缩放。Louis Lazaris 随后在 <a href="http://www.sitepoint.com/power-em-units-css/" target="_blank" rel="external">CSS 中 em 单位的强大之处</a> 提出了他的观点。</p>
<p>在下面的例子中你可以看出 Chris 的解决方案是怎么工作的：</p>
<p>代码可以看 SitePoint(<a href="http://codepen.io/SitePoint" target="_blank" rel="external">@SitePoint</a>) 在 <a href="http://codepen.io" target="_blank" rel="external">CodePen</a> 写的 <a href="http://codepen.io/SitePoint/pen/XmRaGd/" target="_blank" rel="external">《在 CSS 中使用 em 和 rem 单位的方式》</a>。</p>
<p>正如你看到的那样，没有利用新技术来解决这个问题。可能一些组合方式仅仅被开发者的想象力所限制。</p>
<h2 id="在媒体查询中使用-rem-单位"><a href="#在媒体查询中使用-rem-单位" class="headerlink" title="在媒体查询中使用 rem 单位"></a>在媒体查询中使用 rem 单位</h2><p>在媒体查询中利用 em 和 rem 单位，与“行的最佳长度”的概念密切向关，并能给用户带来流畅的阅读体验。在 2014 年 9 月，Smashing Magazine 在 web typography 发表了一篇名叫<br><a href="http://www.smashingmagazine.com/2014/09/balancing-line-length-font-size-responsive-web-design/" target="_blank" rel="external">尺寸那些事: 在 web 响应式设计中掌握文字大小与行宽度的平衡</a>的文章。最有意思的是，文章给出了行的最佳宽度度，45 到 85 个字符（包括空格和标点符号），65 是最理想的行宽值。</p>
<p>粗略的估计一个字节大小就是 1rem，利用这个方法我们就可以用一种移动优先的方式控制内容的单行文本流：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">  width: 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@media (min-width: 85rem) &#123;</div><div class="line">  .container &#123;</div><div class="line">    width: 65rem;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然而在媒体查询中使用 em 和 rem 单位作为媒体查询的条件时有一个有意思的细节：1 rem，1em 还有浏览器默认文字大小这三值表示这同一个值。这样做的原因可以在<a href="https://drafts.csswg.org/mediaqueries/#units" target="_blank" rel="external">媒体查询规范</a>得到解释（特别强调）:</p>
<blockquote>
<p>询中相对单位都是以一个初始值作为基准，这就意味着这些单位永远不会基于声明的结果。例如：在 HTML 中，<strong>em 单位与用户浏览器或者用户偏好设置中设置的初始文字大小有关，而不是页面上的样式中定义的文字大小</strong>。</p>
</blockquote>
<p>让我们看一个关于这个特性的一个小例子：</p>
<p><a href="http://codepen.io/SitePoint/pen/GpmvaG" target="_blank" rel="external"><strong>在 CodePen 上看一个关于媒体查询的 demo</strong></a></p>
<p>首先，在我们的 HTML 文档中，有一个元素将会展现视口的宽度：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`Document width: &lt;span&gt;&lt;/span&gt;px`</div></pre></td></tr></table></figure>
<p>接下来是两条媒体查询语句，一条是使用 rem 单位，另一条使用 em 单位（这里为了简便，使用了 Sass）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">  font-size: 62.5%; /* 62.5% of 16px = 10px */</div><div class="line"></div><div class="line">  @media (min-width: 20rem) &#123;</div><div class="line">    /* 20*16px = 320px */</div><div class="line">    background-color: lemonchiffon;</div><div class="line">    font-size: 200%;</div><div class="line">    /* 200% of 16px = 32px */</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @media (min-width: 30em) &#123;</div><div class="line">    /* 30*16px = 480px */</div><div class="line">    background-color: lightblue;</div><div class="line">    font-size: 300%; /* 300% of 16px = 48px */（译：原文是48px）</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，我们使用一点 jQuery 在页面上显示视口的宽度，并且在窗口缩放的时候更新这个值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(&apos;span&apos;).text($(window).width());</div><div class="line"></div><div class="line">$(window).on(&apos;resize&apos;, function(e) &#123;</div><div class="line">  $(&apos;span&apos;).text($(window).width());</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在开头，我们使用了 <strong>62.5%</strong> 这个方法来说明，修改根元素字体大小不会对媒体查询产生任何影响。当我们更改窗口的宽度时，我们可以看到在 320 px 时，第一条媒体查询开始起作用，到480px第二条媒体查询开始起作用。任何一条在媒体查询中对文字大小声明的改变都没有起作用。唯一一个可以改变媒体查询中宽度的是在浏览器里更改默认文字大小。</p>
<p>因为这个原因，在媒体查询语句中使用 em 单位还是 rem 单位已经不那么重要了。事实上，无论是<a href="http://foundation.zurb.com/" target="_blank" rel="external">Foundation v5</a>还是最近刚发布的<a href="http://v4-alpha.getbootstrap.com/" target="_blank" rel="external">Bootstrap v4 alpha</a>都在他们的媒体查询中使用了 em 单位。</p>
<h2 id="使用-rem-单位来缩放文档"><a href="#使用-rem-单位来缩放文档" class="headerlink" title="使用 rem 单位来缩放文档"></a>使用 rem 单位来缩放文档</h2><p>我们能发现的第三种使用 rem 单位的方式是去构建可缩放组件。使用 rem 来定义元素的宽度，外边距和内边距<br>通过使用根元素的字体大小作为一个接口使元素缩放一致变为了可能。<br>我们可以通过下面两个例子来看这是怎么起作用的。</p>
<p><a href="http://codepen.io/SitePoint/pen/wKdrwN" target="_blank" rel="external"><strong>使用 rem 来缩放文档实例一</strong></a></p>
<p>在这个例子里，我们通过媒体查询中更改根元素的文字大小。就像上一个章节所讲，这样做的目的是为用户定制不同设备下的不同阅读体验。通过 rem 单位来表示宽度，外边距，内边距，这样所有元素就会基于用户的设备大小缩放。</p>
<p>让我们看另一个例子：</p>
<p>代码可以看 SitePoint(<a href="http://codepen.io/SitePoint" target="_blank" rel="external">@SitePoint</a>) 在 <a href="http://codepen.io" target="_blank" rel="external">CodePen</a> 写的 <a href="http://codepen.io/SitePoint/pen/EVmwjZ/" target="_blank" rel="external">《使用 rem 动态缩放模块》</a></p>
<p>在第二个例子中，我们使用 JavaScript 来做同样的操作。这次用户根据自己的需要手动控制界面的大小。我们可以使用多种方式（可以使用数据库，cookie 还有本地存储）来存储用户数据，这样就可以给用户搭建一个基于用户偏好的个性化系统。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这里总结一下到目前为止我们对 CSS 中 rem 单位的认识。很显然，在项目中使用 rem 有许多优点，比如：响应式，可缩放，增加阅读体验，增加自定义元素的灵活性。rem 虽然不是一个通用的解决方案，但是通过谨慎的使用，它还是可以解决困扰开发者多年的问题。<br>我们每个人都可以去挖掘 rem 的所有潜能。从你的编辑器开始吧，实验并向我们分享您的成果。</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@z591446731" target="_blank" rel="external">耳机</a><br>链接：<a href="http://www.zcfy.cc/article/1411" target="_blank" rel="external">http://www.zcfy.cc/article/1411</a><br>原文：<a href="https://www.sitepoint.com/understanding-and-using-rem-units-in-css/" target="_blank" rel="external">https://www.sitepoint.com/understanding-and-using-rem-units-in-css/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[网页设计和开发的55个顶尖博客]]></title>
      <url>http://jsgrblog.win/2016/12/10/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%BC%80%E5%8F%91%E7%9A%8455%E4%B8%AA%E9%A1%B6%E5%B0%96%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="Top-Blogs-About-Web-Design-And-Web-Development"><a href="#Top-Blogs-About-Web-Design-And-Web-Development" class="headerlink" title="Top Blogs About Web Design And Web Development"></a>Top Blogs About Web Design And Web Development</h1><p><img src="http://p0.qhimg.com/t015b47d6867e672d8c.png" alt="http://p0.qhimg.com/t015b47d6867e672d8c.png"><br><a id="more"></a><br>在这篇推文中，我收集使到一些使得网页设计师和开发人员更方便网站建设的站点。这些站点都有精心编写的，明确的，内容充实的的文章，内容包含对CMS之如WordPress讨论，Photoshop工具，CSS和HTML教程代码，对用户体验的想法（UX）和用户界面（UI）的提示、技巧、资源和赠品。<br>在今天的帖子中，我们将一睹55个最好的网页设计师和开发人员博客和网站。请注意站点不以排名先后论英雄。</p>
<h3 id="1-Web-Designer-Depot"><a href="#1-Web-Designer-Depot" class="headerlink" title="1. Web Designer Depot"></a>1. <a href="http://www.webdesignerdepot.com/" target="_blank" rel="external">Web Designer Depot</a></h3><figure name="db06" id="db06" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01ff670751d5a43289.png" alt=""><br><br></figure>

<p>Web Designer Depot是全球设计师之间的聚集地，在这里有设计师们分享为来帮助发展设计社区功能而分享的文章和教程。 站点主题包括HTML 5，CSS3，响应式设计，排版，可用性，jQuery，移动应用程序，资源，业务，自由职业者，灵感等。</p>
<hr>
<h3 id="2-InstantShift"><a href="#2-InstantShift" class="headerlink" title="2. InstantShift"></a>2. <a href="http://www.instantshift.com/" target="_blank" rel="external">InstantShift</a></h3><figure name="6be5" id="6be5" data-scroll="native"><br><img src="http://p0.qhimg.com/t01ced39b90896d1d2a.jpg" alt=""><br><br></figure>


<p>InstandShift是一个流行于网页设计师和开发人员的社区。有很多关于WordPress，网页设计，CSS，工具，教程，字体，摄影等很多优秀的帖子。</p>
<hr>
<h3 id="3-CSS-Tricks"><a href="#3-CSS-Tricks" class="headerlink" title="3. CSS-Tricks"></a>3. <a href="https://css-tricks.com/" target="_blank" rel="external">CSS-Tricks</a></h3><figure name="e8c6" id="e8c6" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01bb38fc2c7483793b.jpg" alt=""><br><br></figure>

<p>这是由Chris Coyier1人创立最初只涵盖CSS，到现在有11人的团队，涵盖网页设计和开发的各个方面网站。 他们的内容包括文章，视频，代码片段、教程，新闻，基本资料等。</p>
<hr>
<h3 id="4-Hongkiat"><a href="#4-Hongkiat" class="headerlink" title="4. Hongkiat"></a>4. <a href="http://www.hongkiat.com/blog/" target="_blank" rel="external">Hongkiat</a></h3><figure name="1bc7" id="1bc7" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t014f145a5d1ecca4fa.jpg" alt=""><br><br></figure>

<p>这个网站自2007建立年以来，已经为设计师，开发人员，工程师和博主提供了一系列的文章，教程，推荐的工具，提示和技巧。 他们喜欢写关于插件，工具，桌面和移动应用程序，小工具，天才般的想法等任何令人感兴趣的任何东西。</p>
<hr>
<h3 id="5-Six-Revisions"><a href="#5-Six-Revisions" class="headerlink" title="5. Six Revisions"></a>5. <a href="http://sixrevisions.com/" target="_blank" rel="external">Six Revisions</a></h3><figure name="ab52" id="ab52" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t018a046b66448c011e.jpg" alt=""><br><br></figure>

<p>该网站由Jacob Gube于2008年推出，涵盖了设计和构建网站及应用程序的网站设计和开发的整个流程。 他们发表文章，新闻，教程，指南等等。 该网站主题涵盖的范围从Photoshop到自由职业者和之间的一切。</p>
<hr>
<h3 id="6-Smashing-Magazine"><a href="#6-Smashing-Magazine" class="headerlink" title="6. Smashing Magazine"></a>6. <a href="https://www.smashingmagazine.com/" target="_blank" rel="external">Smashing Magazine</a></h3><figure name="2845" id="2845" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01053e16f6bf1d0006.jpg" alt=""><br><br></figure>

<p>这个网站由Vitaly Friedman和Sven Lennartz创立，为设计师和开发人员提供了一系列的文章，教程。站点主题包括设计，用户体验设计，代码，WordPress，移动应用程序和设计，图形等。内容涵盖软件，概念，新闻等，也包括CSS，Photoshop，电子商务，插件，网站主题等等。</p>
<hr>
<h3 id="7-Vandelay-Design"><a href="#7-Vandelay-Design" class="headerlink" title="7. Vandelay Design"></a>7. <a href="http://www.vandelaydesign.com/" target="_blank" rel="external">Vandelay Design</a></h3><figure name="82b4" id="82b4" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01093ab68666675c88.jpg" alt=""><br><br></figure><br>这个网站的重点是提供创意，为小企业主和企业家配备开发他们的经营理念的工具。 他们站点有很多关于网页设计，写作，网络开发等等的文章。 他们也有链接到免费资源，一个包含高级资源的商店，他们通过提供免费的WordPress主题回馈社区。<br><br>————<br><br><br>### 8. <a href="http://thenextweb.com/" target="_blank" rel="external">TheNextWeb (Design &amp; Dev)</a><br><br><figure name="4ccc" id="4ccc" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t018089824cdf2f0aef.jpg" alt=""><br><br></figure>


<p>该网站自2006年成立以来一直致力于国际技术新闻，设计，商业，文化等领域的文章发布。其内容包括入门指南，代码，UX设计，关于交易和课程的链接和新闻，设计活动视频，硬件，软件，评论，即将到来的活动，平面设计等。</p>
<hr>
<h3 id="9-SpeckyBoy"><a href="#9-SpeckyBoy" class="headerlink" title="9. SpeckyBoy"></a>9. <a href="https://speckyboy.com/" target="_blank" rel="external">SpeckyBoy</a></h3><figure name="a19f" id="a19f" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01193862562fda227e.jpg" alt=""><br><br></figure>


<p>Paul Andrew在2007年10月建立了自己的自由职业者站点。现已发展为为一个网页设计杂志站点。 它拥有大量的教程，资源，节省利用的技术，甚至鼓舞人心的艺术。 主题包括网页设计和开发，平面设计，移动开发，广告，设计风格和趋势，技术新闻等。</p>
<hr>
<h3 id="10-A-List-Apart"><a href="#10-A-List-Apart" class="headerlink" title="10. A List Apart"></a>10. <a href="http://alistapart.com/" target="_blank" rel="external">A List Apart</a></h3><figure name="dff5" id="dff5" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t014e16a89c5848ce59.jpg" alt=""><br><br></figure><br>这个网站是由Jeffrey Zeldman于1998年建立的。 该站点文章专注于网页设计灵域，面向设计师，开发人员，建筑师，专家，策略家，项目经理和作家开放。 站点主题包括代码，内容，设计，商业和工业，工具，技术，UX等。<br><br>————<br><br>### 11. <a href="https://www.fastcodesign.com/" target="_blank" rel="external">FastCo Design</a><br><br><figure name="5db2" id="5db2" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t016a4538e9a365c17b.jpg" alt=""><br><br></figure>

<p>这是一本专注于商业和设计之间结合的技术杂志站点。它涵盖了广泛的主题，包括电子，UX，平面设计，建筑，时尚，消费产品等等。 在这里的设计师提供见解，意见，提示，新闻等等更多信息。</p>
<hr>
<h3 id="12-DesignShack"><a href="#12-DesignShack" class="headerlink" title="12. DesignShack"></a>12. <a href="https://designshack.net/" target="_blank" rel="external">DesignShack</a></h3><figure name="ff80" id="ff80" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01c341e8fae4c27bbb.jpg" alt=""><br><br></figure>


<p>这个设计网站发布了启发灵感的网页设计文章、布资源和教程。他们专注于设计和收录了网上最伟大的项目。 他们定期发布教读者创造自己设计的新技术的文章，并分享行业的每日新闻。该站点主题包括网站，排版，商业品牌，快捷方式等等。</p>
<hr>
<h3 id="13-Spoon-Graphics"><a href="#13-Spoon-Graphics" class="headerlink" title="13. Spoon Graphics"></a>13. <a href="http://blog.spoongraphics.co.uk/" target="_blank" rel="external">Spoon Graphics</a></h3><figure name="1a92" id="1a92" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01fdf103c78824dd32.jpg" alt=""><br><br></figure>

<p>这是由Chris Spooner建立的设计博客。 他分享一些贴士，资源和灵感，以帮助各阶段教育水平和技能水平的设计师。内容包括教程，文章，视频，新闻和免费资源的链接。主题专注于平面设计，图形软件，排版，模板，标志等。还有一个只供会员的下载的区域。</p>
<hr>
<h3 id="14-CoDrops"><a href="#14-CoDrops" class="headerlink" title="14. CoDrops"></a>14. <a href="http://tympanus.net/codrops/" target="_blank" rel="external">CoDrops</a></h3><figure name="0539" id="0539" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t019731b1411531587c.jpg" alt=""><br><br></figure>

<p>这个设计博客是由是由网页设计师兼开发人员Manoela Ilic和Pedro Botelho共同搭建完成的。 它开建立之初是想作为实验博客，后面成为一个热衷于分享对网页设计和网站开发的社区。团队成员及其他贡献者一起发布有关最新网络趋势，技术等的文章和教程。站点主题包括教程，赠品，CSS参考目录，在线实验区域，讨论网页设计概念的蓝图，以及包含来自社区的设计和新闻资源的集合。他们还主持有奖问答节目。</p>
<hr>
<h3 id="15-TutorialZine"><a href="#15-TutorialZine" class="headerlink" title="15. TutorialZine"></a>15. <a href="http://tutorialzine.com/" target="_blank" rel="external">TutorialZine</a></h3><figure name="72bb" id="72bb" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01ee9215797dec37e6.jpg" alt=""><br><br></figure>


<p>本网站是由来自保加利亚瓦尔纳的网站开发人员和设计师团队建立的。该站点文章包括小贴士，教程，赠品，编辑，UI，UX，新闻和在线实验。文章内容涵盖很多代码开发，包括HTML5，CSS3，jQuery，JavaScript和PHP。他们甚至有一个免费的jQuery电子书。</p>
<hr>
<h3 id="16-HackingUI"><a href="#16-HackingUI" class="headerlink" title="16. HackingUI"></a>16. <a href="http://hackingui.com/" target="_blank" rel="external">HackingUI</a></h3><figure name="e707" id="e707" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t0197c1dea9df2a5fcc.jpg" alt=""><br><br></figure>

<p>这是一个由Sagi Shrieber和David Tintner创立的在线杂志，主要是针对互动设计和前端开发。 它涵盖设计，代码，赠品，灵感，生产力，素描等各个领域。他们有许多教程和文章，包括Photoshop，CSS，JavaScript，商业，个人生活，免费图标链接，模板，赠品，有趣的网站，评论等等。</p>
<hr>
<h3 id="17-Web-Design-Weekly"><a href="#17-Web-Design-Weekly" class="headerlink" title="17. Web Design Weekly"></a>17. <a href="https://web-design-weekly.com/" target="_blank" rel="external">Web Design Weekly</a></h3><figure name="2d17" id="2d17" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t013b068b06e999e3a9.jpg" alt=""><br><br></figure>

<p>这是由由Jake Bresnehan创建和维护一个周刊杂志和博客网站。杂志包括标题，文章，工具，资源，灵感，工作等。杂志和博客都包括关于编程代码（CSS，HTML等）等文章教程。大多数内容在收录在电子杂志中，并通过电子邮件推送给用户这里非常注重代码。</p>
<hr>
<h3 id="18-David-Walsh"><a href="#18-David-Walsh" class="headerlink" title="18. David Walsh"></a>18. <a href="https://davidwalsh.name/" target="_blank" rel="external">David Walsh</a></h3><figure name="5556" id="5556" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01fdd0f56b65cad3a6.jpg" alt=""><br><br></figure>

<p>这是JavaScript和HTML5专家David Walsh的博客。 它包含大量的文章和教程，主要侧重于前端技术。站点主题包括代码（CSS，HTML，AJAX，JavaScript等），开发软件，资源链接，网站主题，设计概念，演示，移动端，浏览器等。</p>
<hr>
<h3 id="19-Naldz-Graphics"><a href="#19-Naldz-Graphics" class="headerlink" title="19. Naldz Graphics"></a>19. <a href="http://naldzgraphics.net/" target="_blank" rel="external">Naldz Graphics</a></h3><figure name="6b2e" id="6b2e" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t0173ec4a1590f61936.jpg" alt=""><br><br></figure>

<p>这是由Ronald Bien于2008年创建的设计博客。它展示了设计社区里的教程，赠品，灵感，资源等。站点内容包括文章，教程，赠品和WordPress主题。 它有很多的链接到良好的设计示例，免费图标，PSD模板，宣传册设计，标志设计等等。</p>
<hr>
<h3 id="20-Design-Beep"><a href="#20-Design-Beep" class="headerlink" title="20. Design Beep"></a>20. <a href="http://designbeep.com/" target="_blank" rel="external">Design Beep</a></h3><figure name="afd2" id="afd2" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01cd05366eeb3d2784.jpg" alt=""><br><br></figure>

<p>这个博客包含了许多关于设计和开发的主题。主要包括文章，教程，工具，资源，赠品和灵感等几大块。 涵盖了图形，标志，排版，网页设计，Photoshop，WordPress主题和插件，CSS，Illustrator，jQuery等等。 它有很多贴士，下载链接，评论，收藏等。还有一些提示最佳实践的贴士和广泛适用的主题。</p>
<hr>
<h3 id="21-PixelHint"><a href="#21-PixelHint" class="headerlink" title="21. PixelHint"></a>21. <a href="http://pixelhint.com/" target="_blank" rel="external">PixelHint</a></h3><figure name="cfe9" id="cfe9" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01aad06982d31b6741.jpg" alt=""><br><br></figure>

<p>这里是一个专门发布Web UI设计教程网页设计博客。他们还分享免费的供网页设计师和开发人员下载的网站模板和网络资源。 他们讨论网页设计最新趋势和技术方法，以及创建网站UI的最好的方法和技巧。 该博客包含大量的教程和免费资源链接，发展概念和代码教程。 免费资源包括图标和PSD模板。</p>
<hr>
<h3 id="22-PixelBuddha"><a href="#22-PixelBuddha" class="headerlink" title="22. PixelBuddha"></a>22. <a href="https://pixelbuddha.net/" target="_blank" rel="external">PixelBuddha</a></h3><figure name="4708" id="4708" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t015fcf099ca61cad23.jpg" alt=""><br><br></figure><br>这个网站是尼克弗罗斯特和格雷格拉宾。站点内容包含用于Web开发人员的免费且专业的资源。 大多数资源是图形。 资源包括动画，照片，字体，效果，HTML，图标，模板等。站点文章还会讨论如何获取资源。部分高级资源还会有一个免费版本。<br><br>————<br><br>### 23. <a href="http://graphicburger.com/" target="_blank" rel="external">GraphicBurger</a><br><br><figure name="8f13" id="8f13" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t012bda96c6eb5fd858.jpg" alt=""><br><br></figure>

<p>这个网站的从Raul Taciu的Cluj-Napoca，罗马尼亚和专注于高质量的设计资源是免费的。资源包括独有的PSD文件，还有来自世界各地的免费素材。资源包括模型，UI工具包，图标，文字效果，背景等。文章详细讨论了产品，并提供了下载链接。</p>
<hr>
<h3 id="24-Queness"><a href="#24-Queness" class="headerlink" title="24. Queness"></a>24. <a href="http://www.queness.com/" target="_blank" rel="external">Queness</a></h3><figure name="6865" id="6865" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t0165554b981436f35e.jpg" alt=""><br><br></figure>

<p>这是一个专门用于网页设计和开发的博客，其中包含大量教程和代码片段。该站点类别包括技术，教程，网页设计，网站开发，WordPress，JavaScript，移动开发，排版等等。 文章包括新闻，免费资源，资源链接，主题合集等等。</p>
<hr>
<h3 id="25-Inspirationfeed"><a href="#25-Inspirationfeed" class="headerlink" title="25. Inspirationfeed"></a>25. <a href="http://inspirationfeed.com/" target="_blank" rel="external">Inspirationfeed</a></h3><figure name="0914" id="0914" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01984206602da23232.jpg" alt=""><br><br></figure>

<p>该站点由Igor Ovsyannykov管理，提供有关设计，商业，创办企业的精神，WordPress，图形，交易和职场自我成长的信息。文章包括教程，灵感，博客，免费资源，新闻，主题，纹理，壁纸，SEO，社交媒体，标志，字体等等。 还有视频教程和免费资源的链接。</p>
<hr>
<h3 id="26-DesignWoop"><a href="#26-DesignWoop" class="headerlink" title="26. DesignWoop"></a>26. <a href="http://designwoop.com/" target="_blank" rel="external">DesignWoop</a></h3><figure name="7a9e" id="7a9e" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01ac3670a673ad677e.jpg" alt=""><br><br></figure>

<p>这个博客提供了许多文章给设计师和开发人员。站点主题包括工具，赠品，设计理念，灵感，面试，WordPress，主题，插件，方法小贴士，教程等。文章广泛的包含了教程、集合和链接等领域。链接包括CSS动画片段，WordPress主题，图标，排版，优秀的网站设计案例，线框图工具等等。站点的教程包括Photoshop，CSS，Sketch等等。</p>
<hr>
<h3 id="27-CSSReflex"><a href="#27-CSSReflex" class="headerlink" title="27. CSSReflex"></a>27. <a href="http://www.cssreflex.com/" target="_blank" rel="external">CSSReflex</a></h3><figure name="ba3c" id="ba3c" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01e370995d7e2d826d.jpg" alt=""><br><br></figure>

<p>这个网站由来自巴林的Naeem Noor创建并维护，专门面向于网络开发人员、设计师和编程人员。站点提供了很多工具，资源，代码片段和提示。内容包括博客，CSS生成器，CSS滤镜效果，CSS演示，响应式计算器和视频。它讨论许多方面如博客，服务器，UI设计，WYSIWYG生成器，图标，架构，模板，开发人员的浏览器扩展，资源链接等等。</p>
<hr>
<h3 id="28-Viget-Inspire"><a href="#28-Viget-Inspire" class="headerlink" title="28. Viget Inspire"></a>28. <a href="https://www.viget.com/articles" target="_blank" rel="external">Viget Inspire</a></h3><figure name="4604" id="4604" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01689eab54f21fa0e9.jpg" alt=""><br><br></figure>

<p>这个博客来的诞生是来自一个更大的项目，是由布莱恩·威廉姆斯，安迪·兰金和Wynne“流行”威廉姆斯于1999年成立。博客涵盖了设计和各种动效。站点主题包括UX，颜色，可访问性，新闻，事件，实验，实验，品牌管理，APP，游戏，插图，教程等等。</p>
<hr>
<h3 id="29-WinningWP"><a href="#29-WinningWP" class="headerlink" title="29. WinningWP"></a>29. <a href="http://winningwp.com/" target="_blank" rel="external">WinningWP</a></h3><figure name="fa8e" id="fa8e" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t015c54f854f0920f09.jpg" alt=""><br><br></figure>

<p>这是一个曾获奖的博客，由来自伦敦的布林威尔逊建立并运营，专注于WordPress相关的技术和资源，给任何对WordPress感兴趣的人提供有用的提示。站点的内容由来自世界各地的网页设计师，程序员和专业创意者提供。站点主题包括网站主题，插件，代码托管，SEO，安全性，性能，教程，提示，博客，系统组件，设计，营销，社交媒体，新闻，周边趣事等等。 尽管建立网站的初衷是专注于WordPress但也包含其他CMS。</p>
<hr>
<h3 id="30-Designrfix"><a href="#30-Designrfix" class="headerlink" title="30. Designrfix"></a>30. <a href="http://designrfix.com/" target="_blank" rel="external">Designrfix</a></h3><figure name="b8a1" id="b8a1" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t010dca9683345c69d8.jpg" alt=""><br><br></figure>

<p>这个网站致力于提供一个平台给所有志同道合的设计师一起交流技术和分享灵感。它包括灵感，教程，赠品，资源，平面设计，网页设计和商业活动。 主题包括移动平台，内容管理系统，CSS，jQuery，WordPress主题，工具，资源，图标，培训视频链接，插图，UI，UX，编码，Photoshop等等。</p>
<hr>
<h3 id="31-Creative-Overflow"><a href="#31-Creative-Overflow" class="headerlink" title="31. Creative Overflow"></a>31. <a href="http://creativeoverflow.net/" target="_blank" rel="external">Creative Overflow</a></h3><figure name="568b" id="568b" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01813ceb0a55420115.jpg" alt=""><br><br></figure>

<p>这是Jacques van Heerden建立的在线设计杂志。该网站是通过发布文章，建议，教程，资源和灵感以达到激发艺术家变得更好的目的。站点内容包括许多热门主题和目录，如收藏，免费资源，新闻，访谈，WordPress，新闻，赠品等。文章包括有关品牌，WordPress主题，商业发展，电子商务，徽标，营销的信息，甚至为您提供创意商业提供建议如何选择打印机。</p>
<hr>
<h3 id="32-One-Xtra-Pixel"><a href="#32-One-Xtra-Pixel" class="headerlink" title="32. One Xtra Pixel"></a>32. <a href="http://www.onextrapixel.com/" target="_blank" rel="external">One Xtra Pixel</a></h3><figure name="7b9e" id="7b9e" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01cddd1afd4e078bdb.jpg" alt=""><br><br></figure><br>这是一个为新加坡设计师和网站开发人员而设立的在线杂志。站点提供了许多资源，文章，教程和链接。主题包括设计，图形，WordPress，CSS，社交媒体，开发，免费资源，工具包，事件等。提供了一步一步的教程包括有关编写代码，在Photoshop中修改图像。甚至有一个连环图专们针对设计和Web开发的，偶尔也有其他主题的漫画。<br><br>————<br><br><br>### 33. <a href="http://www.noupe.com/" target="_blank" rel="external">Noupe</a><br><br><figure name="ede9" id="ede9" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t0184210711545f023f.jpg" alt=""><br><br></figure>

<p>这是由来自德国的Commindo Media GmbH＆Co. KG建立的博客。站点的内容专门为Web开发人员和设计师而编写的。站点主题包括网页设计，排版，图形，CSS，JavaScript，Ajax，广告，市场营销，WordPress，电子商务，自由职业者，灵感等等。 文章包括设计教程，编写代码，使用图形程序，SEO，免费资源，卡通，主题，插件，提示，技巧等等。</p>
<hr>
<h3 id="34-InstantShift"><a href="#34-InstantShift" class="headerlink" title="34. InstantShift"></a>34. <a href="http://www.instantshift.com/" target="_blank" rel="external">InstantShift</a></h3><figure name="319f" id="319f" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01438f089f669ddfe4.jpg" alt=""><br><br></figure>

<p>这是一个为网页设计师和开发人员设计和提供灵感的博客。它每天都有资源推荐，内容包括灵感，文章，教程，赠品，网页设计，WordPress，字体，CSS，图标，摄影，Photoshop，JavaScript，Illustrator，平面设计，信息图表，案例，logo，新闻和更多。</p>
<hr>
<h3 id="35-WPKUBE"><a href="#35-WPKUBE" class="headerlink" title="35. WPKUBE"></a>35. <a href="https://www.wpkube.com/" target="_blank" rel="external">WPKUBE</a></h3><figure name="7268" id="7268" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01c0546736f38eb6b4.jpg" alt=""><br><br></figure>


<p>这个网站是由Devesh Sharma创立的。它主要集中在WordPress，包括学习指南、教程方法、插件、新闻、评论、提示和技巧、插件、主题，评论、安全、SEO、初学者指南和代码等。 它包括许多资源的链接，例如工具，代码托管和优惠券。站点文章是由WordPress专业人员写的，内容广泛，面向各个级别的从业人士。</p>
<hr>
<h3 id="36-Fresh-Web-Dev"><a href="#36-Fresh-Web-Dev" class="headerlink" title="36. Fresh Web Dev"></a>36. <a href="http://freshwebdev.com/" target="_blank" rel="external">Fresh Web Dev</a></h3><figure name="9404" id="9404" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t014eeebb3d1b7325a7.jpg" alt=""><br><br></figure>

<p>这个网站涵盖网页设计和开发，重点是WordPress，Javascript，CSS，PHP，设计，HTML5和其他各个方面。站点它包括WordPress，Photoshop，编写代码，Linux服务器开发和配置，字体，图形等产品的文章和教程。他们还提供交易和免费资源的链接。内容由专业的设计师和开发人员为其群体所写。</p>
<hr>
<h3 id="37-DesignM-ag"><a href="#37-DesignM-ag" class="headerlink" title="37. DesignM.ag"></a>37. <a href="https://designm.ag/" target="_blank" rel="external">DesignM.ag</a></h3><figure name="f354" id="f354" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t0105a5e523af2ae8a4.jpg" alt=""><br><br></figure>


<p>这是一个基于社区的网站，包括博客，设计图库，用户提交的新闻和招聘专区。博客包括工具，图标，主题，代码片段，字体，图形等资源。教程包括Photoshop，网页设计等。站点主题还包括采访，灵感，WordPress，设计师案例，免费资源，排版，UI等。该站点涵盖了所有的网页设计的方方面面。</p>
<hr>
<h3 id="38-Creative-Market-Blog"><a href="#38-Creative-Market-Blog" class="headerlink" title="38. Creative Market Blog"></a>38. <a href="https://creativemarket.com/" target="_blank" rel="external">Creative Market Blog</a></h3><figure name="8367" id="8367" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01b244f4b062023e76.jpg" alt=""><br><br></figure>

<p>这个博客有很多关于网页设计和前端开发的教程。它包括许多文章和贴士，如字体设计和优化排版，使用Photoshop的小贴士，推荐书籍的列表，解决常见的设计问题的方法论，使用负空间，WordPress，PHP，HTML，CSS，灵感等。目标受众是从初级到高级的网站开发人员和设计师。</p>
<hr>
<h3 id="39-SitePoint"><a href="#39-SitePoint" class="headerlink" title="39. SitePoint"></a>39. <a href="https://www.sitepoint.com/" target="_blank" rel="external">SitePoint</a></h3><figure name="7faf" id="7faf" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01c35fe5c4e3cda660.jpg" alt=""><br><br></figure>

<p>这个博客由Mark Harbottle和Matt Mickiewicz创立。站点提供新颖的想法，概念和新技术等内容，还包括文章、课程、教程、书籍或任何与设计和构建网站相关的内容。网站用户讨论代码（HTML，CSS，PHP，JavaScript和Ruby），移动开发，WordPress，设计，UX，商业运营，以及任何与网络技术相关的内容。</p>
<hr>
<h3 id="40-Web-Design-Ledger"><a href="#40-Web-Design-Ledger" class="headerlink" title="40. Web Design Ledger"></a>40. <a href="https://webdesignledger.com/" target="_blank" rel="external">Web Design Ledger</a></h3><figure name="954b" id="954b" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t011e5050c130ca8fe0.jpg" alt=""><br><br></figure>


<p>这是一个涵盖网页设计和开发且同时提供了大量的资源的博客。站点主题包括网页设计、灵感、UI、图形、访谈、网络开发、评论和内容管理系统。文章包含免费资源链接，时事新闻，APP教程，工具，字体，图标，矢量图形，WordPress，Drupel，Ghost，编码，电子商务，移动开发，可穿戴设备，排版设计等信息的链接。</p>
<hr>
<h3 id="41-envato-tuts"><a href="#41-envato-tuts" class="headerlink" title="41. envato tuts+"></a>41. <a href="https://tutsplus.com/" target="_blank" rel="external">envato tuts+</a></h3><figure name="1c96" id="1c96" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t0112c00ccb3e8981a0.jpg" alt=""><br><br></figure>

<p>这是一个有很多文章的钱打U呢和设计的教程网站。站点类别包括Photoshop，Illustrator，矢量，插图，工具和提示，灵感，新闻，设计，文本效果，CSS，HTML，UX，UI，工作流，设计理论等等。文章针对的是初级阶段，内容十分广泛。还有一些可供订阅的课程。</p>
<hr>
<h3 id="42-HappyCog’s-Cognition-Blog"><a href="#42-HappyCog’s-Cognition-Blog" class="headerlink" title="42. HappyCog’s Cognition Blog"></a>42. <a href="http://cognition.happycog.com/" target="_blank" rel="external">HappyCog’s Cognition Blog</a></h3><figure name="56ea" id="56ea" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01f572b1611c77478a.jpg" alt=""><br><br></figure>


<p>这个博客来自Happy Cog的创始人Jeffrey Zeldman建立的，主要关注设计，经验体会和代码。站点主题包括流程，设计，前端开发，团队，项目管理，社区，职业，战略，公司和客户关系。文章包括案例研究，教程，方法提示，商业运营和客户关系处理，排版，编码，Photoshop等等。大多数文章是是精心编写和详细的理论研究成果。</p>
<hr>
<h3 id="43-WebAppers"><a href="#43-WebAppers" class="headerlink" title="43. WebAppers"></a>43. <a href="http://www.webappers.com/" target="_blank" rel="external">WebAppers</a></h3><figure name="2b96" id="2b96" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t011168eb4ac3b390c4.jpg" alt=""><br><br></figure>

<p>这是一个专门为Web开发人员和设计人员分享开源资源的博客。对于设计师，站点有免费的图标，字体，表，股票照片，画笔和设计灵感。对于开发人员，有很多JavaScript和Ajax组件，如插件，菜单，工具提示，图表，轮转图，日历，模态窗等。它还涵盖代码托管，电子商务，社交媒体，工具，安全，统计等等更多。该站点的文章详细和前沿。</p>
<hr>
<h3 id="44-Web-Field-Manual"><a href="#44-Web-Field-Manual" class="headerlink" title="44. Web Field Manual"></a>44. <a href="http://webfieldmanual.com/" target="_blank" rel="external">Web Field Manual</a></h3><figure name="1fb9" id="1fb9" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01b52d9c0ca57ba27f.jpg" alt=""><br><br></figure>


<p>此博客提供了一个用于UX和UI设计的资源列表。该站点是由网页设计师策划和维护，包含了大量的网页设计文章和资源。主题设计包括人们趋势，灵感，规范的和不规范的风格指南，工作进程，工作流，工具箱，优秀的和拙劣的网格和排版，动画制作的最佳与最坏方式，设计准则的最佳与最坏遵守，和可访问性的最佳与最坏标准。每个类别都有详细的资源列表。站点主题包括编码入门，最佳实践，灵感，参考，流行趋势，性能，CSS/SASS，SVG，JavaScript，工作流，工具箱和各种库。</p>
<hr>
<h3 id="45-UXPin-Blog"><a href="#45-UXPin-Blog" class="headerlink" title="45. UXPin Blog"></a>45. <a href="https://www.uxpin.com/studio/blog/" target="_blank" rel="external">UXPin Blog</a></h3><figure name="1aff" id="1aff" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01930450bd98666b54.jpg" alt=""><br><br></figure>

<p>UXPin是供网页设计师使用的产品设计平台。他们的博客侧重于各方面的各种平台的用户体验。它包含大量关于用户体验设计，移动端，设计趋势，最佳实践，设计小贴士，交互设计，UI设计，网页设计，元素和模式，过程，UXPin，线框，平面设计，团队协作，可用性，原型，草图，样机，Photoshop等等。该站点的文章都非常实用和详细。</p>
<hr>
<h3 id="46-Good-UI"><a href="#46-Good-UI" class="headerlink" title="46. Good UI"></a>46. <a href="https://www.goodui.org/" target="_blank" rel="external">Good UI</a></h3><figure name="8dfc" id="8dfc" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01a796a551a4e92179.jpg" alt=""><br><br></figure>

<p>这是一个致力于制作最好的网站布局，以改善用户界面的网站和博客。网站介绍最佳实践，布局，如何合并功能以达到更简洁的设计。大力推荐使用社交途径，来无论何处可以何处响应行动呼吁，来如何使可点击和可选择的不同样式表，来如何推荐一个选择来帮助用户决策，也提供了允许用户取消错误行为的决策，来具体证明明最佳的受众是谁，来显示更强的对比，使用更少的字段，合理显示所有选项等等。站点的信息都很简短，简单，易于理解。</p>
<hr>
<h3 id="47-Spyre-Studios"><a href="#47-Spyre-Studios" class="headerlink" title="47. Spyre Studios"></a>47. <a href="http://spyrestudios.com/" target="_blank" rel="external">Spyre Studios</a></h3><figure name="a4be" id="a4be" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01fe978827f23fc240.jpg" alt=""><br><br></figure>

<p>这是一个包含很多文章和教程的网页设计和开发电子杂志。站点目录包括设计，展示，非同寻常的灵感，教程，CSS，资源，工具，UX，移动端，免费资源，可用性，商业，排版，Illustrator，Photoshop，极简主义，工具等。还有很多免费下载的元素，图标，字体，PSD模板等。文章的大小合适阅读，包含和很多的分步细节。</p>
<hr>
<h3 id="48-Skyje"><a href="#48-Skyje" class="headerlink" title="48. Skyje"></a>48. <a href="http://skyje.com/" target="_blank" rel="external">Skyje</a></h3><figure name="c2d0" id="c2d0" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t016fe630f295c871de.jpg" alt=""><br><br></figure>

<p>这个博客成立于2008年，是一个面向网页设计师和网页开发人员的网站。主题包括社交网络，新闻和与Web 2.0相关的一切。站点主题包括设计，WordPress，社交媒体，SEO，标志，灵感，教程，免费资源，字体，图标，Photoshop，模板等。教程主要覆盖图形以及重点关注Photoshop。还包括插件、代码（JavaScript和CSS）和Illustrator。</p>
<hr>
<h3 id="49-MonsterPost"><a href="#49-MonsterPost" class="headerlink" title="49. MonsterPost"></a>49. <a href="http://www.templatemonster.com/blog/" target="_blank" rel="external">MonsterPost</a></h3><figure name="48ca" id="48ca" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t014dd0d6addf463999.jpg" alt=""><br><br></figure>

<p>这是世界优秀网页模板站点Template Monster的设计博客。站点主题包括新闻，文章，工具，赠品，灵感，信息图表，WordPress和Joomla。 教程包括文章和视频，并重点关注WordPress，排版，CSS，HTML，jQuery，Photoshop，Illustrator，网络技术，Web开发方法论，以及设计网站和UI元素。</p>
<hr>
<h3 id="50-UX-Matters"><a href="#50-UX-Matters" class="headerlink" title="50. UX Matters"></a>50. <a href="http://www.uxmatters.com/" target="_blank" rel="external">UX Matters</a></h3><figure name="3b16" id="3b16" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01b873e065d6a68110.jpg" alt=""><br><br></figure>

<figure name="b23d" id="b23d" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01e502a8625d89cc32.jpg" alt=""><br><br></figure>

<figure name="5afb" id="5afb" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t018a810c17c59136d1.jpg" alt=""><br><br><figcaption>Here’s the range of topics</figcaption><br><br></figure>


<p>这本网络杂志由Pabini Gabriel-Petit于2005年创立，为UX开发人员提供视野和灵感。它提供了许多有价值的建议，最佳实践，主题观点，以及探索UX设计的战略方面的深层思考的文章。主题包括网页设计，移动端，用户研究，视觉设计，web应用程序设计，设计流程，访谈，评论，内容创建，通信设计，架构，商业，战略等等。</p>
<hr>
<h3 id="51-Usability-Geek"><a href="#51-Usability-Geek" class="headerlink" title="51. Usability Geek"></a>51. <a href="http://usabilitygeek.com/" target="_blank" rel="external">Usability Geek</a></h3><figure name="6a1b" id="6a1b" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01bd35382ff7282f03.jpg" alt=""><br><br></figure>


<p>这个博客开始由Justin Mifsud在2011年建立的，出发点是作为一个提升网站可用性的重要性的兴趣交流网站。Justin想提高网页设计师和开发人员在商业和政治网站可用性设计的意识。站点主题包括可用性，指南，测试，用户体验（UX），商业运营，转换，人机交互（HCI），术语，评论，资源和信息架构（IA）。</p>
<hr>
<h3 id="52-Boxes-and-Arrows"><a href="#52-Boxes-and-Arrows" class="headerlink" title="52. Boxes and Arrows"></a>52. <a href="http://boxesandarrows.com/" target="_blank" rel="external">Boxes and Arrows</a></h3><figure name="7655" id="7655" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t0151fb81554e14562c.jpg" alt=""><br><br></figure>

<p>这是一本2001年开始的同行写的杂志，讨论所有关于设计的东西。站点主题包括交互设计，信息架构，平面设计，甚至商业服务设计。<br>站点目录包括设计原则，发现，研究和测试，过程和方法，界面，可交付成果和文档，书评，会议和活动，软件和工具，以及工作场所和职业。</p>
<hr>
<h3 id="53-Web-Design-Dev"><a href="#53-Web-Design-Dev" class="headerlink" title="53. Web Design Dev"></a>53. <a href="http://www.webdesigndev.com/" target="_blank" rel="external">Web Design Dev</a></h3><figure name="2e13" id="2e13" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t018572f93ee627eff2.jpg" alt=""><br><br></figure>

<p>这个网站专注于网页设计包含所有东西。站点主题包括赠品，网站模板，WordPress主题，Photoshop，Dreamweaver教程，Illustrator，评论，灵感，网站开发，CSS，HTML，合集，编程，网上兼职，访谈和SEO。该站点涵盖了从移动界面设计到开发电子商务网站开发之间的方方面面。</p>
<hr>
<h3 id="54-Impressive-Webs"><a href="#54-Impressive-Webs" class="headerlink" title="54. Impressive Webs"></a>54. <a href="https://www.impressivewebs.com/" target="_blank" rel="external">Impressive Webs</a></h3><figure name="682d" id="682d" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t0138401c716fecdd54.jpg" alt=""><br><br></figure>

<p>这是Louis Lazaris的个人博客，作者是一个自由的网络开发人员，杂志站点SitePoint的HTML/CSS内容的管理编辑，和两本关于HTML/CSS的书的作者。博客内容大多是关于HTML、CSS和JavaScript的文章。Louis在他的博客讨论相关的概念，原则和bug。博客也它包括许多文章、教程，CSS基础，屏幕录像，新闻，评论等等。这个博客站点强调的代码和设计的结合。</p>
<hr>
<h3 id="55-Design-Bombs"><a href="#55-Design-Bombs" class="headerlink" title="55. Design Bombs"></a>55. <a href="http://www.designbombs.com/" target="_blank" rel="external">Design Bombs</a></h3><figure name="924e" id="924e" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01417ede4b91ba2e8d.jpg" alt=""><br><br></figure>

<p>最初作为一个网页设计展示画廊，现已成为分享网页设计的想法，文章，教程和资源，以帮助网页设计师提升他们技艺的平台。站点内容包括WordPress主题和插件，网站设计的综述，赠品，独家优惠等等。网页设计师可以这里找到很多高品质的资源。</p>
<p>言尽于此，学习之路不止。<br>Have a nice day!</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@AleCC" target="_blank" rel="external">Alecc</a><br>链接：<a href="http://www.zcfy.cc/article/1417" target="_blank" rel="external">http://www.zcfy.cc/article/1417</a><br>原文：<a href="https://medium.com/web-development-zone/top-blogs-about-web-design-and-web-development-57706bb620be#.uhbnrozhw" target="_blank" rel="external">https://medium.com/web-development-zone/top-blogs-about-web-design-and-web-development-57706bb620be#.uhbnrozhw</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS变量和预处理变量有什么不同？]]></title>
      <url>http://jsgrblog.win/2016/12/10/CSS%E5%8F%98%E9%87%8F%E5%92%8C%E9%A2%84%E5%A4%84%E7%90%86%E5%8F%98%E9%87%8F%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>变量是 CSS 预处理器 存在的最主要的原因之一。设置变量的能力是有用的，比如把一个颜色设置成变量，用那个变量贯穿你写的CSS，你会发现它是一致的，抽离的，并且容易修改。你也可以用原生 CSS变量（CSS自定义变量）做同样的事。但是也有一些重要的区别应该搞清楚。<br><a id="more"></a></p>
<h3 id="一个简单的预处理变量的用法像是这样："><a href="#一个简单的预处理变量的用法像是这样：" class="headerlink" title="一个简单的预处理变量的用法像是这样："></a>一个简单的预处理变量的用法像是这样：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$brandColor: #F06D06;</div><div class="line"></div><div class="line">.main-header &#123;</div><div class="line">  color: $brandColor;</div><div class="line">&#125;</div><div class="line">.main-footer &#123;</div><div class="line">  background-color: $brandColor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是使用 <a href="http://sass-lang.com/" target="_blank" rel="external">Sass</a> 写的 SCSS 变量，但是所有的 <strong>CSS预处理器</strong> 都提供这种变量的概念：<a href="http://stylus-lang.com/docs/variables.html" target="_blank" rel="external">Stylus</a>，<a href="http://lesscss.org/features/" target="_blank" rel="external">Less</a>，<a href="https://github.com/postcss/postcss-simple-vars" target="_blank" rel="external">PostCSS</a>，等等。</p>
<p>上面这段代码如果放入浏览器里什么都不会做。因为浏览器不理解这种声明并且忽略它。预处理器需要把它编译成浏览器能够理解的 CSS。这段代码会编译成这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.main-header &#123;</div><div class="line">  color: #F06D06;</div><div class="line">&#125;</div><div class="line">.main-footer &#123;</div><div class="line">  background-color: #F06D06;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它现在是有效的 CSS 了。那个变量是预处理器语言的一个部分，而不是 CSS 本身。一旦编译完成，变量就消失了。</p>
<p>最近，原生 CSS 开始支持 CSS变量，或者叫做 “CSS自定义属性”。它允许你直接在CSS里使用变量。不需要编译。</p>
<h3 id="一个简单的自定义-CSS-属性的用法像这样："><a href="#一个简单的自定义-CSS-属性的用法像这样：" class="headerlink" title="一个简单的自定义 CSS 属性的用法像这样："></a>一个简单的自定义 CSS 属性的用法像这样：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">:root &#123;</div><div class="line">  --main-color: #F06D06;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.main-header &#123;</div><div class="line">  color: var(--main-color);</div><div class="line">&#125;</div><div class="line">.main-footer &#123;</div><div class="line">  background-color: var(--main-color);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这两个例子达到了完全相同的结果。我们可以定义一个颜色，使用两次。</p>
<p>那么，问题来了…… 为什么要使用 <strong>原生CSS</strong> 重复造轮子呢？</p>
<h3 id="为什么你要用原生的-CSS-自定义属性？"><a href="#为什么你要用原生的-CSS-自定义属性？" class="headerlink" title="为什么你要用原生的 CSS 自定义属性？"></a>为什么你要用原生的 CSS 自定义属性？</h3><ul>
<li><p>你用这些属性 <strong>不需要一个预处理器</strong>。</p>
</li>
<li><p><strong>他们是顺序执行的</strong>。 你可以在任何选择器中设置一个变量或覆盖现有变量。</p>
</li>
<li><p>当它们的值变了 (e.g. 媒体查询或其他状态)， <strong>浏览器会在需要的时候重绘</strong>.</p>
</li>
<li><p>你可以访问并且 <strong>用 JavaScript 操纵它们</strong>.</p>
</li>
</ul>
<p>对于顺序执行，这有一个简单的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">:root &#123;</div><div class="line">  --color: red;</div><div class="line">&#125;</div><div class="line">body &#123;</div><div class="line">  --color: orange;</div><div class="line">&#125;</div><div class="line">h2 &#123;</div><div class="line">  color: var(--color);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>任何 <code>h2</code> 都会是 orange，因为所有 <code>h2</code> 都是 <code>body</code> 的孩子，而 <code>body</code> 有更高的应用特权。</p>
<p>你甚至能在媒体查询中重置变量并且把这些变量级联到任何地方去使用，有些事仅用预处理器变量是处理不了的。</p>
<p>查看 <a href="http://codepen.io/chriscoyier/pen/ORdLvq?editors=0110" target="_blank" rel="external">这个例子</a> 当媒体查询改变那些用来设置简单网格的变量：</p>
<p><img src="http://p0.qhimg.com/t01c28f4d0f8b30ab0e.gif" alt=""></p>
<p>Rob Dodson 对 CSS自定义属性的见解 <a href="https://developers.google.com/web/updates/2016/02/css-variables-why-should-you-care" target="_blank" rel="external">CSS 变量：你为什么要关心？</a></p>
<blockquote>
<p>那些 [预处理器] 使用的变量面临一个重要的缺点，那就是它们是静态的，无法在运行时改变。加入可在运行时更改变量的能力，不仅仅为像动态应用主题打开了大门，也对响应式设计和多边形填充的CSS未来潜力具有深远的影响。</p>
</blockquote>
<p>他提到 <a href="https://googlechrome.github.io/samples/css-custom-properties/index.html" target="_blank" rel="external">一个例子</a> 当 JavaScript 改变样式时。它不直接在元素上改变样式，而仅仅是在<strong>运行时</strong>重置一些变量：</p>
<p><img src="http://p0.qhimg.com/t01b546e0e692ac4535.gif" alt=""></p>
<p>Wes Bos 也有一个关于这个的很好示例：</p>
<p>看源码 <a href="https://codepen.io/wesbos/pen/adQjoY/" target="_blank" rel="external">用 JS 更新 CSS 变量</a> by Wes Bos (<a href="http://codepen.io/wesbos" target="_blank" rel="external">@wesbos</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>注意有一大串我留在这的关于 CSS自定义属性的东西。你可以设置回滚。也可以把它们和 <code>calc()</code> 一起使用。你可以有很多技巧使用它们。看下面的家庭作业部分：</p>
<h3 id="为什么使用预处理器变量？"><a href="#为什么使用预处理器变量？" class="headerlink" title="为什么使用预处理器变量？"></a>为什么使用预处理器变量？</h3><ul>
<li><p>最重要的一点：没有传统浏览器支持的条件。它们被编译成一般CSS。</p>
</li>
<li><p>其次：你可以用值传递单位，如果你一定要的话。</p>
</li>
</ul>
<h3 id="你可以一起使用它们"><a href="#你可以一起使用它们" class="headerlink" title="你可以一起使用它们"></a>你可以一起使用它们</h3><p>有很多令人信服的原因去一起使用它们。你绝对可以用一个预处理器生成 CSS自定义属性。Ivan Ivanov 写了一个示例，允许你通过 Sass 写 CSS自定义属性的语法，输出的代码如下：</p>
<p>查看源代码 <a href="http://codepen.io/vank0/pen/kkGvAb/" target="_blank" rel="external">现在就使用 CSS4 变量</a> by $i.van(ov) (<a href="http://codepen.io/vank0" target="_blank" rel="external">@vank0</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>我试图去思考，当我们使用 CSS自定义属性而不用担心浏览器支持时，那我们就用它们去处理所有我们的变量正在处理的事。我们也许还在用预编译器为了其他方便，但是变量处理在原生CSS看起来不错，它可能值得把所有都搬到这个上面来。</p>
<h3 id="关于CSS自定义属性的浏览器支持"><a href="#关于CSS自定义属性的浏览器支持" class="headerlink" title="关于CSS自定义属性的浏览器支持"></a>关于CSS自定义属性的浏览器支持</h3><p>这个浏览器支持数据事从 <a href="http://caniuse.com/#feat=css-variables" target="_blank" rel="external">Caniuse</a>来的，它也报告了这个功能在 W3C 候选推荐位置。</p>
<h4 id="桌面"><a href="#桌面" class="headerlink" title="桌面"></a>桌面</h4><p>Google Chrome，Mozilla Firefox，Internet Explorer，Opera，Apple Safar i4931No369.1</p>
<h4 id="手机-平板电脑"><a href="#手机-平板电脑" class="headerlink" title="手机 / 平板电脑"></a>手机 / 平板电脑</h4><p>iOS Safari，Android，Opera Mobile，Android Chrome，Android Firefox 9.353375349</p>
<h3 id="家庭作业时间-强化"><a href="#家庭作业时间-强化" class="headerlink" title="家庭作业时间: 强化!"></a>家庭作业时间: 强化!</h3><h4 id="1-看-Lea-Verou-的-CSS-变量：-var-–subtitle"><a href="#1-看-Lea-Verou-的-CSS-变量：-var-–subtitle" class="headerlink" title="1) 看 Lea Verou 的 CSS 变量： var(–subtitle);"></a>1) 看 Lea Verou 的 <em>CSS 变量： var(–subtitle);</em></h4><p>她涵盖了大量的实际应用，还有一些技巧例如当变量顺序执行时控制一些陷阱。</p>
<h4 id="2-看-David-Khourshid-的-CSS-的响应式动画【Reactive-Animations-with-CSS】"><a href="#2-看-David-Khourshid-的-CSS-的响应式动画【Reactive-Animations-with-CSS】" class="headerlink" title="2) 看 David Khourshid 的 CSS 的响应式动画【Reactive Animations with CSS】"></a>2) 看 David Khourshid 的 <em>CSS 的响应式动画【Reactive Animations with CSS】</em></h4><p>David 分享了这个主意用CSS变量去连接 DOM 事件，能够做一些非常牛X的UI，而不用太多代码。查看他的网站 (<a href="http://slides.com/davidkhourshid/reactanim#/26" target="_blank" rel="external">从 #26 开始</a>) 那个展示了他是多么牛X。</p>
<h4 id="3-读-Harry-Roberts-Pragmatic-Practical-and-Progressive-Theming-with-Custom-Properties"><a href="#3-读-Harry-Roberts-Pragmatic-Practical-and-Progressive-Theming-with-Custom-Properties" class="headerlink" title="3) 读 Harry Roberts Pragmatic, Practical, and Progressive Theming with Custom Properties"></a>3) 读 Harry Roberts <em>Pragmatic, Practical, and Progressive Theming with Custom Properties</em></h4><p><a href="http://csswizardry.com/2016/10/pragmatic-practical-progressive-theming-with-custom-properties/" target="_blank" rel="external">他的文章</a> 解释怎么用CSS变量让站点的用户自定义主题更容易。</p>
<h4 id="4-阅读-Roman-Komarov-的-关于-CSS-变量的条件【Conditions-for-CSS-Variables】"><a href="#4-阅读-Roman-Komarov-的-关于-CSS-变量的条件【Conditions-for-CSS-Variables】" class="headerlink" title="4) 阅读 Roman Komarov 的 关于 CSS 变量的条件【Conditions for CSS Variables】"></a>4) 阅读 Roman Komarov 的 <em>关于 CSS 变量的条件【Conditions for CSS Variables】</em></h4><p>尽管它已经被所有人谈论很久了，但却没有逻辑门在CSS中 (e.g. <code>@if (true) { }</code>)。我们用一些东西来伪装成逻辑门，比如 <code>:checked</code>，但是那依赖 DOM。 <a href="http://kizu.ru/en/fun/conditions-for-css-variables/" target="_blank" rel="external">Roman 展示了一个技巧</a> 你能够用 <code>0</code> 或 <code>1</code> 在一个变量上，然后通过 <code>calc()</code> 来模拟布尔逻辑。</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@llq" target="_blank" rel="external">千罹</a><br>链接：<a href="http://www.zcfy.cc/article/1567" target="_blank" rel="external">http://www.zcfy.cc/article/1567</a><br>原文：<a href="https://css-tricks.com/difference-between-types-of-css-variables/" target="_blank" rel="external">https://css-tricks.com/difference-between-types-of-css-variables/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何创建响应式删格系统]]></title>
      <url>http://jsgrblog.win/2016/12/10/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%93%8D%E5%BA%94%E5%BC%8F%E5%88%A0%E6%A0%BC%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p>对自定义网页设计来说，最好的补充之一就是定制的响应式栅格系统。你可以自定义你需要的一切，包括有多少列数，列的大小，列之间的间隔，甚至是需要改变布局的临界点。</p>
<p>不幸的是，许多人甚至不会尝试着为他们的网页设计去建立自定义栅格，因为他们缺乏建立那样一个系统的知识和信心。</p>
<p>因此，在这篇文章中，我想帮助大家获得需要建立一个定制的栅格系统所需要的知识和信心。希望你能脱离框架，并且看完这篇文章后可以在你的下一个项目尝试自定义栅格。<br><a id="more"></a></p>
<h2 id="如何开始"><a href="#如何开始" class="headerlink" title="如何开始"></a>如何开始</h2><p>在创建删格系统之前你需要知道三件事情。</p>
<p><strong>首先，设计你的删格</strong>.</p>
<p>你是要使用等宽的还是不等宽的网格列？要有多少列数？间隔和列的大小是多少？</p>
<p>当你回答了上面的问题你只能做出正确的网格计算。为了解决大家的困扰，我写了一篇<a href="https://zellwk.com/blog/designing-grids" target="_blank" rel="external">设计删格</a>。如果你正想学习设计一个删格系统可以读一下。</p>
<p><strong>其次，你需要明确你的删格系统在不同视口的表现</strong></p>
<p>当屏幕视口发生变化时你要实时重新计算列和间隔么？当间隔保持不变时，你要改变列的大小么？在明确的分界点上你要改变删格列的数量么？</p>
<p>你需要好好回答这些问题。在如何计算列宽和间隔宽上，这些会给你一些线索。在提到的那篇<a href="https://zellwk.com/blog/designing-grids/" target="_blank" rel="external">设计删格</a>中我也写了这些要考虑的东西，你不确定这些问题的话可以参考下。</p>
<p><strong>最后，你愿意在HTML里写删格类吗？</strong>.</p>
<p>当涉及到删格系统时，前端世界拆分出两个派系。</p>
<p>一派就是在HTML中写入删格类名（以Bootstrap和Foundation为代表）。我称这一派<strong>HTML删格系统</strong>。HTML像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;container&quot;&gt;</div><div class="line">  &lt;div class=&quot;row&quot;&gt;</div><div class="line">    &lt;div class=&quot;col-md-9&quot;&gt;Content&lt;/div&gt;</div><div class="line">    &lt;div class=&quot;col-md-3&quot;&gt;Sidebar&lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>第二个派系主张在CSS中创建删格。我称之为<strong>CSS 删格系统</strong>。</p>
<p>CSS删格系统的HTML代码相比HTML删格系统的要简单一点。对于同样的页面你需要创建的标签也会少一点。同时，你也不需要记住这些删格类名是什么：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;content-sidebar&quot;&gt;</div><div class="line">  &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;sidebar&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>另一方面，CSS删格系统中的CSS更复杂。你需要仔细想清楚才能取得一个简单的解决方案（如果你从没创建过）。</p>
<p><strong>我会选择什么？</strong></p>
<p>许多前端大牛会选择CSS删格系统。我，也不例外，属于CSS删格派系（当然我不敢称自己是大牛）。</p>
<p>关于我为什么选择CSS删格系统而不是HTML删格系统，我写过<a href="https://zellwk.com/blog/migrating-from-bootstrap-to-susy/" target="_blank" rel="external">另一篇文章</a>，如果你感兴趣可以看下。我还写了<a href="https://zellwk.com/blog/from-html-grids-to-css-grids/" target="_blank" rel="external">从HTML删格到CSS删格</a>，如果你有兴趣做个转换，这篇可以帮你从HTML删格系统迁移到CSS删格系统。<br>(这么多文章… 😢)</p>
<p>总之，这就是在建立删格系统之前你需要明确的三件事。概括下就是：</p>
<ol>
<li><p>系统设计</p>
</li>
<li><p>在不同视口的删格表现</p>
</li>
<li><p>是否使用HTML或者CSS删格系统</p>
</li>
</ol>
<p>如果我们有了这些必要知识我们只需要继续前进就行了。这篇文章的剩下部分就是我们接下来要做的事情：</p>
<ol>
<li>这个删格系统有一个1140px的最大宽度，具备12个75px宽的列以及20px的间隔。（参考<a href="https://zellwk.com/blog/designing-grids/" target="_blank" rel="external">设计删格</a>里如何获得这些数值的提示）</li>
<li>当视口大小变了，在间隔保留20px固定大小的同时应该实时重新计算列宽大小。（在<a href="https://zellwk.com/blog/designing-grids/" target="_blank" rel="external">设计删格</a>中我提到了为什么会选择这种展现形式）</li>
<li>我打算使用CSS删格系统（在<a href="https://zellwk.com/blog/migrating-from-bootstrap-to-susy/" target="_blank" rel="external">这篇文章</a>中有我为什么建议用CSS删格的原因）</li>
</ol>
<p>有了这些，让我们开始吧！</p>
<h2 id="建立删格系统"><a href="#建立删格系统" class="headerlink" title="建立删格系统"></a>建立删格系统</h2><p>建立删格系统有八个步骤，概括如下：</p>
<ol>
<li><p>选择一个标准来创建删格宽度</p>
</li>
<li><p>设置<code>box-sizing</code> 为<code>border-box</code></p>
</li>
<li><p>创建一个删格容器</p>
</li>
<li><p>计算列宽</p>
</li>
<li><p>决定间隔定位</p>
</li>
<li><p>创建一个调试网格</p>
</li>
<li><p>让布局变化</p>
</li>
<li><p>让你的布局响应变化</p>
</li>
</ol>
<p>一旦你想明白了，这八个步骤大部分是相对明确简单的。我会展开每个步骤详细说明其中你需要知道每个事项。</p>
<h2 id="Step-1-选择一个标准"><a href="#Step-1-选择一个标准" class="headerlink" title="Step 1: 选择一个标准"></a>Step 1: 选择一个标准</h2><p>使用CSS删格，FlexBox，或者简单原始的floats来创建删格？对每个标准来说你的考虑事项以及实现细节都会有所不同。</p>
<p>CSS删格是到目前为止三种标准中创建网格最好的工具（因为是网格嘛 😎）。遗憾的是，现在支持CSS删格会留下更多需要被解决的问题（原文：support for CSS grid leaves more to be desired right now）。每个浏览器将CSS删格布局隐藏在一个标志后面，这就是为什么我们不会在这篇文章中去碰它。如果你对CSS删格有兴趣，我强烈建议参考<a href="http://gridbyexample.com" target="_blank" rel="external">Rachel Andrew的作品</a>。</p>
<p>接下来，我们来看看Flexbox和Floats。使用这两个标准的注意事项是相似的，所以你可以挑一个继续跟着这篇文章走下去。这里我将使用Floats，因为它对初学者来说更容易解释理解。</p>
<p>但是如果你选择用Flexbox，请记住这里有一些细微的差别你需要调整。</p>
<h2 id="Step-2-设置box-sizing-为border-box"><a href="#Step-2-设置box-sizing-为border-box" class="headerlink" title="Step 2: 设置box-sizing 为border-box"></a>Step 2: 设置<code>box-sizing</code> 为<code>border-box</code></h2><p><code>box-sizing</code>属性可以改变浏览器用来计算<code>width</code> 和<code>height</code> 属性的默认CSS盒模型。通过改变 <code>box-sizing</code> 为<code>border-box</code>，我们可以更轻松地计算列和间隔的大小（你接下来就会明白为什么）。</p>
<p>下面这张图，总结了<code>width</code>在不同的<code>box-sizing</code> 值下是如何计算的。</p>
<p><img src="http://p0.qhimg.com/t010a809db5f1344b8a.jpg" alt="Box sizing property and how it affects width calculations"></p>
<p>box-sizing属性及其如何影响宽度计算</p>
<p>在一个网站上，我通常将所有元素的<code>box-sizing</code> 值都设为 <code>border-box</code>，这样<code>width</code> 和 <code>height</code>计算全部都保持了一致（还有直观）。就这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">  box-sizing: border-box;</div><div class="line">&#125;</div><div class="line"></div><div class="line">*,</div><div class="line">*:before,</div><div class="line">*:after &#123;</div><div class="line">  box-sizing: inherit;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>提示：如果你需要一个更深入理解<code>box-sizing</code>，我建议你看 <a href="https://zellwk.com/blog/understanding-css-box-sizing/" target="_blank" rel="external">这个</a>.</p>
<h2 id="Step-3-创建一个删格容器"><a href="#Step-3-创建一个删格容器" class="headerlink" title="Step 3: 创建一个删格容器"></a>Step 3: 创建一个删格容器</h2><p>每个栅格有一个决定了它最大宽度的容器。我把它取名为<code>.l-wrap</code>。这个<code>.l-</code>前缀表示layout， 这个是我自从读了<a href="https://twitter.com/snookca" target="_blank" rel="external">Jonathan Snook</a>的<a href="https://smacss.com" target="_blank" rel="external">SMACSS</a>之后一直使用的命名约定。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.l-wrap &#123;</div><div class="line">  max-width: 1140px;</div><div class="line">  margin-right: auto;</div><div class="line">  margin-left: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意：出于可访问性和可响应的目的，我强烈建议使用相对单位比如<code>em</code> 或者<code>rem</code>而不是像素。但这篇文章中，我都使用了像素，因为这比较容易理解。</p>
<h2 id="Step-4-计算列宽"><a href="#Step-4-计算列宽" class="headerlink" title="Step 4: 计算列宽"></a>Step 4: 计算列宽</h2><p>记住，我们使用floats来创建列和间隔。用它的时候，我们只有五个属性可以用（如果用flexbox的话会多一些）；这五个是：</p>
<ul>
<li><p>width</p>
</li>
<li><p>margin-right</p>
</li>
<li><p>margin-left</p>
</li>
<li><p>padding-right</p>
</li>
<li><p>padding-left</p>
</li>
</ul>
<p>如果你还记得，CSS栅格系统的HTML是类似这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;l-wrap&quot;&gt;</div><div class="line">  &lt;div class=&quot;three-col-grid&quot;&gt;</div><div class="line">    &lt;div class=&quot;grid-item&quot;&gt;Grid item&lt;/div&gt;</div><div class="line">    &lt;div class=&quot;grid-item&quot;&gt;Grid item&lt;/div&gt;</div><div class="line">    &lt;div class=&quot;grid-item&quot;&gt;Grid item&lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>从这段HTML中我们了解到这个网格有一行三列，也没有额外的创建间隔的元素，这就是说：</p>
<ol>
<li><p>创建列需要<code>width</code> 属性</p>
</li>
<li><p>创建间隔用<code>margin</code> 或者 <code>padding</code> 属性</p>
</li>
</ol>
<p>如果我们同时思考列和间隔，问题就会变得复杂。所以让我们假设我们先创建一个没有间隔的网格。</p>
<p>这样一个网格的输出就会像这样：</p>
<p><img src="http://p0.qhimg.com/t0116898bf2d5242da0.png" alt="Three-column grid without gutters"></p>
<p>没有间隔的三列网格</p>
<p>这里就是我们需要进行一些计算的地方了。我们知道网格有一个1140px的最大宽度，那么每一列的就是380px(<code>1140 ÷ 3</code>)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.three-col-grid .grid-item &#123;</div><div class="line">  width: 380px;</div><div class="line">  float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到目前为止，一切都很顺利。我们创建了一个在大于1140px的屏幕视口上可以良好展示的网格。但不好的是，当视口小于1140px时就不能正常展示了。<br><img src="http://p0.qhimg.com/t010a43be014ae08291.gif" alt="Grid breaks below 1140px"></p>
<p>小于1140px时网格就成这样了</p>
<p>这就意味着对于网格列我们不能使用像素作为单位。我们需要一个单位可以随视口变化而变化。</p>
<p>这就是说我们不能使用像素作为我们的度量方法。我们需要一个可以根据容器宽度重新计算的单位。唯一可以实现这种方式的单位就是百分比(<code>%</code>)。所以，我们用百分比的方式定义宽度：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.three-col-grid .grid-item  &#123;</div><div class="line">  width: 33.33333%;</div><div class="line">  float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码可以得到一个没有任何间隔的简单三列网格。当浏览器窗口大小改变时，这三列会按比例改变。<br><img src="http://p0.qhimg.com/t01d7231f6977e0bd65.gif" alt="Three columns without gutters"></p>
<p>没有间隔的三列网格</p>
<p>在我们继续之前还有一件事。每当所有的子元素在容器中浮动时，容器的高度就会塌陷。这个现象称为 <a href="https://css-tricks.com/all-about-floats/" target="_blank" rel="external">浮动塌陷</a>。就好像这个容器里不包含任何子元素。<br><img src="http://p0.qhimg.com/t012905ece2a920a107.png" alt="Float collapse. Image from CSS Tricks"></p>
<p>浮动塌陷(图片来自CSS Tricks)</p>
<p>为了解决这个问题，我们需要一个clearfix，像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.three-col-grid:after &#123;</div><div class="line">  display: table;</div><div class="line">  clear: both;</div><div class="line">  content: &apos;&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果你使用像Sass那样的预处理，你可以转换到一个mixin里，这样能让你在不同的地方方便引入同样的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// Clearfix</div><div class="line">@mixin clearfix &#123;</div><div class="line">  &amp;:after &#123;</div><div class="line">    display: table;</div><div class="line">    clear: both;</div><div class="line">    content: &apos;&apos;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Usage</div><div class="line">.three-col-grid &#123; @include clearfix; &#125;</div></pre></td></tr></table></figure></p>
<p>只要完成了列数的部分，接下来就是建立一些间隔了。</p>
<h2 id="Step-5-决定间隔位置"><a href="#Step-5-决定间隔位置" class="headerlink" title="Step 5: 决定间隔位置"></a>Step 5: 决定间隔位置</h2><p>目前看来，我们知道应该用<code>margin</code> 或<code>padding</code>来设计间隔。但是我们应该用哪一个呢？</p>
<p>如果你概览一下，就会快速注意到你有四种可能的方式来设计这些间隔。</p>
<ol>
<li><p>间隔可以通过margins放置在一边</p>
</li>
<li><p>间隔可以通过paddings放置在一边</p>
</li>
<li><p>间隔可以通过margins被相等的分隔在两边</p>
</li>
<li><p>间隔可以通过paddings被相等的分隔在两边</p>
</li>
</ol>
<p><img src="http://p0.qhimg.com/t0162dc3c1a3f967494.png" alt="4 possible ways to create columns and gutters"></p>
<p>创建列和间隔的4种方式</p>
<p>从这里就开始变得复杂了。你需要用不同的方式计算列的宽度，这取决于你用的方法。</p>
<p>我们将会一个一个的讲这些方法，看看它们的不同之处。慢慢来体会吧。</p>
<p>开始咯:</p>
<h3 id="Method-1-单边间隔-Margin"><a href="#Method-1-单边间隔-Margin" class="headerlink" title="Method 1: 单边间隔(Margin)"></a>Method 1: 单边间隔(Margin)</h3><p>用这种方法，是通过<code>margin</code>属性来创建间隔。这个间隔是在列的左边还是右边，这取决于你选择哪边。</p>
<p>为了让初学者明白，假设你选择将间隔放在右边，那么你将要做的是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.grid-item &#123;</div><div class="line">  /* Need to recalculate width property */;</div><div class="line">  margin-right: 20px;</div><div class="line">  float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据这张图你要重新计算列宽：<br><img src="http://p0.qhimg.com/t01d6a5947d51a41bcc.png" alt="One-sided gutters using margins"></p>
<p>使用margins实现的单边间隔</p>
<p>从这张图上可以看到1140px等于三列和两个间隔。</p>
<p>这里有个问题…我们需要用百分比表示列宽，但间隔固定是20px，我们没法同时用两个不同的单位进行计算。</p>
<p>好吧，这在以前是不太可能，但今非昔比了。</p>
<p>你可以使用CSS的<code>calc</code> 方法将其他单位和百分比混合使用。它会重新得到百分比的单位值来快速执行计算。</p>
<p>这样一来你可以将width通过一个函数得到，然后浏览器就会自动为你计算这个值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.grid-item &#123;</div><div class="line">  width: calc((100% - 20px * 2) / 3);</div><div class="line">  /* other properties */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很棒吧！</p>
<p>得到列宽后，你需要删除来自最右边网格列的最后一个间隔。你可以这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.grid-item:last-child &#123;</div><div class="line">  margin-right: 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>多数时候，当你去掉最右边项的最后一个间隔时，你也会想将它浮动在右边防止子像素舍入错误将最后一列放到了下一行导致把网格搞的一团糟。这只是会发生在子像素向上舍入的浏览器中。</p>
<p><img src="http://p0.qhimg.com/t01136daedecd5807c4.png" alt="Subpixel rounding errors might break the grid by pushing the final item to the next row"></p>
<p>子像素舍入错误可能会将最后一项放到下一行造成网格混乱。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.grid-item:last-child &#123;</div><div class="line">  margin-right: 0;</div><div class="line">  float: right;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>唉，终于讲到这里了。还有件事。</p>
<p>到现在为止，代码还算不错，如果你的网格只包含一行。但是，如果有多行，这些代码可不会剪切网格。<br><img src="http://p0.qhimg.com/t01d5b2e55f6ef2073c.png" alt="Our code fails if there&#39;s more than one row"></p>
<p>如果有多行，我们的代码就行不通了。<br>我们需要做的是去掉每一行的最右边项的右边距。实现这种最好的方式是用<code>nth-child()</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/* For a 3-column grid */</div><div class="line">.grid-item:nth-child(3n+3) &#123;</div><div class="line">  margin-right: 0;</div><div class="line">  float: right;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这就是用margins实现单边间隔你所需要的所有代码。在codepen上你可以看看。</p>
<p>查看 <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上<a href="http://codepen.io/zellwk/pen/mAYqrL/" target="_blank" rel="external">用margins实现的单边间隔网格</a> by Zell Liew (<a href="http://codepen.io/zellwk" target="_blank" rel="external">@zellwk</a>).</p>
<p>注意：Calc方法在IE8和Opera mini上不起作用。如果你需要支持这两种浏览器的话，可能得考虑其他方法。</p>
<h3 id="Method-2-单边间隔-Padding"><a href="#Method-2-单边间隔-Padding" class="headerlink" title="Method 2: 单边间隔 (Padding)"></a>Method 2: 单边间隔 (Padding)</h3><p>和用margins实现的单边间隔类似，这种方式也是要求你将间隔放在列的一边。假设还是选择的右边。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.grid-item &#123;</div><div class="line">  /* width property */</div><div class="line">  padding-right: 20px;</div><div class="line">  float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后，你可以通过这张图重新计算列宽。<br><img src="http://p0.qhimg.com/t01d4aa991b7f81ed65.png" alt="One-sided gutters using padding"></p>
<p>用padding实现的单边间隔</p>
<p>注意到宽度和上一种方式的不同了么？因为我们把<code>box-sizing</code>属性转换成<code>border-box</code>了。所以现在<code>width</code>的计算包括了<code>padding</code>值。</p>
<p>在这种情况下，三列中前两列比最后一个要宽，这样最终会导致奇怪的计算结果以及难以理解的CSS代码。</p>
<p>我建议千万不要尝试这种方式。（如果你继续这样，代码会变得非常丑陋。请在你风险控制范围内尝试！）</p>
<h2 id="Method-3-拆分间隔-Margin"><a href="#Method-3-拆分间隔-Margin" class="headerlink" title="Method 3: 拆分间隔 (Margin)"></a>Method 3: 拆分间隔 (Margin)</h2><p>用这种方式，你得把间隔分成2个并将它们分别置于在列的两边。代码像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.grid-item &#123;</div><div class="line">  /* Width property */</div><div class="line">  margin-right: 10px;</div><div class="line">  margin-left: 10px;</div><div class="line">  float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后，根据下面这张图计算列宽：<br><img src="http://p0.qhimg.com/t019e52b11aed401609.png" alt="Split gutters with margin"></p>
<p>用margin拆分间隔</p>
<p>根据之前我们了解到的，你需要用<code>calc()</code>方法来计算列宽。对于现在这种情况，你要从100%的宽度里去掉三个间隔，再除以3就得到列宽了。换言之，列宽等于<code>calc((100% - 20px * 3) / 3)</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.grid-item &#123;</div><div class="line">  width: calc((100% - 20px * 3) / 3);</div><div class="line">  margin-right: 10px;</div><div class="line">  margin-left: 10px;</div><div class="line">  float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>就这样！（对于多行网格其实没有其他额外需要做的 😉）。下面是代码展示：<br>查看 <a href="http://codepen.io/zellwk/pen/BLZJza/" target="_blank" rel="external">用margins实现网格间隔拆分</a> by Zell Liew (<a href="http://codepen.io/zellwk" target="_blank" rel="external">@zellwk</a>).</p>
<h2 id="Method-4-拆分间隔-Padding"><a href="#Method-4-拆分间隔-Padding" class="headerlink" title="Method 4: 拆分间隔 (Padding)"></a>Method 4: 拆分间隔 (Padding)</h2><p>这个和上一个类似。也是拆分间隔并分别放在列两边。但这次，是使用padding来替换间隔。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.grid-item &#123;</div><div class="line">  /* width property */</div><div class="line">  padding-right: 10px;</div><div class="line">  padding-left: 10px;</div><div class="line">  float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后，再像下面这样计算列宽：<br><img src="http://p0.qhimg.com/t01cdedfaff45f684a3.png" alt="Split gutters with padding"></p>
<p>通过padding拆分间隔</p>
<p>注意到这次计算列宽是不是简单多了？这就对啦，每一列分界点刚好将网格分成三等份。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.grid-item &#123;</div><div class="line">  width: 33.3333%;</div><div class="line">  padding-right: 10px;</div><div class="line">  padding-left: 10px;</div><div class="line">  float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上代码:</p>
<p>查看 <a href="http://codepen.io/zellwk/pen/ORYzQV/" target="_blank" rel="external">padding实现的拆分间隔网格</a> by Zell Liew (<a href="http://codepen.io/zellwk" target="_blank" rel="external">@zellwk</a>).</p>
<p>在我们继续开始之前，如果你用padding分拆间隔的话给你一个小警告。仔细看一下Codepen上的标签，你就会发现我在.grid-item里添加了一个额外的子元素，如果组件包含背景或者边框的话这个是必须的。</p>
<p>这是因为背景会显示在padding属性上。下面这幅图应该可以解释为什么（希望可以），展示了<code>background</code>和其他属性间的关系。</p>
<p><img src="http://p0.qhimg.com/t0135de77b90cc796de.jpg" alt="Background is shown on the padding property"></p>
<p>背景显示在padding上</p>
<h3 id="我会用什么？"><a href="#我会用什么？" class="headerlink" title="我会用什么？"></a>我会用什么？</h3><p>当我两年前开始写栅格时，我几乎手写栅格，通过<a href="https://zellwk.com/blog/designing-grids/#how-big-should-columns-and-gutters-be-" target="_blank" rel="external">自上而下的分析</a>设计，内置一个<a href="how-the-grid-responds-to-different-viewports">混合系统</a>。在那样的系统/方法里，列宽和间隔值我都是使用的百分比。</p>
<p>在那时候，我喜欢单边设置间隔的简单。对我来说，这样有较少的认知负荷，因为我实在不擅长数学。额外的<code>间隔÷2</code>的计算就可以让我迅速放弃。</p>
<p>我还是感激我继续那样做。尽管CSS看起来比拆分间隔更复杂，但我强迫自己学习<a href="https://css-tricks.com/examples/nth-child-tester/" target="_blank" rel="external">恰当使用nth-child</a>。我还知道了编写 <a href="https://zellwk.com/blog/how-to-write-mobile-first-css/" target="_blank" rel="external">mobile-first CSS</a>的重要性，据我所知，无论对于初学还是有经验的开发者，这仍然是主要障碍。</p>
<p>然而，如果你现在让我选择，<strong>我会选择拆分间隔</strong>而不是单边间隔，因为这样CSS会更简单。同时，<strong>我更愿意用margin</strong>而不是padding，因为这样可以有更干净的标签。（但是padding更容易计算，所以在剩下的篇幅中我会继续使用padding的方式。）</p>
<h2 id="Step-6-创建调试网格"><a href="#Step-6-创建调试网格" class="headerlink" title="Step 6: 创建调试网格"></a>Step 6: 创建调试网格</h2><p>当你开始时，有一个控制网格帮你调试布局会尤其管用。它可以帮助你确保你是在正确地创建东西。</p>
<p>在这一点上，我只知道一个蹩脚的创建调试网格的方式。就是创建HTML元素，再在上面添加样式CSS。HTML如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;fixed-gutter-grid&quot;&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>针对调试网格的CSS如下（为了减少调试网格的标签，我使用的是用margins拆分间隔）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.column &#123;</div><div class="line">  width: calc((100% - 20px * 12) / 12);</div><div class="line">  height: 80px;</div><div class="line">  margin-right: 10px;</div><div class="line">  margin-left: 10px;</div><div class="line">  background: rgba(0, 0, 255, 0.25);</div><div class="line">  float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>查看代码 <a href="http://codepen.io/zellwk/pen/ALkyAA/" target="_blank" rel="external">Fixed gutter debug grid</a> by Zell Liew (<a href="http://codepen.io/zellwk" target="_blank" rel="external">@zellwk</a>) 。</p>
<p>（边注：Miriam 和 Robson正打造一个<a href="https://github.com/oddbird/susy/issues/609" target="_blank" rel="external">Susy v3上的SVG-背景图片调试网格</a>。这令人超级鸡冻啊，因为你可以用一个简单的函数就能创建调试网格！）</p>
<h2 id="Step-7-创建可变的布局"><a href="#Step-7-创建可变的布局" class="headerlink" title="Step 7: 创建可变的布局"></a>Step 7: 创建可变的布局</h2><p>下一步就是根据内容创建可变的布局。这就是CSS栅格系统闪光的地方。替代了通过写重复的栅格类来创建布局，你可以根据内容创建合理的类名。</p>
<p>比如，假设你有一个只用于客户文章的网格布局。桌面上布局看起来像这样：</p>
<p><img src="http://p0.qhimg.com/t01eb39984bee34faf1.png" alt="Example grid layout that&#39;s only used for guest articles"></p>
<p>仅用于客户文章的网格布局示例</p>
<p>标签组织可以是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;l-guest-article&quot;&gt;</div><div class="line">  &lt;div class=&quot;l-guest&quot;&gt; &lt;!-- Guest profile --&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;l-main&quot;&gt;&lt;!-- main article--&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;l-sidebar&quot;&gt;&lt;!-- sidebar widgets--&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>看起来很舒服。现在我们有12列。每一列的宽是8.333%<code>(100 ÷ 12)</code>。</p>
<p><code>.l-guest</code>的宽度是两列。所以，就是8.333% 乘2，就这么简单。以此类推。</p>
<p>这里，我建议使用Sass这样的预处理器，这样可以轻松地用<code>percentage</code> 函数计算列宽，就不用手动计算了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">.l-guest-article &#123;</div><div class="line">  @include clearfix;</div><div class="line">  .l-guest &#123;</div><div class="line">    // Ahem. More readable than 16.666% :)</div><div class="line">    width: percentage(2/12);</div><div class="line">    padding-left: 10px;</div><div class="line">    padding-right: 10px;</div><div class="line">    float: left;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  .l-main &#123;</div><div class="line">    width: percentage(7/12);</div><div class="line">    padding-right: 10px;</div><div class="line">    padding-left: 10px;</div><div class="line">    float: left;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  .l-sidebar &#123;</div><div class="line">    width: percentage(3/12);</div><div class="line">    padding-right: 10px;</div><div class="line">    padding-left: 10px;</div><div class="line">    float: left;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>查看代码 <a href="http://codepen.io/zellwk/pen/pEmLzY/" target="_blank" rel="external">Content-sidebar-layout with fixed-gutter grid</a> by Zell Liew (<a href="http://codepen.io/zellwk" target="_blank" rel="external">@zellwk</a>) .</p>
<p>你可能已经发现到现在有很多重复的代码。我们可以通过抽出公共的部分到一个单独的选择器比如<code>.grid-item</code>里来优化它。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.grid-item &#123;</div><div class="line">  padding-left: 10px;</div><div class="line">  padding-right: 10px;</div><div class="line">  float: left;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.l-guest-article &#123;</div><div class="line">  .l-guest &#123; width: percentage(2/12);&#125;</div><div class="line">  .l-main &#123; width: percentage(7/12);&#125;</div><div class="line">  .l-sidebar &#123; width: percentage(3/12); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>干净多了 :)</p>
<h2 id="Step-8-使布局响应"><a href="#Step-8-使布局响应" class="headerlink" title="Step 8: 使布局响应"></a>Step 8: 使布局响应</h2><p>最后一步就是让布局可响应。假设我们的客户文章布局按照下面的方式响应：<br><img src="http://p0.qhimg.com/t01aa5ac18a1c2f5476.png" alt="How guest the guest article layout respond to different viewports"></p>
<p>对于不同视口文章布局如何响应</p>
<p>我们标签不用变。我们现在已经有了可能是最易理解的布局。所以，要改变的完全应该是CSS。</p>
<p>当写响应式布局的CSS时，我强烈建议你写<a href="https://zellwk.com/blog/mobile-first-css/" target="_blank" rel="external">mobile first css</a>，因为它能让你的代码更简单优雅。我们可以开始优先对手机端布局写CSS。<br>上代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.l-guest-article &#123;</div><div class="line">  .l-guest &#123; /* nothing goes here */ &#125;</div><div class="line">  .l-main &#123;</div><div class="line">    margin-top: 20px;</div><div class="line">  &#125;</div><div class="line">  .l-sidebar &#123;</div><div class="line">    margin-top: 20px;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们不需要再做什么，因为每个组件默认是占满宽度。然而，我们可以添加一些上边距到最后两项上，从而使元素相互分开。</p>
<p>接下来，我们移动到平板端的布局。</p>
<p>对于这个，假设在分界点是700px时触发。<code>.l-guest</code>应该是4列（一共12列）， <code>.l-main</code> 和<code>.l-sidebar</code>每个应该是8列。</p>
<p>这里，我需要去掉<code>.l-main</code> 的<code>margin-top</code> 属性，因为它需要和<code>.l-guest</code>排成一行。</p>
<p>而且，如果我们设置<code>.l-sidebar</code>为8列的宽度，那它会自动浮动到第二行，因为第一行没有足够的空间可以容纳它。既然显示在第二行了，我们也需要在<code>.l-sidebar</code> 上添加一些左边距来将它放到合适的位置；要不然，我们将它浮动在右边。（我还是把它浮动在右边吧，这样不需要什么计算）。</p>
<p>最后，一旦我们浮动这些网格项，网格容器就需要一个clearfix来清除它们。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">.l-guest-article &#123;</div><div class="line">  @include clearfix;</div><div class="line">  .l-guest &#123;</div><div class="line">    @media (min-width: 700px) &#123;</div><div class="line">      width: percentage(4/12);</div><div class="line">      float: left;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  .l-main &#123;</div><div class="line">    margin-top: 20px;</div><div class="line">    @media (min-width: 700px) &#123;</div><div class="line">      width: percentage(8/12);</div><div class="line">      margin-top: 0;</div><div class="line">      float: left;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  .l-sidebar &#123;</div><div class="line">    margin-top: 20px;</div><div class="line">    @media (min-width: 700px) &#123;</div><div class="line">      width: percentage(8/12);</div><div class="line">      float: right;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后一点，让我们来看看桌面布局。</p>
<p>对这种布局，我们假设触发的分界点是1200px。<code>.l-guest</code>应该是总宽的2/12,<code>.l-main</code>应该是7/12，<code>.l-sidebar</code> 是3/12.</p>
<p>我们要做的就是在每个网格项上创建一个新的媒体查询，再根据需要改变宽度。得注意也需要去掉<code>&#39;,l-sidebar</code>上的margin-top属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">.l-guest-article &#123;</div><div class="line">  @include clearfix;</div><div class="line">  .l-guest &#123;</div><div class="line">    @media (min-width: 700px) &#123;</div><div class="line">      width: percentage(4/12);</div><div class="line">      float: left;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @media (min-width: 1200px) &#123;</div><div class="line">      width: percentage(2/12);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  .l-main &#123;</div><div class="line">    margin-top: 20px;</div><div class="line">    @media (min-width: 700px) &#123;</div><div class="line">      width: percentage(8/12);</div><div class="line">      margin-top: 0;</div><div class="line">      float: left;</div><div class="line">    &#125;</div><div class="line">    @media (min-width: 1200px) &#123;</div><div class="line">      width: percentage(7/12);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  .l-sidebar &#123;</div><div class="line">    margin-top: 20px;</div><div class="line">    @media (min-width: 700px) &#123;</div><div class="line">      width: percentage(8/12);</div><div class="line">      float: right;</div><div class="line">    &#125;</div><div class="line">    @media (min-width: 1200px) &#123;</div><div class="line">      width: percentage(3/12);</div><div class="line">      margin-top: 0;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终布局的代码：<br>查看<a href="http://codepen.io/zellwk/pen/qaGvxm/" target="_blank" rel="external">guest-article layout with fixed-gutter grid (final)</a> by Zell Liew (<a href="http://codepen.io/zellwk" target="_blank" rel="external">@zellwk</a>).</p>
<p>（噢，顺便说一下，你也可以用Susy实现这些效果。只要记住设置 <a href="https://zellwk.com/blog/susy-gutter-positions/" target="_blank" rel="external">间隔位置</a>为<code>inside-static</code>）</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>哇哦！文章是挺长的。写这篇文章我也是写到死了几次了。（感谢你能从头读到尾。我希望你看下来没有吐血）（ps:其实翻译的有点快吐血了）</p>
<p>正如你看到的，创建一个响应式栅格系统的步骤是相对简单直观的。人们最容易混乱的部分是第五步（决定间隔位置）以及第8步（使布局可响应）。</p>
<p>当你想通了所有可能的方法步骤5还是挺简单的，而且我们已经将所有的方法串在一起讲了。第8步呢，从另一个角度讲，也是容易解决的，一旦你有足够的写<a href="https://zellwk.com/blog/mobile-first-css/" target="_blank" rel="external">优先移动端CSS</a>的实践练习。</p>
<p>希望这篇文章已经教给你建立响应式栅格系统的方法，也希望可以在你下个项目中用到自定义栅格系统。</p>
<p>期待那时的到来！</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@camiler" target="_blank" rel="external">camiler</a><br>链接：<a href="http://www.zcfy.cc/article/1643" target="_blank" rel="external">http://www.zcfy.cc/article/1643</a><br>原文：<a href="https://zellwk.com/blog/responsive-grid-system" target="_blank" rel="external">https://zellwk.com/blog/responsive-grid-system</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[既然写CSS很容易，那为什么大家还是把CSS写的那么烂呢？]]></title>
      <url>http://jsgrblog.win/2016/12/10/%E6%97%A2%E7%84%B6%E5%86%99CSS%E5%BE%88%E5%AE%B9%E6%98%93%EF%BC%8C%E9%82%A3%E4%B8%BA%E4%BB%80%E4%B9%88%E5%A4%A7%E5%AE%B6%E8%BF%98%E6%98%AF%E6%8A%8ACSS%E5%86%99%E7%9A%84%E9%82%A3%E4%B9%88%E7%83%82%E5%91%A2%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>在你开始阅读这篇文章之前，一定要做好心理准备。因为我写的 90％ 都是在发牢骚，只有最后大概 10% 介绍 CSS 技巧之最佳实践。提前给你们打好预防针啦。</p>
<p><img src="http://p0.qhimg.com/t019e6fb41afe19a33f.jpg" alt="important does not fix your bad css"></p>
<a id="more"></a>
<p>前端工程师在职业发展中可能会遇到以下困境：</p>
<ul>
<li><p>某个阶段，感觉(自己所做的)工作没有任何难度</p>
</li>
<li><p>为团队创造的价值越来越低啦</p>
</li>
<li><p>自己做的事情，大家都能做</p>
</li>
</ul>
<p>同意的请举手。如果你确实是这样，（恭喜你）说明你是多数派。</p>
<p>而且说句实在话，CSS 确实很简单。另外我可以保证，就算是傻子也能写出下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">p &#123;</div><div class="line"></div><div class="line">color: red;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么你还有什么好抱怨的？堆纯 CSS 代码，不需要任何技巧。而且只给单个元素添加全局样式，而不用考虑其他 CSS，当然是非常简单的。</p>
<h3 id="那么CSS到底难在哪儿？"><a href="#那么CSS到底难在哪儿？" class="headerlink" title="那么CSS到底难在哪儿？"></a>那么CSS到底难在哪儿？</h3><p><img src="http://p0.qhimg.com/t013a4f67b29c95260f.png" alt="one does not simply mess with css"></p>
<p>后端开发工程师：“虽然我已经完成新功能的开发，但是我弄乱了前端，不过你放心，我已经修好绝大部分，所以你前端只需要对细节进行微调，时间应该不会超过 30 分钟”</p>
<p>于是我打开HTML文件，(吃惊地)发现到处都是弃用的HTML标签，而且丝毫没有考虑过响应式设计。深呼吸，(暗示自己)，他们写的CSS肯定会稍微好点。然而在我打开CSS文件之后，发现(同样)到处都是类似固定(fixed)定位、清除左浮动、右浮动以及!important的代码，于是我慢慢的把鼠标绕在脖子上。（别拦我，让我死）</p>
<p>（安慰自己），也许他们写出的代码不会一直这么糟糕，但是（在现实中）我几乎没见过后端工程师写出能用的前端代码的。也还好啦，写前端代码本来就不是后端工程师的职责所在。但是请后端工程师不要随便写一堆前端代码，然后指望前端工程师帮你擦屁股。</p>
<h3 id="所以好的CSS长啥样？"><a href="#所以好的CSS长啥样？" class="headerlink" title="所以好的CSS长啥样？"></a>所以好的CSS长啥样？</h3><p><img src="http://p0.qhimg.com/t015af266b6ed948282.jpg" alt="you don&#39;t have to put all your sass files in the same folder"></p>
<p>(项目的)组织结构。尤其是当你做过大型项目，就会发现项目的组织结构真的很重要。举个正面例子——Steven Bradley 写的<a href="http://vanseodesign.com/css/sass-directory-structures/" target="_blank" rel="external"><a href="http://vanseodesign.com/css/sass-directory-structures/" target="_blank" rel="external">利于维护代码的目录结构</a></a>，这篇文章是为 SCSS 项目写的，不过也适用于普通的 CSS 项目。它重点强调如何将 CSS 文件模块化，形成便于维护的文件。</p>
<p>规范。这可能是我每天所遇到的最大问题。不幸的是，大部分工程师对<a href="https://developer.mozilla.org/en/docs/Web/CSS/Specificity" target="_blank" rel="external"><a href="https://developer.mozilla.org/en/docs/Web/CSS/Specificity" target="_blank" rel="external">CSS规范</a></a>的理解一知半解，正是因为这样，才导致糟糕的 CSS 代码（如 !important）烂大街。那我们该如何避免呢？下面列出了很多值得参考的命名约定，它们旨在减少写死的（非常依赖文档结构的） CSS 选择器。假设你对此不感冒，我还是要劝你如无必要，避免使用超过 3 层的 CSS 类/元素选择器。</p>
<p>命名约定。恕我直言，对于任何一个大型的 CSS 项目来说，命名约定是标配。没有命名约定，CSS 就会变得既难维护又不可靠。命名约定可以让我们轻松地重用项目中的 CSS，如有必要，还能帮我们剔除项目中多余的 CSS。这里仅列举几种比较流行的命名约定，如：<a href="http://getbem.com/introduction/" target="_blank" rel="external"><a href="http://getbem.com/introduction/" target="_blank" rel="external">BEM</a></a>，<a href="http://oocss.org/" target="_blank" rel="external"><a href="http://oocss.org/" target="_blank" rel="external">OOCSS</a></a>，<a href="https://smacss.com/" target="_blank" rel="external"><a href="https://smacss.com/" target="_blank" rel="external">SMACSS</a></a>以及我自己写的<a href="https://github.com/CrashyBang/hiccup" target="_blank" rel="external"><a href="https://github.com/CrashyBang/hiccup" target="_blank" rel="external">hiccup</a></a>。</p>
<p>测试。在这一点上，绝大多数其它工程师可能都没发现当后端工程师有多爽。 因为后端工程师的开发工作只需要让一个环境（网站所在的服务器）正常即可。你知道作为前端工程师最痛苦的事情是什么吗？5 个以上的浏览器以及上千种移动设备……好的前端测试工作其实是个苦差，且耗时很长。我见过很多项目延期，就因为没有把前端测试考虑进去，而通常前端测试花费的时间会超出常人预期。</p>
<h3 id="所以如何扭转这种对CSS的天真看法？"><a href="#所以如何扭转这种对CSS的天真看法？" class="headerlink" title="所以如何扭转这种对CSS的天真看法？"></a>所以如何扭转这种对CSS的天真看法？</h3><p><img src="http://p0.qhimg.com/t01aeac5c241603c602.jpg" alt="i&#39;m working on css over here!"></p>
<p>在以后工作中，再也不能让后端工程师们抱有侥幸心理。作为前端工程师，我们不会随便把一堆无响应式的 CSS 代码丢给后端工程师，然后撒手不管。所以凭什么他们就能写无用的烂代码，然后在他们的 CSS 代码失效时让我们去打补丁？我不是说要让后端工程师好好写 CSS 代码，而是我们应该告诉后端工程师，如果觉得写 CSS 很难的话，就不要写。别让其他工程师觉得前端很简单，前端才不简单呢，我们前端工程师跟其他人一样努力地工作，别让他们看走眼。</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@liuliangsir" target="_blank" rel="external">liuliangsir</a><br>链接：<a href="http://www.zcfy.cc/article/1683" target="_blank" rel="external">http://www.zcfy.cc/article/1683</a><br>原文：<a href="https://hackernoon.com/if-css-is-so-easy-why-does-everyone-suck-e4442cc9428a#.bq9c1sev1" target="_blank" rel="external">https://hackernoon.com/if-css-is-so-easy-why-does-everyone-suck-e4442cc9428a#.bq9c1sev1</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[流畅web动画的十个法则]]></title>
      <url>http://jsgrblog.win/2016/12/10/%E6%B5%81%E7%95%85web%E5%8A%A8%E7%94%BB%E7%9A%84%E5%8D%81%E4%B8%AA%E6%B3%95%E5%88%99/</url>
      <content type="html"><![CDATA[<p>自从我们去年登陆了<a href="https://gyrosco.pe/" target="_blank" rel="external"><em>Gyroscope</em></a>，许多人都问我有关用在我们网站上的javascript动画库。我们考虑过将此开源，但是这不是魔法真正实现的地方。</p>
<p>我不希望大家认为我们是依靠特殊的javascript插件来解决这些问题的。对于大部分人来说，我们只是充分利用了近来浏览器性能的提升，GPU和CSS3规格.</p>
<p>对于良好的动画性能没有高招，除了将大量的时间放在测试和优化。然而，过了许多年的实验和撞击浏览器性能的极限，我们发现了一系列的设计和代码准则，看上去似乎是良好动画可靠的结果。这些技术让你的页面，在现代桌面和手机浏览器上变得流畅，运行良好。最重要的是，易于维护。</p>
<p><img src="http://p0.qhimg.com/t01127208383af267ed.gif" alt=""><br><a id="more"></a></p>
<p>对每个人来说，技术和实现方式都有所不同，但是大体上的规则对大多是情况都会有帮助。</p>
<h3 id="什么是动画？"><a href="#什么是动画？" class="headerlink" title="什么是动画？"></a>什么是动画？</h3><p>动画在互联网出现之前就已经饱经世故了，并且如果你想做好它，这会是你一生的课题。然而对于应用于互联网的动画，有一些特别的约束和挑战。</p>
<p>对于60帧的流畅动画，每一帧都需要在16ms内渲染！这并没有多少时间，因此为了流畅的性能，我们需要找到非常有效的方法来渲染每一帧。</p>
<p><img src="http://p0.qhimg.com/t013e0b852373af9835.gif" alt=""></p>
<p><img src="http://p0.qhimg.com/t0146d29814a6cdc280.gif" alt=""><br><img src="http://p0.qhimg.com/t01cea2a1a8ba49dadb.gif" alt=""><br><a href="http://the12principles.tumblr.com/" target="_blank" rel="external">一些经典的动画规则</a></p>
<p>T<br>在web上有一打方法做动画。比如，幻灯片是一种方法，在互联网之前就已经流行，通过轻微不同的手绘帧，在一秒内多次置换，来创造运动的视觉效果。</p>
<p>最近Twitter使用这种简单的方法，制作了新的爱心动画，通过切换一组雪碧图切换实现。</p>
<p><img src="http://p0.qhimg.com/t014b3b3c722b70bbf3.png" alt=""></p>
<p>这个效果不能用一堆小元素单独做动画，或者做一个SVG，但是那样会产生十分不必要的复杂以及可能会不流畅。</p>
<p><img src="http://p0.qhimg.com/t01c22edb1dcb830d14.gif" alt=""></p>
<p>在许多例子中，你会想用CSS transition属性来做自动动画。这个技术也同样以“补间动画”闻名，在两个不同的值之间的过渡。这个好处就是，你可以轻易地取消，而不需要建立所有的逻辑。这个对于“一劳永逸”样式的动画是理想的解决方式，就像介绍序列，等等，或者简单如悬停的交互。</p>
<p>延伸阅读: <a href="https://blog.alexmaccaw.com/css-transitions" target="_blank" rel="external">你需要知道关于CSS Transitions的事</a></p>
<p><img src="http://p0.qhimg.com/t01bd1905f5c91073f1.gif" alt=""></p>
<p>在其他例子中，关键帧为基础的CSS动画属性也许对于不间断运行的背景细节是非常理想的。举个例子，在Gyroscope logo上的戒指计划是不间断地旋转。其他受益于CSS动画语法的是齿轮速比。</p>
<p>因此，事不宜迟，这里有些建议能够帮助你很大程度上地提高你的动画性能……</p>
<blockquote>
<p>#1</p>
</blockquote>
<h3 id="不要改变除了opacity和transform之外的参数！"><a href="#不要改变除了opacity和transform之外的参数！" class="headerlink" title="不要改变除了opacity和transform之外的参数！"></a>不要改变除了opacity和transform之外的参数！</h3><p><em>即使你觉得这样ok，也不要这么做!</em></p>
<p>仅仅这一个基本的准则能帮你解决80%的问题，即使是在手机上。你可能在之前听过这个——这不是最初的主意，但是是很少被跟随。这相当于是web的“吃的健康和运动”的相同法则，这个听上去是一个好的建议，但是你可能会无视。</p>
<p>一旦你如此想了，你会发现这个相对简单，但是可能会是一个大跳跃，对这些习惯传统CSS属性的动画。</p>
<p>举个例子，如果你想让元素变小，你可以使用<em>transform: scale()</em>，而不是改变他的宽度。如果你想移动他，不同于用外边距或者内边距混在一起——你可以仅仅使用一个简单的<em>transform: translateX</em>或者<em>transform: translateY</em>。</p>
<h4 id="为什么这个是有效的？"><a href="#为什么这个是有效的？" class="headerlink" title="为什么这个是有效的？"></a>为什么这个是有效的？</h4><p>对于人类来说，改变宽度，外边距或者其他属性，看上去不是很大的交易——因为它更简单，看上去更好——但是电脑需要做的事情和人类比起来简直是天壤之别，他要做的更加多更加槽糕。</p>
<p>浏览器团队花费了很大的力气在优化这些操作。Transforms真的很简单就能提高效率，并且经常能够充分利用你的图形界面，而不用重新渲染元素。</p>
<p>第一次载入页面的时候，你可能会抓狂——在所有的角落，使用图片，在每个元素上加上阴影，如果你觉得特别粗糙，你甚至可以加上一个动态模糊。如果这只发生一次，一些额外的毫秒时间计算并不影响。但是一旦内容重新渲染，你不会想重新计算所有的内容。</p>
<p>延展阅读：<a href="https://www.paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/" target="_blank" rel="external">用translate移动元素 (Paul Irish)</a></p>
<blockquote>
<p>#2</p>
</blockquote>
<h3 id="将内容藏在不起眼的地方"><a href="#将内容藏在不起眼的地方" class="headerlink" title="将内容藏在不起眼的地方"></a><em>将内容藏在不起眼的地方</em></h3><p><em>使用pointer-events:通过透明度为0来隐藏元素</em></p>
<p>这个属性也许会有浏览器兼容的问题，但是如果你只是为webkit或者其他现代浏览器做东西，这会让你的生活更美好。</p>
<p>过去很长一段时间，当动画需要通过jQuery的animate()处理的时候，许多渐变元素的复杂来自切换“display“属性实现的：在一个合</p>
<p>CSS的pointer-events属性（这已经存在了很长时间了，但是不经常用），让元素不回应任何点击和交互，就像他们不在那边一样。它可以简单地通过CSS切换开启和关闭，而不通过打断动画或者以任何方法影响渲染/可见性。</p>
<p>与opacity为0结合使用，他基本上和display：none是一样的效果，但是不触发新的渲染而影响性能。当隐藏元素时，我可以常常只设置opacity为0，并且关闭pointer-events，然后遗忘元素，他会自己照顾自己。</p>
<p>这和绝对定位的元素一起工作地特别好，因为你会十分有信心，它对页面其他的元素完全没有影响。</p>
<p>这也给你更多的回旋余地，因为定时并不完美——这不是世界末日，如果一个元素是可点击的或者在其他元素上遮盖一秒或者更长，或者如果这仅仅能被点一次，然后就隐藏起来了。</p>
<blockquote>
<p>#3</p>
</blockquote>
<h3 id="不要同一时间所有元素都做动画"><a href="#不要同一时间所有元素都做动画" class="headerlink" title="不要同一时间所有元素都做动画"></a>不要同一时间所有元素都做动画</h3><p><em>除非使用编排</em></p>
<p>一个单独的动画自己是流畅的，但是同一时间许多元素都做动画，就会扰乱他们。创建单个的流畅动画很简单——但是一个数量级的动画就很难确保性能达到满分。因此，合理地规划特别重要。</p>
<p>将时间分开，那么所有的元素都不在一个相同的时间开始。典型的是，2，3个可以在同一时间运行，而不需要减速，特别是如果他们在稍不同的时间开始动画。</p>
<p>除非你的页面上只有一个元素，不然理解<em>编排</em>是很重要的。这可能看上去像一个舞蹈编排，但事对于动画接口来说是同样重要的。元素需要在一个合适得位置合适的时间进入。及时他们都是分开的，他们必须感觉是设计好的的一个单元。</p>
<p>Google素材设计在这个主题上又很有意思的建议。这不仅仅是做事的正确方式，也是你需要考虑的事情和测试。</p>
<p><img src="http://p0.qhimg.com/t01ec60db7e77e8df6d.png" alt=""></p>
<p>延伸阅读： <a href="https://material.google.com/motion/material-motion.html" target="_blank" rel="external">Google素材设计 · 动机</a></p>
<blockquote>
<p>#4</p>
</blockquote>
<h3 id="轻微地增加延迟，让编排动作变得简单"><a href="#轻微地增加延迟，让编排动作变得简单" class="headerlink" title="轻微地增加延迟，让编排动作变得简单_"></a>轻微地增加延迟，让编排动作变得简单_</h3><p>编排动画真的十分重要，并且需要十分多的实验和测试才能找到感觉。然而，他的代码并不十分复杂。</p>
<p>我通常会改变父元素上的一个Class（通常是在body上），来触发一系列变化，每一个在特定的时间有自己的过度延迟。从代码观点来说，你只需要关心状态改变，并且不需要在javascript中维护一堆定时。</p>
<p><img src="http://p0.qhimg.com/t01dd5118782727aa5a.gif" alt=""></p>
<p> <a href="https://gyrosco.pe/chrome/" target="_blank" rel="external">Gyroscope Chrome 扩展</a>的动画</p>
<p>交错安排一系列元素，是最简单的编排你的元素的方法。这很强大，因为这同时看上去很好，同时也带来了珍贵的性能——记住只有一小部分元素在同一时间开始。你会将他们分开直至感觉足够流畅，但是不要分得太开，导致整体看上去太慢。足够应该是重叠，这感觉像一个不间断的流，而不是一系列独立的个体元素。</p>
<h4 id="代码样例"><a href="#代码样例" class="headerlink" title="代码样例"></a>代码样例</h4><p>这里有一系列简单的技巧，交错排序你的元素——特别是如果是一长串元素。如果有少于10个元素，或者有一个不可估量的数量（就像在静态页面），然后我通常在CSS指定值。这是最简单的便于维护的方法。</p>
<p><img src="http://p0.qhimg.com/t018e6035e75b69d537.png" alt=""></p>
<p>一个简单的SASS循环</p>
<p>对于很长的元素列表或者一个动态的内容，定时器可能需要通过循环每个元素动态设置。</p>
<p><img src="http://p0.qhimg.com/t0146ff2d14e670a189.png" alt=""></p>
<p>最简单的javascript循环</p>
<p>这里有两个常用变量：你的基本延迟和每个元素之间的延迟。这是一个需要寻找的微妙的平衡，但是当你敲击正确的数字集，这会感觉非常好。</p>
<blockquote>
<p>#5</p>
</blockquote>
<h3 id="使用全局倍数来设计慢动画"><a href="#使用全局倍数来设计慢动画" class="headerlink" title="使用全局倍数来设计慢动画"></a>使用全局倍数来设计慢动画</h3><p><em>然后加速之后所有的元素</em></p>
<p>对于动画设计，定时就是一切。20%的工具是实现他们，并且其他80%是找到正确的参数&amp;让一切同步的间距，以及感觉流畅。</p>
<p>特别是在编排一系列元素的时候，尝试压榨性能和页面并发性，看看所有的元素在慢动作下会让事情变得简单。</p>
<p>无论你是否用javascript，或者一些CSS预处理器，如Sass（我的最爱），这都需要直接做些额外的算数，和创建变量。</p>
<p>你必须确认尝试一些不用的速度或者定时是很方便的。比如，如果一个动画在十分之一的速度下都很卡顿，那么有可能从根本上就有问题。如果将它调至50倍速度依然流畅，那么问题就是要找到他所能达到的最快的速度。在全速之下，5毫秒的问题很难察觉，但是如果你降低了整体的速度，那么他们就会变得特别明显。</p>
<p>特别对于十分复杂的动画，或者解决棘手性能的瓶颈，在慢动作下查看元素的能力可能十分有用。</p>
<p>最主要的问题是，你想包装许多完美的细节，当它变得慢的时候，然后提高整体的速度，因此这感觉是十分棒的。这十分微妙，但是用户会察觉流畅以及细节。</p>
<p>这些特性只是OS X的一部分——如果你点击shift按钮来减小按钮或者一个app图标，你会看到他在慢速运行。在这一点上，当你按shift按钮的时候，我们甚至可以在Gyroscope实现激活慢动画。</p>
<p><img src="http://p0.qhimg.com/t01aeef50b97627fdeb.jpg" alt=""></p>
<blockquote>
<p>#6</p>
</blockquote>
<h3 id="拍下你的UI，并且重放他们，以获取有价值的第三方关点。"><a href="#拍下你的UI，并且重放他们，以获取有价值的第三方关点。" class="headerlink" title="拍下你的UI，并且重放他们，以获取有价值的第三方关点。"></a>拍下你的UI，并且重放他们，以获取有价值的第三方关点。</h3><p>有时候一个不同的关点，能帮助你看事物更透彻，并且视频是一个极佳总这件事的方法。</p>
<p>一些人在AE中创建视频，并且尝试将他们在网站上实现。我经常换做其他的方式，然后尝试做一个来自网站的UI好视频。</p>
<p><img src="http://p0.qhimg.com/t016da3be3ddbaa201d.jpg" alt=""></p>
<p>能够发表vine或者一些video，是十分高杆的。有一天，我十分激动于我做的东西，并且尝试做成视频，分享给一些小伙伴。</p>
<p>然而，当我再看一次的时候，我发现有一堆东西不够完美。有一个大的滞后阻碍了之后的动画，并且所以的定时器都有一些问题。这让我有些担心，我最后没有发表它而是意识到我还有许多工作要做。</p>
<p>当要在正式环境使用它的时候粉饰这些很容易，但是看在视频上的动画——一遍又一遍或者在一个很慢的速度——让所有的问题都变得十分明显。</p>
<p><img src="http://p0.qhimg.com/t017cf7418c05cdfcf4.jpg" alt=""></p>
<p>他们说相机加了10磅。也许这也增加了10帧。</p>
<p><img src="http://p0.qhimg.com/t019d5f3ec63d3322e1.jpg" alt=""></p>
<p>I<br>这现在也变成了我工作流中重要的一部分，查看页面慢动画视频，以及如果有任何帧让我感觉不对，就马上做些改变。要怪罪于慢浏览器很容易，但是在一些更加优化的浏览器上，测试，有可能解决了所有的问题。</p>
<p>一旦你在视频上捕捉滞后停顿不觉得尴尬的时候，并且感觉视频够好，能够分享了，那么页面差不多就可以准备上线了。</p>
<blockquote>
<p>#7</p>
</blockquote>
<h3 id="网络活动导致滞后"><a href="#网络活动导致滞后" class="headerlink" title="网络活动导致滞后"></a>网络活动导致滞后</h3><p><em>你需要提前或者滞后加载大的http请求</em></p>
<p>图片是这个问题的最黑祸首们，是否一些大家伙（也许是一个大的背景）或者大量地小图片（想象50个表情符加载），或者仅仅有许多内容（一个很长的到底都有图片的页面）。</p>
<p>当页面第一次加载，大量的东西初始化和下载。有统计，广告和其他的第三方脚本让事情变得更糟糕。有时候，延迟所有的动画到加载完几百毫秒之后对性能有极大的帮助。</p>
<p>除非必要，不要过度优化，但是一个复杂的页面也许需要十分准确的延迟和内容定时，然后才能运行路畅。通常上来说，你想要在开始加载尽可能少的内容，一旦重的部分和简介动画做完之后，不断地加载页面其余的部分。</p>
<p>有许多数据的页面，加载所有的元素的工作量似乎是巨大的。一旦在做动画的同时开始加载真实数据，一个动画和静态页面运行地很好也许看上去是分开的。如果一些东西看上去应该工作或者有时候工作地流畅其他时间不流畅。我建议减产网络活动，确认你没有在同一时间做其他事情。</p>
<blockquote>
<p>#8</p>
</blockquote>
<h3 id="不要直接绑定滚动"><a href="#不要直接绑定滚动" class="headerlink" title="不要直接绑定滚动"></a>不要直接绑定滚动</h3><p><em>看上去是一个很酷的主意，但实际上不是。</em></p>
<p>在过去几年中，滚动为基础的动画很受欢迎，特别是在视差或者其他特殊效果中。是否是好设计，有待辩论，但是有一些好或者槽糕的方法去实现他们。</p>
<p>在这个类别中，适度的优化做些的事是将达到滚动到一定距离作为一个事件——并且仅仅运行一次。除非你真的了解你在做什么，我会建议避免这个类别，因为这很容易出问题而且真的很难维护。</p>
<p>更加糟糕的是，创建你自己的滚动条功能，而不是用默认的——也就是<em>scrolljacking</em>。请不要做么做！</p>
<p>这条建议对手机来说特别有用，但是也可能是用户体验的好实践。</p>
<p>如果你确实有一个特别的体验，你想专注在滚动或者其他特殊事件，我会建议创建一个快速原型，以确保这在花费大时间设计的时候，能够运行良好。</p>
<blockquote>
<p>#9</p>
</blockquote>
<h3 id="尽早-amp-经常在手机上测试。"><a href="#尽早-amp-经常在手机上测试。" class="headerlink" title="尽早&amp;经常在手机上测试。"></a>尽早&amp;经常在手机上测试。</h3><p>大多数网站是在电脑上创建的，并且很有可能在他们创建的相同机器上运行测试。因此手机体验和动画性能经常是后知后觉的。一些技术（比如canvas）或者动画技术在手机并没有运行地这么好。</p>
<p>然而，如果编写&amp;优化适当（看规则#1），一个手机体验可能会比电脑体验还要好。手机优化是一个非常棘手的课题，但是新的iPhone现在比大多数手提都要快！如果你按照之前的建议编写，你会发现你做的东西在手机上有着极佳的性能。</p>
<p><a href="https://gyrosco.pe/app/" target="_blank" rel="external"><img src="http://p0.qhimg.com/t01a8e36a629ced0700.jpg" alt=""></a></p>
<p>手机用法会是对于大多数网站都是一个非常大而且重要的部分。这看上去和极端，但是对于一整个项目，我会建议将手机从你的项目中分离出来。这不应该感觉像是一个惩罚去做手机版本，虽然经常会这样。</p>
<p>保持设计进步&amp;性能加强，知道这感觉被打磨流畅已经像网站的大版本那样方便。</p>
<p>如果你强迫自己只用手机网站一个礼拜，你很可能就会将它优化得向大型网站一样，有着的极佳体验。经常懊恼地使用是值得的，这意味着在你的用户体验之前解决问题。</p>
<blockquote>
<p>#10</p>
</blockquote>
<h3 id="在不同的设备上经常测试"><a href="#在不同的设备上经常测试" class="headerlink" title="在不同的设备上经常测试"></a>在不同的设备上经常测试</h3><p><em>屏幕大小，像素，或者设备都有着极大的暗示</em><br>.<br>除了手机vs桌面，有许多关键点会彻底影响性能，就像是否屏幕是“retina”屏，窗口的总像素，硬盘多老了，等等。</p>
<p>即使Chrome和Safari都是webkit的浏览器，有着相同的语法，他们也都有各自怪异行为。每一次chrome更新都会修复一些东西以及引入新的bug，因此你需要一直保持警觉。</p>
<p>当然，你不仅仅只希望创建最低水准的性能，因此找到最机智的方法来渐进添加或者移除增强功能会十分有用。</p>
<p>我经常在我的小Macbook和大的iMac之间切换，并且每次切换都引出了一些小问题并且做些改进——特别是依据动画性能，但是对于总体设计，信息密度，可读性，等等。</p>
<p>媒体查询，常常是强大的工具来处理这些不同环节样式，通过不同的高度或者宽度是最基础的媒体查询的用法。找出OS和设备的类型会很有用，因为手机性能特性和电脑很不一样。</p>
<p><a href="https://gyrosco.pe/" target="_blank" rel="external"><img src="http://p0.qhimg.com/t0192465868d2b8776c.gif" alt=""></a></p>
<p>我希望你在你的下一个项目中，会找到有用的技巧。好运！</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@cherryvenus" target="_blank" rel="external">cherryvenus</a><br>链接：<a href="http://www.zcfy.cc/article/1765" target="_blank" rel="external">http://www.zcfy.cc/article/1765</a><br>原文：<a href="https://blog.gyrosco.pe/smooth-css-animations-7d8ffc2c1d29?gi=7abf2b452ec#.8obfitru3?utm_source=CSS-Weekly&amp;utm_campaign=Issue-238&amp;utm_medium=email" target="_blank" rel="external">https://blog.gyrosco.pe/smooth-css-animations-7d8ffc2c1d29?gi=7abf2b452ec#.8obfitru3?utm_source=CSS-Weekly&amp;utm_campaign=Issue-238&amp;utm_medium=email</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML 5.1 里的新东西]]></title>
      <url>http://jsgrblog.win/2016/12/10/H5-1%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>两年前HTML5标准的发布对于web开发社区来说是一件大事。不仅是因为它包含了一系列让人印象深刻的新特性, 还因为它是1999年发布的HTML4.01标准以后，对HTML的第一个大版本更新。你现在依然可以看到一些网站夸耀他们在使用“现代”的HTML5标准。<br><img src="http://p0.qhimg.com/t01c6cd825f03ce294a.png" alt="A HTML 5.1 knight in shining armor!"><br><a id="more"></a></p>
<p>幸运的是我们不需为下一次HTML标准的更新等待那么长时间。2015年10月，W3C开始着手HTML5.1草案，其目标是修复一些HTML5遗留的问题。多次迭代后, 草案于2016年6月达到“候选建议（Candidate Recommendation）”阶段，2016年9月达到“提议建议（Proposed Recommendation）”，最终2016年11月发布<a href="https://www.w3.org/TR/html/" target="_blank" rel="external">W3C 建议</a>。关注新标准的人可能注意到了，这是一段曲折之路。很多开始提出的HTML5.1特性因为不好的设计或者缺少浏览器厂商支持而被废弃了。</p>
<p>尽管HTML5.1仍然在发展, W3C已经开始着手<a href="https://www.w3.org/TR/html52/" target="_blank" rel="external">HTML5.2草案</a>，该标准预计2017年末发布。本文是对HTML5.1一些有趣的新特性和提升的概览。浏览器对这些特性依然缺乏支持，但是至少我们会告诉你一些支持这些特性的浏览器，用来测试每个例子。</p>
<h3 id="上下文菜单使用menu和menuitems元素"><a href="#上下文菜单使用menu和menuitems元素" class="headerlink" title="上下文菜单使用menu和menuitems元素"></a>上下文菜单使用<code>menu</code>和<code>menuitems</code>元素</h3><p>HTML5.1草案介绍了两种不同的<code>menu</code>元素: <code>context</code>和<code>toolbar</code>。前者用来扩展本地上下文菜单，通常被页面上的鼠标右击激活；后者用来定义一个普通的菜单组件。在发展过程中，<code>toolbar</code> 被放弃了，但是<code>context</code>菜单保存了下来。</p>
<p>可以使用 <a href="https://www.w3.org/TR/html/interactive-elements.html#the-menu-element" target="_blank" rel="external"><code>&lt;menu&gt;</code></a> 标签来定义一个包含一个或几个 <a href="https://www.w3.org/TR/html/interactive-elements.html#the-menuitem-element" target="_blank" rel="external"><code>&lt;menuitem&gt;</code></a> 元素的菜单，然后把它绑定到任何使用<a href="https://www.w3.org/TR/html/interactive-elements.html#element-attrdef-global-contextmenu" target="_blank" rel="external"><code>contextmenu</code></a> 属性的元素上。</p>
<p>每个 <code>&lt;menuitem&gt;</code> 可以是以下三种类型之一:</p>
<ul>
<li><p><code>checkbox</code> – 允许选择或者取消选择一个选项(option);</p>
</li>
<li><p><code>command</code> – 允许在单击鼠标时执行一个动作;</p>
</li>
<li><p><code>radio</code> – 允许在一组选项中选择一个.</p>
</li>
</ul>
<p>这里有一个基本的使用例子，可以在Firefox49中运行， 但是Chrome54目前不行。</p>
<p>请看SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="external">@SitePoint</a>)在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上<a href="http://codepen.io/SitePoint/pen/bBrvRP/" target="_blank" rel="external">HTML5.1菜单例子</a>。</p>
<p>在一个支持的浏览器上，这个上下文菜单的例子应该看起来这样：</p>
<p><img src="http://p0.qhimg.com/t012b201ff03692f462.png" alt="A HTML 5.1 context menu"></p>
<p>上下文菜单中有自定义项。</p>
<h3 id="细节（Details）和总结（Summary）元素"><a href="#细节（Details）和总结（Summary）元素" class="headerlink" title="细节（Details）和总结（Summary）元素"></a>细节（Details）和总结（Summary）元素</h3><p>新的<a href="https://www.w3.org/TR/html/interactive-elements.html#the-details-element" target="_blank" rel="external"><code>&lt;details&gt;</code></a>和<a href="https://www.w3.org/TR/html/interactive-elements.html#the-summary-element" target="_blank" rel="external"><code>&lt;summary&gt;</code></a>元素可以通过鼠标点击实现附加信息的展示和隐藏。这是使用JavaScript时候经常在干的事，现在可以使用<code>&lt;details&gt;</code>元素和<code>&lt;summary&gt;</code>元素代劳了。点击<code>&lt;summary&gt;</code>元素可以展示和隐藏<code>details</code>元素的其余部分.</p>
<p>下面的例子可以在Firefox和Chrome中进行测试。</p>
<p>请看SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="external">@SitePoint</a>)在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上<a href="http://codepen.io/SitePoint/pen/rWzgzg/" target="_blank" rel="external">HTML5.1 细节和总结 demo</a>。</p>
<p>这个demo在支持的浏览器上应该是下面这样：</p>
<p><img src="http://p0.qhimg.com/t01800aaa24cc973da6.png" alt="Details and summary elements"></p>
<h3 id="更多的input类型-month，week-和-datetime-local"><a href="#更多的input类型-month，week-和-datetime-local" class="headerlink" title="更多的input类型 - month，week 和 datetime-local"></a>更多的input类型 - <code>month</code>，<code>week</code> 和 <code>datetime-local</code></h3><p>input扩展了三种类型: <a href="https://www.w3.org/TR/html/sec-forms.html#month-state-typemonth" target="_blank" rel="external"><code>month</code></a>， <a href="https://www.w3.org/TR/html/index.html#contents" target="_blank" rel="external"><code>week</code></a> 和<a href="https://www.w3.org/TR/html/sec-forms.html#local-date-and-time-state-typedatetimelocal" target="_blank" rel="external"><code>datetime-local</code></a>。</p>
<p>前两种类型让你可以选择周或者月。在Chrome中两者都渲染成下拉的日历，可以选择某周或者某月。当你用JavaScript获得它们的值，你将得到一个大致这样的字符串： <code>&quot;2016-W43&quot;</code>（<code>week</code> input）； <code>&quot;2016-10&quot;</code> （<code>month</code> input）。</p>
<p>最初，HTML5.1草案介绍了两种日期类型input — <code>datetime</code>和<code>datetime-local</code>。不同的是，<code>datetime-local</code> 使用用户时区, 而<code>datetime</code>允许你选择时区。发展过程中，<code>datetime</code> 被放弃了，现在只有<code>datetime-local</code>存在。<code>datetime-local</code> input由两部分组成 — 日期，可以像<code>week</code> 和 <code>month</code>一样进行选择；时间, 可以单独输入。</p>
<p>下面是关于所有新类型input的例子，它在chrome中可以正常展示，但是firfox不行。</p>
<p>请看SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="external">@SitePoint</a>)在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上<a href="http://codepen.io/SitePoint/pen/xRLowg/" target="_blank" rel="external">HTML 5.1 week, month 和 datetime inputs</a>。</p>
<p>这个demo在支持的浏览器上应该是下面这样：</p>
<p><img src="http://p0.qhimg.com/t018be52a398d1db7cd.png" alt="Week, month and datetime-local inputs"></p>
<h3 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h3><p>HTML5.1包括几个在不使用CSS情况下实现响应式图片的新特性。每个特性都有自己单独的使用场景。</p>
<h4 id="srcset属性"><a href="#srcset属性" class="headerlink" title="srcset属性"></a><code>srcset</code>属性</h4><p><a href="https://www.w3.org/TR/html/single-page.html#element-attrdef-img-srcset" target="_blank" rel="external"><code>srcset</code></a>图像属性允许列出多个可用于替代的图片数据源，这些数据源的像素密度不同。这使得浏览器可以针对用户设备选择合适质量的图片（由设备的像素密度、缩放比例或者网速决定）。例如，在低速手机网络和小屏幕手机的情况下，应该为用户提供低像素的图片。</p>
<p><code>srcset</code>属性接受一个用逗号分隔的URL列表，每个URL带有一个表示最接近所请求图片像素比（一个CSS像素所代表的物理像素数量）的修饰<code>x</code>。下面是一个简单的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;images/low-res.jpg&quot; srcset=&quot;</div><div class="line">  images/low-res.jpg 1x, </div><div class="line">  images/high-res.jpg 2x, </div><div class="line">  images/ultra-high-res.jpg 3x&quot;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>在这个例子中，如果用户设备的像素比是1，图片<code>low-res</code>将会被展示；如果是2，图片<code>high-res</code>将会被展示；如果是3或者更大，图片<code>ultra-high-res</code>将会被展示。</p>
<p>或者，你可以选择将图片展示成不同尺寸。这需要使用<code>w</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;images/low-res.jpg&quot; srcset=&quot;</div><div class="line">  images/low-res.jpg 600w, </div><div class="line">  images/high-res.jpg 1000w, </div><div class="line">  images/ultra-high-res.jpg 1400w&quot;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>在这个例子中，图片<code>low-res</code>被定义成600px宽，图片<code>high-res</code>被定义成1000px宽，<code>ultra-high-res</code>是1400px宽。</p>
<h4 id="sizes属性"><a href="#sizes属性" class="headerlink" title="sizes属性"></a><code>sizes</code>属性</h4><p>你可能想根据用户屏幕尺寸来使用不同方式展示图片。例如，你可能想在宽屏幕上用两栏展示图片，窄一些的屏幕上用一栏。这点用<code>sizes</code>属性就可以实现。它允许你为图片分配屏幕的宽度，然后通过<code>srcset</code>属性选择合适的图片。下面是一个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;images/low-res.jpg&quot; sizes=&quot;(max-width: 40em) 100vw, 50vw&quot; </div><div class="line">  srcset=&quot;images/low-res.jpg 600w, </div><div class="line">  images/high-res.jpg 1000w, </div><div class="line">  images/ultra-high-res.jpg 1400w&quot;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>当视口宽度大于40em时，<code>sizes</code>属性把图片的宽度定义为视口宽度的50%；当视口（viewport）宽度小于或者等于40em时，把图片宽度定义为视口宽度的100%。</p>
<h4 id="picture元素"><a href="#picture元素" class="headerlink" title="picture元素"></a><code>picture</code>元素</h4><p>如果根据屏幕不同改变图片的尺寸还是不能满足需求，你想根据屏幕不同展示不同的图片，那就需要使用<a href="https://www.w3.org/TR/html/single-page.html#elementdef-picture" target="_blank" rel="external"><code>picture</code></a>元素。它允许你通过用<code>&lt;picture&gt;</code>指定多个不同<code>&lt;source&gt;</code>元素，来为不同尺寸的屏幕定义不同资源的图片。<code>&lt;source&gt;</code>元素作为URL加载图片的来源。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;picture&gt;</div><div class="line">  &lt;source media=&quot;(max-width: 20em)&quot; srcset=&quot;</div><div class="line">    images/small/low-res.jpg 1x,</div><div class="line">    images/small/high-res.jpg 2x, </div><div class="line">    images/small/ultra-high-res.jpg 3x</div><div class="line">  &quot;&gt;</div><div class="line">  &lt;source media=&quot;(max-width: 40em)&quot; srcset=&quot;</div><div class="line">    images/large/low-res.jpg 1x,</div><div class="line">    images/large/high-res.jpg 2x, </div><div class="line">    images/large/ultra-high-res.jpg 3x</div><div class="line">  &quot;&gt;</div><div class="line"></div><div class="line">  &lt;img src=&quot;images/large/low-res.jpg&quot;&gt;</div><div class="line">&lt;/picture&gt;</div></pre></td></tr></table></figure>
<p>如果你想知道更多关于响应式图片的东西，请戳<a href="https://www.sitepoint.com/how-to-build-responsive-images-with-srcset" target="_blank" rel="external">How to Build Responsive Images with <code>srcset</code></a>.</p>
<h3 id="用form-reportValidity-验证表单"><a href="#用form-reportValidity-验证表单" class="headerlink" title="用form.reportValidity()验证表单"></a>用<code>form.reportValidity()</code>验证表单</h3><p>HTML5定义的<a href="https://www.w3.org/TR/html/single-page.html#dom-htmlobjectelement-checkvalidity" target="_blank" rel="external"><code>form.checkValidity()</code></a>方法可以检查表单是否符合事先定义好的验证器然后返回一个布尔值。新的<a href="https://www.w3.org/TR/html/single-page.html#dom-htmlformelement-reportvalidity" target="_blank" rel="external"><code>reportValidity()</code></a> 方法很相似 — 它也可以检验一个表单并返回结果，但是它还能为用户报告错误。下面是一个例子（请在Firefox或Chrome中测试）：</p>
<p>请在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上看SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="external">@SitePoint</a>)的例子<a href="http://codepen.io/SitePoint/pen/eBEwjg/" target="_blank" rel="external">HTML 5.1 report validity demo</a>。</p>
<p>“First name”输入框被要求非空，如果不填写它将被标记有错误。如果符合预期，它将是这样：</p>
<p><img src="http://p0.qhimg.com/t01f231808cf20572c6.png" alt="Working form validation with a message"></p>
<h3 id="frames的AllowfullscreenFrames的Allowfullscreen属性"><a href="#frames的AllowfullscreenFrames的Allowfullscreen属性" class="headerlink" title="frames的AllowfullscreenFrames的Allowfullscreen属性"></a>frames的<code>Allowfullscreen</code>Frames的<code>Allowfullscreen</code>属性</h3><p>frames新的布尔属性<a href="https://www.w3.org/TR/html/single-page.html#element-attrdef-iframe-allowfullscreen" target="_blank" rel="external"><code>allowfullscreen</code></a>可以控制内容是否可以通过<a href="https://fullscreen.spec.whatwg.org/#dom-element-requestfullscreen" target="_blank" rel="external"><code>requestFullscreen()</code></a>方法来全屏展示内容。</p>
<h3 id="使用element-forceSpellCheck-进行拼写检查"><a href="#使用element-forceSpellCheck-进行拼写检查" class="headerlink" title="使用element.forceSpellCheck()进行拼写检查"></a>使用<code>element.forceSpellCheck()</code>进行拼写检查</h3><p>新的<a href="https://html.spec.whatwg.org/multipage/interaction.html#dom-forcespellcheck" target="_blank" rel="external"><code>element.forceSpellCheck()</code></a>方法允许你在text元素上触发拼写检查。这也是本文所列出的所有特性中第一个还不被任何浏览器支持的特性。也许，这可以用来进行检查还没有被用户直接编辑的元素。</p>
<h3 id="没有写进HTML5-1的特性"><a href="#没有写进HTML5-1的特性" class="headerlink" title="没有写进HTML5.1的特性"></a>没有写进HTML5.1的特性</h3><p>一些特性在第一版的草案中被定义但是最终被删除了，大部分原因是浏览器厂商缺乏兴趣。下面是其中一些有趣的方法：</p>
<h4 id="inert属性"><a href="#inert属性" class="headerlink" title="inert属性"></a><code>inert</code>属性</h4><p><code>inert</code>属性可以禁用所有子元素的用户交互，就像给所有子元素都加了<code>disabled</code>属性。</p>
<h4 id="dialog元素"><a href="#dialog元素" class="headerlink" title="dialog元素"></a><code>dialog</code>元素</h4><p><code>&lt;dialog&gt;</code>元素提供一个原生的弹出框，它甚至有一个方便的表单集合 - 在<code>&lt;dialog&gt;</code>上使用<code>method</code>属性可以阻止表单提交到服务器上，而是关闭弹出框并把结果返回给弹出框的建立者。</p>
<p>这个特性似乎在firfox仍然支持，所以可以看看下面这个例子（译者注：firfox V49.0.2不支持：</p>
<p>请看SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="external">@SitePoint</a>)在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>的例子 <a href="http://codepen.io/SitePoint/pen/XNaLOg/" target="_blank" rel="external">HTML dialog element</a>。</p>
<h3 id="作者的更多文章"><a href="#作者的更多文章" class="headerlink" title="作者的更多文章"></a>作者的更多文章</h3><ul>
<li><p><a href="https://www.sitepoint.com/up-and-running-with-eslint-the-pluggable-javascript-linter/?utm_source=sitepoint&amp;utm_medium=relatedinline&amp;utm_term=&amp;utm_campaign=relatedauthor" target="_blank" rel="external">Up and Running with ESLint — the Pluggable JavaScript Linter</a></p>
</li>
<li><p><a href="https://www.sitepoint.com/visual-regression-testing-with-phantomcss/?utm_source=sitepoint&amp;utm_medium=relatedinline&amp;utm_term=&amp;utm_campaign=relatedauthor" target="_blank" rel="external">Visual Regression Testing with PhantomCSS</a></p>
</li>
</ul>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>这不是一个关于HTML5.1所有新特性的文章。有许多小的新特性、改变已经从现行标准中删除，还有一些从未使用的特性也被删除了。如果你想知道HTML5.1的所有改变，请戳[Changes](<a href="https://www.w3.org/TR/html/changes.html#changes。同时，让我们一起期待浏览器厂商尽快支持这些新特性!" target="_blank" rel="external">https://www.w3.org/TR/html/changes.html#changes。同时，让我们一起期待浏览器厂商尽快支持这些新特性!</a></p>
<p>HTML5.1哪些方面最令你激动？通过评论告诉我们吧!</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@CynthiaLYY" target="_blank" rel="external">柒青衿</a><br>链接：<a href="http://www.zcfy.cc/article/1899" target="_blank" rel="external">http://www.zcfy.cc/article/1899</a><br>原文：<a href="https://www.sitepoint.com/whats-new-in-html-5-1/" target="_blank" rel="external">https://www.sitepoint.com/whats-new-in-html-5-1/</a></p>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
