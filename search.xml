<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[148个资源让你成为CSS专家]]></title>
      <url>http://jsgrblog.win/2016/12/10/148%E4%B8%AA%E8%B5%84%E6%BA%90%E8%AE%A9%E4%BD%A0%E6%88%90%E4%B8%BACSS%E4%B8%93%E5%AE%B6/</url>
      <content type="html"><![CDATA[<p>迄今为止，我已经收集了100多个精通CSS的资源，它们能让你更好地掌握CSS技巧，使你的布局设计脱颖而出。<br><a id="more"></a></p>
<h3 id="CSS3-资源"><a href="#CSS3-资源" class="headerlink" title="CSS3 资源"></a>CSS3 资源</h3><ul>
<li><a href="http://sixrevisions.com/css/20-useful-resources-for-learning-about-css3/" target="_blank" rel="external">20个学习CSS3的有用资源</a></li>
<li><a href="http://www.w3avenue.com/2009/06/22/css3-unleashed-tips-tricks-and-techniques/" target="_blank" rel="external">CSS3 风暴 — 提示, 诀窍 和 技巧</a></li>
<li><a href="http://speckyboy.com/2008/04/22/20-very-useful-css3-tutorials/" target="_blank" rel="external">20个非常有用的CSS3教程</a></li>
<li><a href="http://www.noupe.com/css3/css3-exciting-functions-and-features-30-useful-tutorials.html" target="_blank" rel="external">令人激动的CSS3函数与特性: 30多个有用教程</a></li>
</ul>
<h3 id="参考资源与备忘录"><a href="#参考资源与备忘录" class="headerlink" title="参考资源与备忘录"></a>参考资源与备忘录</h3><ul>
<li><a href="http://www.blooberry.com/indexdot/css/propindex/all.htm" target="_blank" rel="external">CSS属性指引</a> —— 一份清单，按字母表顺序列出了每个CSS属性。</li>
</ul>
<p><img src="http://p4.qhimg.com/t01d221c864f3e856b6.jpg" alt=""></p>
<ul>
<li><a href="http://www.w3.org/TR/CSS2/" target="_blank" rel="external">层叠样式表二修订版1</a> — 这是W3C对CSS 2.1 作出的官方说明。</li>
<li><a href="http://www.dustindiaz.com/css-shorthand/" target="_blank" rel="external">CSS简写指引</a> — 覆盖了基础的CSS缩写形式。</li>
<li><a href="http://webdesign.about.com/od/css/a/css_cheat_sheet.htm" target="_blank" rel="external">CSS速查表</a> — 两份表来自About.com — 一份关于CSS基础特性，一份关于CSS布局。</li>
<li><a href="http://css.maxdesign.com.au/listamatic/" target="_blank" rel="external">列表速建</a> — 该网站提供了大量的例子，告诉你如何使用CSS创建各种不同风格的列表。</li>
<li><a href="http://www.cameronmoll.com/archives/001211.html" target="_blank" rel="external">经验丰富的CSS设计师给初学者的指南</a> — 这里有大量的资源适用于CSS初学者。</li>
<li><a href="http://erraticwisdom.com/2006/01/18/5-tips-for-organizing-your-css" target="_blank" rel="external">组合CSS的5点提示</a> — 这篇文章提供了5个真正有效的方法，让你更好地组织你的样式表（而且，有助于以后的编辑修改）。</li>
<li><a href="http://www.businesslogs.com/design_and_usability/my_5_css_tips.php" target="_blank" rel="external">我的5个CSS提示</a> — 收集了5个用于更好地创建CSS的例子。</li>
<li><a href="http://www.quirksmode.org/css/quirksmode.html" target="_blank" rel="external">惯用模式与严格模式</a> - 在现代浏览器里面惯用模式与严格模式指南。</li>
<li><a href="http://www.addedbytes.com/cheat-sheets/css-cheat-sheet/" target="_blank" rel="external">CSS速查表(V2)</a> — 一份单页的CSS参考书，列出了所有CSS 2.1的选择器。</li>
<li><a href="http://refcardz.dzone.com/refcardz/corecss-part1" target="_blank" rel="external">核心CSS: 第一篇</a> — 一份来自Refcardz的基础CSS参考指南.</li>
<li><a href="http://www.eddiewelker.com/wp-content/uploads/2007/09/csscheatsheet.pdf" target="_blank" rel="external">CSS 简写速查表 (PDF)</a> — CSS简写形式参考书.</li>
<li><a href="http://webdesignfromscratch.com/html-css/css.php" target="_blank" rel="external">使用 CSS (层叠样式表)</a> — 基础CSS指南，包含使用CSS的好处介绍.</li>
<li><a href="http://net.tutsplus.com/tutorials/html-css-techniques/5-tips-to-writing-better-css/" target="_blank" rel="external">5个方法快速写成高质量的CSS</a> — 写出高效CSS的一些提示。</li>
<li><a href="http://davidwalsh.name/optimizing-structure-print-css" target="_blank" rel="external">使用CSS优化网页打印效果</a> — 创建适用于打印的样式表指南.</li>
<li><a href="http://css-discuss.incutio.com/?page=PrintStylesheets" target="_blank" rel="external">打印样式表</a> — 创建打印样式表的另一份指南.</li>
<li><a href="http://www.noupe.com/css/css-typography-contrast-techniques-tutorials-and-best-practices.html" target="_blank" rel="external">CSS 排版: 反差技巧、教程和CSS最佳实践</a> — 收集了大量的CSS印刷资源。</li>
<li><a href="http://www.smashingmagazine.com/2008/02/21/powerful-css-techniques-for-effective-coding/" target="_blank" rel="external">高效编码必备的CSS技巧</a> — 为了更好地编写CSS而收集的CSS 技巧、意见和解决方案。</li>
</ul>
<p><img src="http://p6.qhimg.com/t01cf2125b05443f0f4.jpg" alt=""></p>
<ul>
<li><a href="http://sixrevisions.com/css/css-tips/css-tip-1-resetting-your-styles-with-css-reset/" target="_blank" rel="external">用CSS Reset来重置CSS样式</a> — 一份重置样式的完整指南。</li>
<li><a href="http://sixrevisions.com/css/css-tips/css-tip-2-structural-naming-convention-in-css/" target="_blank" rel="external">CSS结构化命名惯例</a> — 一篇关于元素命名的文章，这里讲述基于元素本身的命名，而不是基于它们的位置或外观。</li>
<li><a href="http://www.smashingmagazine.com/2008/05/02/improving-code-readability-with-css-styleguides/" target="_blank" rel="external">用CSS风格指南提高代码的可读性</a> — 文章涵盖5大技巧，让你的代码更加易于维护和管理。</li>
<li><a href="http://www.smashingmagazine.com/2007/05/10/70-expert-ideas-for-better-css-coding/" target="_blank" rel="external">写好CSS的70个专业意见</a> — 搜集了一些关于写好CSS的专业提示。</li>
<li><a href="http://www.smashingmagazine.com/2007/05/01/css-float-theory-things-you-should-know/" target="_blank" rel="external">你必须知道的CSS浮动</a> — 一份帮你理解CSS浮动的指南.</li>
<li><a href="http://www.westciv.com/style_master/academy/css_tutorial/" target="_blank" rel="external">完整的CSS指引</a> — 大量的资源，涵盖了CSS的方方面面.</li>
<li><a href="http://www.webdesignerwall.com/tutorials/typographic-contrast-flow/" target="_blank" rel="external">创建排印样式对比的七个基本方法</a> — 文章列出了一些基本要素，关于在CSS里面使用充分的排版对比来营造优秀的样式风格。</li>
<li><a href="http://www.alistapart.com/articles/howtosizetextincss/" target="_blank" rel="external">如何用CSS处理文本的大小</a> — 一篇关于处理CSS文本大小的透彻指南。</li>
<li><a href="http://lesliefranke.com/files/reference/csscheatsheet.html" target="_blank" rel="external">CSS速查</a> — 一份非常完整的网页CSS速查表.</li>
</ul>
<p><img src="http://p8.qhimg.com/t01a8041a25ceec8d4c.jpg" alt=""></p>
<ul>
<li><a href="http://designreviver.com/tips/13-training-principles-of-css-everyone-should-know/" target="_blank" rel="external">每个人都应该知道的13条CSS训练原则</a> — 列出了你应在注意的一些基本的CSS惯例.</li>
<li><a href="http://www.mezzoblue.com/zengarden/resources/" target="_blank" rel="external">资源指引</a> — 这是来自CSS Zen Garden的CSS资源指引。</li>
<li><a href="http://www.cssbeauty.com/" target="_blank" rel="external">CSS美化</a> — 该网站提供了一些CSS消息、资源和画廊.</li>
</ul>
<p><img src="http://p0.qhimg.com/t0185889786af45c002.jpg" alt=""></p>
<ul>
<li><a href="http://www.tech-evangelist.com/2008/08/23/css-shortcuts/" target="_blank" rel="external">使用CSS简写</a> — 一些CSS缩写的参考指南。</li>
<li><a href="http://www.alvit.de/handbook/" target="_blank" rel="external">网页开发者手册</a> — This is a massive collection of CSS and other resources, including showcases, tools, and more.搜集了CSS以及一些其他的资源，如示例、工具等。</li>
<li><a href="http://www.softwaredeveloper.com/features/designing-on-a-dime-060407/" target="_blank" rel="external">100个免费的CSS资源</a> — 大量CSS资源，包括相关的文章、教程、布局等等。</li>
</ul>
<p><img src="http://p2.qhimg.com/t01dce336ca6f625ada.jpg" alt=""></p>
<ul>
<li><a href="http://www.seomoz.org/blog/css-properties-you-probably-never-use" target="_blank" rel="external">15个你可能从未用过的CSS属性 (但或许要知道)</a> — 文章覆盖了15个经常被忽视的CSS属性，许多开发者可能都不知道它们的存在。</li>
<li><a href="http://net.tutsplus.com/tutorials/html-css-techniques/10-principles-of-the-css-masters/" target="_blank" rel="external">CSS专家的10条原则</a> — 搜集了一些CSS大牛的重要原则和指南.</li>
<li><a href="http://www.smashingmagazine.com/2007/07/27/css-specificity-things-you-should-know/" target="_blank" rel="external">你应该知道的CSS特性</a> — 一份CSS权重特殊性指南，css权重是CSS里面最难掌握的知识点之一。</li>
<li><a href="http://net.tutsplus.com/tutorials/html-css-techniques/solving-5-common-css-headaches/" target="_blank" rel="external">解决5个普遍的CSS难题</a> — 告诉你如何处理一些CSS难题，如 IE6 里面双层外边框的bug，以及无效样式等。</li>
</ul>
<h3 id="教程与技巧"><a href="#教程与技巧" class="headerlink" title="教程与技巧"></a>教程与技巧</h3><ul>
<li><a href="http://www.wpdfd.com/issues/70/css_from_the_ground_up/" target="_blank" rel="external">从零开始学CSS</a> — 这是一个非常基础的教程，让你从零开始学习CSS并用它创建第一个基础网页。该教程对于那些对网页构建不了解的初学者来说，是很好的资源。</li>
</ul>
<p><img src="http://p7.qhimg.com/t01d9eb9adec132ce31.jpg" alt=""></p>
<ul>
<li><a href="http://www.smashingmagazine.com/2007/01/19/53-css-techniques-you-couldnt-live-without/" target="_blank" rel="external">53个生存必备的CSS技巧</a> — 这里收集了大量的CSS技巧，从菜单到表单再到样式表打印，都有相关介绍。</li>
<li><a href="http://www.alistapart.com/articles/cssdropshadows/" target="_blank" rel="external">CSS 阴影效果</a> — 一个关于如何用CSS给图片加阴影的教程。</li>
<li><a href="http://css.maxdesign.com.au/selectutorial/index.htm" target="_blank" rel="external">CSS 选择器教程</a> — CSS选择器的基本介绍以及它们是如何工作的。</li>
<li><a href="http://www.alvit.de/css-showcase/css-navigation-techniques-showcase.php" target="_blank" rel="external">CSS 导航技巧</a> — 搜集了37个不同的CSS导航设计。</li>
</ul>
<p><img src="http://p6.qhimg.com/t01d2a877050eef2c5c.jpg" alt=""></p>
<ul>
<li><a href="http://www.christianmontoya.com/2007/02/01/css-techniques-i-use-all-the-time/" target="_blank" rel="external">我一直使用的CSS技巧</a> — A collection of CSS techniques Christian Montoya finds extremely valuable.</li>
<li><a href="http://www.petefreitag.com/item/475.cfm" target="_blank" rel="external">CSS技巧综述 — 20个CSS提示与诀窍</a> — 收集了关于CSS圆角和弹窗的一些技巧。</li>
<li><a href="http://www.blogherald.com/2006/09/08/css-tips-and-tricks/" target="_blank" rel="external">CSS提示与小窍门</a> — 有效基础的CSS技巧.</li>
<li><a href="http://www.crucialwebhost.com/blog/master-stylesheet-the-most-useful-css-technique/" target="_blank" rel="external">精通样式表: 最有用的CSS技巧</a> — 用于清除和重置浏览器默认的样式。</li>
</ul>
<p><img src="http://p1.qhimg.com/t0166171f1772c742c4.jpg" alt=""></p>
<ul>
<li><a href="http://www.askthecssguy.com/2006/12/showing_hyperlink_cues_with_cs_1.html" target="_blank" rel="external">用CSS展示超链接提示</a> — 本教程告诉你如何快速使用CSS添加链接式图标, 并且能够兼容IE7, Safari和火狐。</li>
<li><a href="http://www.webcredible.co.uk/user-friendly-resources/css/css-tricks.shtml" target="_blank" rel="external">10个你可能不知道的CSS诀窍</a> — 涵盖了CSS字体、图片替换、垂直居中等技巧。</li>
<li><a href="http://www.webcredible.co.uk/user-friendly-resources/css/more-css-tricks.shtml" target="_blank" rel="external">10多个你可能不知道的CSS技巧</a> — 这篇文章涵盖了块级元素与行内元素、设置页面最小宽度及不可见文本等。</li>
<li><a href="http://www.456bereastreet.com/archive/200501/turning_a_list_into_a_navigation_bar/" target="_blank" rel="external">用lists实现导航栏</a> — 这是个很棒的教程，一步步指导你如何用列表来制作导航栏。</li>
</ul>
<p><img src="http://p6.qhimg.com/t0134cf627d77f92e2b.jpg" alt=""></p>
<ul>
<li><a href="http://odyniec.net/articles/turning-lists-into-trees/" target="_blank" rel="external">用lists实现树形图</a> — 如何创建一个多层级无序的页面树形图。</li>
<li><a href="http://www.digital-web.com/articles/web_page_reconstruction_with_css/" target="_blank" rel="external">如何用CSS实现网页重构</a> — 如何用CSS布局重构一个网页。</li>
<li><a href="http://www.webreference.com/authoring/style/sheets/layout/advanced/" target="_blank" rel="external">一步步实现高级网页布局</a> — 一步步教你创建一个高级的三栏布局。</li>
<li><a href="http://www.subcide.com/tutorials/csslayout/" target="_blank" rel="external">从头搭建CSS布局</a> — 该教程教你如何从零开始用CSS创建一个网页。</li>
</ul>
<p><img src="http://p1.qhimg.com/t010c4c2efd1aeb08ed.jpg" alt=""></p>
<ul>
<li><a href="http://www.w3schools.com/css/" target="_blank" rel="external">CSS 教程</a> — 来自 W3Schools 的完整教程。</li>
<li><a href="http://www.yourhtmlsource.com/stylesheets/" target="_blank" rel="external">样式表</a> — 另一个非常全的CSS教程。</li>
<li><a href="http://www.miswebdesign.com/resources/articles/fancy-paragraphs.html" target="_blank" rel="external">CSS实现的精致图表</a> — 创建特殊的图表形式。</li>
<li><a href="http://www.schillmania.com/content/projects/even-more-rounded-corners/" target="_blank" rel="external">关于CSS的更多圆角技巧</a> — 教你如何创建支持PNG和<code>alpha</code>透明度的圆角。</li>
</ul>
<p><img src="http://p7.qhimg.com/t019e1a609a69f6d274.jpg" alt=""></p>
<ul>
<li><a href="http://www.projectseven.com/tutorials/css/uberlinks/index.htm" target="_blank" rel="external">CSS菜单列表</a></li>
<li><a href="http://net.tutsplus.com/tutorials/html-css-techniques/how-to-add-variables-to-your-css-files/" target="_blank" rel="external">如何向你的CSS文件添加变量</a> — 告诉你如何用PHP和Apache的URL向你的CSS文件添加变量。</li>
</ul>
<p><img src="http://p1.qhimg.com/t01583776c58256889d.jpg" alt=""></p>
<ul>
<li><a href="http://www.catswhocode.com/blog/15-techniques-and-tools-for-cross-browser-css-coding" target="_blank" rel="external">跨浏览器CSS编码的15个技巧和工具</a> — 文章涵盖了15条以上的提示，都是关于如何用CSS解决跨浏览器的兼容问题。</li>
<li><a href="http://www.maxdesign.com.au/presentation/center/" target="_blank" rel="external">CSS 轴心化</a> — 如何创建CSS轴心化布局，包括中央CSS流式布局。</li>
<li><a href="http://css-tricks.com/absolute-positioning-inside-relative-positioning/" target="_blank" rel="external">绝对定位在相对定位里面</a> — 关于如何在一个相对定位的父元素中绝对定位一个子元素的指南。</li>
<li><a href="http://www.alistapart.com/articles/fauxabsolutepositioning" target="_blank" rel="external">Faux 绝对定位</a> — 关于把浮动和绝对定位结合起来的方法指南。</li>
<li><a href="http://www.ampsoft.net/webdesign-l/vertical-aligned-nav-list.html" target="_blank" rel="external">多行导航栏的垂直居中</a> — 使用浮动的方法实现列表对齐。</li>
<li><a href="http://www.catswhocode.com/blog/top-10-css-buttons-tutorial-list" target="_blank" rel="external">前10个CSS按钮教程列表</a> — 收藏了10个创建CSS按钮的最好教程。</li>
<li><a href="http://www.alistapart.com/articles/mountaintop" target="_blank" rel="external">山顶角</a> — 用CSS来实现的圆角。</li>
<li><a href="http://www.smileycat.com/miaow/archives/000044.php" target="_blank" rel="external">CSS 圆角综述</a> — 收藏了CSS圆角的技巧和教程。</li>
<li><a href="http://www.macworld.com/article/48296/2005/12/januarycreate.html" target="_blank" rel="external">CSS小窍门–自定义子弹头</a> — 关于如何用CSS实现子弹头的指南。</li>
</ul>
<p><img src="http://p4.qhimg.com/t01ff214f3987218575.jpg" alt=""></p>
<ul>
<li><a href="http://www.alistapart.com/articles/multicolumnlists" target="_blank" rel="external">CSS Swag: 多栏列表</a> — A guide to creating semantically-logical, ordered list that wraps through multiple vertical columns一份关于创建语义化的、有序的多栏列表指南。</li>
<li><a href="http://www.alistapart.com/articles/improvingprint/" target="_blank" rel="external">改善打印版的链接展示</a> — 示范了打印输出时如何在超链接文本中如何包含链接地址.</li>
<li><a href="http://www.3point7designs.com/blog/2007/12/22/advanced-css-menu-trick/" target="_blank" rel="external">高级CSS菜单技巧</a> — 用CSS创建一个真正酷炫的、高级的、带有模糊效果的菜单。</li>
<li><a href="http://www.howtocreate.co.uk/tutorials/testMenu.html" target="_blank" rel="external">CSS 菜单</a> — 一个关于用纯CSS2（不包含JS）嵌套列表创建菜单面板的教程。</li>
<li><a href="http://www.dave-woods.co.uk/?p=104" target="_blank" rel="external">CSS Tab菜单带下拉效果</a> — 一个关于创建带有下拉效果的CSS菜单教程。</li>
</ul>
<p><img src="http://p3.qhimg.com/t019f674c1d6859b120.jpg" alt=""></p>
<ul>
<li><a href="http://www.webdesignerwall.com/tutorials/advanced-css-menu/" target="_blank" rel="external">高级CSS菜单</a> — 来自网页设计墙的绚丽CSS菜单教程。</li>
<li><a href="http://www.dynamicdrive.com/style/csslibrary/item/animated_horizontal_tabs/" target="_blank" rel="external">自动水平化tab</a> — 该教程教你如何创建带有翻转效果的水平菜单。</li>
<li><a href="http://bwebi.com/css_graphic_menu_with_rollovers.html" target="_blank" rel="external">带有翻转效果的CSS图标菜单</a> — 创建带有CSS翻转效果的菜单教程。</li>
<li><a href="http://www.alistapart.com/articles/hybrid/" target="_blank" rel="external">混杂的CSS下拉菜单</a> — 一个教你如何创建CSS下拉菜单并且做到优雅降级，结构合理的教程。</li>
</ul>
<p><img src="http://p3.qhimg.com/t01a097451e5b10af93.jpg" alt=""></p>
<ul>
<li><a href="http://friendlybit.com/css/beginners-guide-to-css-and-standards/" target="_blank" rel="external">初学者CSS指南</a> — 给初识CSS者的完整指南。</li>
<li><a href="http://line25.com/tutorials/getting-started-with-css-a-practical-exercise" target="_blank" rel="external">开始CSS实战</a> — 一个非常基础的CSS实战指南。</li>
<li><a href="http://www.webdesignerwall.com/tutorials/how-to-css-large-background/" target="_blank" rel="external">如何处理CSS大背景</a> — 处理CSS大背景的教程。</li>
<li><a href="http://cameronmoll.com/articles/extensible-css/" target="_blank" rel="external">可扩张性强的CSS背景</a> — 关于创建高度自定义和自适应网站的教程。</li>
<li><a href="http://www.noupe.com/css/using-css-to-do-anything-50-creative-examples-and-tutorials.html" target="_blank" rel="external">用CSS做各种事情: 50多个富有创意的列子和教程</a> — 收藏了50多个创建独特CSS布局的教程。</li>
<li><a href="http://www.tutorial9.net/web-tutorials/quick-easy-css-development-with-firebug/" target="_blank" rel="external">用Firebug快速简单的开发CSS</a> — 一份关于使用Firebug提高网页设计的指南。</li>
<li><a href="http://www.3point7designs.com/blog/2008/06/02/10-examples-of-beautiful-css-typography-and-how-they-did-it/" target="_blank" rel="external">10漂亮的CSS排版例子</a> — 提供了很棒的CSS排版例子并且有教程指导如何创建。</li>
</ul>
<p><img src="http://p3.qhimg.com/t01d15cfb324d299a25.jpg" alt=""></p>
<ul>
<li><a href="http://speckyboy.com/2009/02/04/16-usable-css-graph-and-bar-chart-tutorials-and-techniques/" target="_blank" rel="external">16个可用的CSS图表和长条图教程与技巧</a> — 收藏了一系列关于创建基于CSS的数据可视化图表的教程。</li>
<li><a href="http://css-tricks.com/better-pull-quotes/" target="_blank" rel="external">更好地引用: 不要重复标记</a> — 指导你如何更好地引用，免除一些不必要的、重复的标记。</li>
<li><a href="http://www.webdesignerwall.com/tutorials/css-gradient-text-effect/" target="_blank" rel="external">CSS 渐变文本效果</a> — 一个为标题创建文本渐变的教程。</li>
<li><a href="http://www.1stwebdesigner.com/tutorials/43-psd-to-xhtml-css-tutorials-creating-web-layouts-and-navigation/" target="_blank" rel="external">43 个从 PSD 到 XHTML/CSS 的教程</a> — 列出了大量的教程，教你如何把 PSD 变为有效的 CSS/XHTML 文件。</li>
<li><a href="http://www.frankmanno.com/ideas/css-imagemap/" target="_blank" rel="external">CSS 图片地图</a> — 一个用 CSS 和 XHTML 创建图片地图的教程。</li>
<li><a href="http://www.alistapart.com/articles/fluidgrids" target="_blank" rel="external">流式栅格布局</a> — 一个关于创建流式栅格布局的教程。</li>
</ul>
<p><img src="http://p6.qhimg.com/t01bd347de7d3161fdf.jpg" alt=""></p>
<ul>
<li><a href="http://www.subcide.com/tutorials/debuggingcss/" target="_blank" rel="external">如何调试CSS</a> — 介绍了调试CSS的技巧。</li>
<li><a href="http://net.tutsplus.com/tutorials/html-css-techniques/10-challenging-but-awesome-css-techniques/" target="_blank" rel="external">10项有挑战性但了不起的CSS技能</a> — 指导你掌握一些值得学习的高级CSS技能.</li>
<li><a href="http://www.hongkiat.com/blog/50-nice-clean-css-tab-based-navigation-scripts/" target="_blank" rel="external">50多个漂亮整洁的CSS Tab 导航</a> — 搜集了大量用CSS制作的tab导航。</li>
<li><a href="http://sixrevisions.com/css/30_css_techniques_examples/" target="_blank" rel="external">30个无与伦比的CSS技巧和示例</a> — 收藏了大量真正酷炫的CSS效果，包括 <code>hoverbox</code> 图片画廊、固定页脚和纯CSS实现的手风琴效果等等。</li>
</ul>
<p><img src="http://p0.qhimg.com/t01a334611692d1c9ba.jpg" alt=""></p>
<ul>
<li><a href="http://www.noupe.com/css/101-css-techniques-of-all-time-part-1.html" target="_blank" rel="external">101个CSS技巧</a> — <a href="http://www.noupe.com/css/101-css-techniques-of-all-time-part2.html" target="_blank" rel="external">Part 2</a> — 又一批很好的CSS技巧及其相应的教程。</li>
<li><a href="http://www.wpdfd.com/editorial/thebox/deadcentre4.html" target="_blank" rel="external">固定中心</a> — 一个简短的教程，教你如何在窗口正中心（垂直与水平）定位某些元素。</li>
<li><a href="http://www.maxdesign.com.au/presentation/liquid/" target="_blank" rel="external">流式布局，一种简短的方式</a> — 创建CSS流式布局的完整教程。</li>
</ul>
<h3 id="模板与框架"><a href="#模板与框架" class="headerlink" title="模板与框架"></a>模板与框架</h3><ul>
<li><a href="http://www.1kbgrid.com/" target="_blank" rel="external">1Kb大的CSS栅格</a> — 这也许是最简单最紧凑的栅格系统了，但包含了自定义栅格的工具。</li>
</ul>
<p><img src="http://p8.qhimg.com/t010d875a3303740e7e.jpg" alt=""></p>
<ul>
<li><a href="http://www.csszengarden.com/" target="_blank" rel="external">CSS Zen Garden</a> — CSS Zen Garden 是一个 HTML 和 CSS 框架，用于展示大量能用CSS创建的设计。除了框架之外，还有大量可用的模板和主题。</li>
<li><a href="http://matthewjamestaylor.com/blog/perfect-multi-column-liquid-layouts" target="_blank" rel="external">完美的多栏CSS流式布局</a> — 收集了兼容iPhone的流式布局。</li>
<li><a href="http://960.gs/" target="_blank" rel="external">960栅格系统</a> — 一个基于960像素宽构建的CSS栅格布局。</li>
</ul>
<p><img src="http://p9.qhimg.com/t014327d7190bcfb74b.jpg" alt=""></p>
<ul>
<li><a href="http://www.free-css-templates.com/" target="_blank" rel="external">免费CSS模板</a> — 该网站提供了200多个CSS模板，都遵循知识共享署名许可协议。</li>
</ul>
<p><img src="http://p1.qhimg.com/t01ed6e4df28d7ec975.jpg" alt=""></p>
<ul>
<li><a href="http://www.mycelly.com/" target="_blank" rel="external">漂亮免费的CSS模板</a> — 几十个模板让你着手CSS设计，包括动态居中盒子、4栏不定宽布局、宽度固定的盒子上下左右完全居中等。</li>
<li><a href="http://www.thenoodleincident.com/tutorials/box_lesson/boxes.html" target="_blank" rel="external">小型盒子</a> — 收藏了各种布局的CSS文件。</li>
</ul>
<p><img src="http://p6.qhimg.com/t01947dd7d3130e9ff8.jpg" alt=""></p>
<ul>
<li><a href="http://net.tutsplus.com/tutorials/html-css-techniques/prototyping-with-the-grid-960-css-framework/" target="_blank" rel="external">960px宽的CSS栅格系统设计</a> — 使用栅格创建960px宽的网页模型。</li>
<li><a href="http://net.tutsplus.com/tutorials/html-css-techniques/prototype-a-magazine-style-home-page-template-with-the-blueprint-css-framework/" target="_blank" rel="external">用CSS框架设计一个杂志类首页模板</a> — 一份创建杂志和栅格布局的有效指南。</li>
</ul>
<p><img src="http://p6.qhimg.com/t01edd53e432487de42.jpg" alt=""></p>
<h3 id="画廊与陈列"><a href="#画廊与陈列" class="headerlink" title="画廊与陈列"></a>画廊与陈列</h3><ul>
<li><a href="http://www.cssstars.com/" target="_blank" rel="external">CSS Stars</a> — 画廊提供了一些基于CSS的设计，让你熟读掌握。</li>
</ul>
<p><img src="http://p9.qhimg.com/t0146c3213d7514fbb7.jpg" alt=""></p>
<ul>
<li><a href="http://cssbased.com/" target="_blank" rel="external">CSS Based</a> — 上千个不同设计的CSS画廊。</li>
<li><a href="http://www.cssdrive.com/index.php" target="_blank" rel="external">CSS Drive</a> — 一个分类的CSS画廊。</li>
<li><a href="http://cssmania.com/" target="_blank" rel="external">CSS Mania</a> — 一个已经有5年历史的CSS画廊。</li>
<li><a href="http://www.csselite.com/" target="_blank" rel="external">CSSelite.com</a> — 一个分类的CSS画廊。</li>
<li><a href="http://csscreme.com/" target="_blank" rel="external">CSS Creme</a> — 大量可以根据颜色、分类或者设计师划分的画廊，也包括相关的教程和信息。</li>
<li><a href="http://www.css-website.com/" target="_blank" rel="external">csswebsite</a> — 一个可以通过类型、日期或者颜色帅选的画廊。</li>
<li><a href="http://www.toxel.com/design/2008/12/07/40-beautiful-dark-css-website-designs/" target="_blank" rel="external">40 漂亮的深色CSS网页设计</a> — 该画廊提供了一些漂亮的深颜色网页设计。</li>
<li><a href="http://www.webdesignerwall.com/trends/best-of-css-design-2008/" target="_blank" rel="external">2008年最好的CSS设计</a> — 又一个画廊展示了2008年最好的CSS设计。</li>
<li><a href="http://www.cssbeauty.com/gallery/" target="_blank" rel="external">CSS美丽画廊</a> — 该CSS画廊的条目是从2004年至今的，按年代顺序排列。</li>
</ul>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul>
<li><a href="http://getfirebug.com/" target="_blank" rel="external">Firebug</a> — 火狐浏览器的一个插件，你可以在该调试器里面看到你的CSS代码，并且可以在里面编辑。</li>
</ul>
<p><img src="http://p0.qhimg.com/t01a5cbac42892e76c6.jpg" alt=""></p>
<ul>
<li><a href="http://karmatics.com/aardvark/" target="_blank" rel="external">Aardvark</a> — 火狐浏览器的扩展，可以看到每段HTML及它的类或者id。</li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/2104" target="_blank" rel="external">CSSViewer 1.0.3</a> — 也是火狐浏览器的扩展工具，你可以看到任何页面的CSS属性。</li>
<li><a href="http://www.puidokas.com/portfolio/gridfox/" target="_blank" rel="external">GridFox</a> — 火狐浏览器的另一个扩展，通过在任何网页覆盖一层栅格来辅助栅格设计。</li>
<li><a href="http://tools.sitepoint.com/codeburner/" target="_blank" rel="external">CodeBurner</a> — 开发的一款插件，可以在浏览器中看到HTML和CSS的参考资料。</li>
</ul>
<p><img src="http://p0.qhimg.com/t016e02f332a52fed3e.jpg" alt=""></p>
<ul>
<li><a href="http://www.izzymenu.com/" target="_blank" rel="external">IzzyMenu</a> — 一个免费的CSS菜单创建器，支持创建下拉二级菜单。</li>
<li><a href="http://tools.sitepoint.com/spanky/index.php" target="_blank" rel="external">Spanky Corners</a> — 一个圆角盒子生成器。</li>
<li><a href="http://www.cleancss.com/" target="_blank" rel="external">CleanCSS</a> — 一款CSS美化工具。</li>
<li><a href="http://rafael.adm.br/css_browser_selector/" target="_blank" rel="external">CSS浏览器选择器</a> — A useful tool for empowering CSS selectors based on the visitor’s browser.一款有用的工具，可以基于访问者的浏览器来使用CSS选择器。</li>
<li><a href="http://iceyboard.no-ip.org/projects/css_compressor" target="_blank" rel="external">CSS 压缩器</a> — 一款CSS文件压缩器。</li>
<li><a href="http://csscreator.com/?q=tools/layout" target="_blank" rel="external">CSS 布局生成器</a> — 一个简单、在线的CSS生成器，可以创建一个基础的布局框架。</li>
<li><a href="http://csstidy.sourceforge.net/" target="_blank" rel="external">CSSTidy</a> — 一款开源的、可供下载的CSS分析器和优化器。</li>
</ul>
<p><img src="http://p0.qhimg.com/t01dfcfd2bc14103b56.jpg" alt=""></p>
<ul>
<li><a href="http://www.cssdrive.com/index.php/main/csscompressor/" target="_blank" rel="external">CSS驱动CSS压缩器</a> — 一款CSS压缩工具，根据你的需求，可以有基础和高级的压缩模式。</li>
<li><a href="http://tools.arantius.com/tabifier" target="_blank" rel="external">Tabifier</a> — 缩进你的代码。</li>
<li><a href="http://www.cssfly.net/" target="_blank" rel="external">CSSFly</a> — 基于浏览器的CSS和XHTML编辑器，可以实时编辑。</li>
</ul>
<p><img src="http://p5.qhimg.com/t01fe55b1406a7935f7.jpg" alt=""></p>
<ul>
<li><a href="http://www.accessify.com/tools-and-wizards/developer-tools/list-o-matic/" target="_blank" rel="external">List-O-Matic</a> — 一款可以创建基于列表的导航菜单。</li>
<li><a href="http://www.accessify.com/tools-and-wizards/developer-tools/markup-maker/" target="_blank" rel="external">Markup Maker</a> — 根据你输入的页面ID来创建一个有效的XHTML/HTML框架。</li>
<li><a href="http://cssmate.com/csseditor.htm" target="_blank" rel="external">CSSMate</a> — 一款在线CSS编辑器。</li>
<li><a href="http://www.csstypeset.com/" target="_blank" rel="external">CSS Type Set</a> — 一个CSS排版生成器。</li>
</ul>
<p><img src="http://p8.qhimg.com/t01328a44645b2d009b.jpg" alt=""></p>
<ul>
<li><a href="http://www.constructyourcss.com/" target="_blank" rel="external">Construct 0.5</a> — 一款可视的，可以基于蓝图框架创建的布局工具。</li>
</ul>
<p><img src="http://p5.qhimg.com/t01fd793b527d8b3617.jpg" alt=""></p>
<ul>
<li><a href="http://pxtoem.com/" target="_blank" rel="external">PXtoEM.com</a> — 一个把px转换成em的转换工具。</li>
<li><a href="http://www.smashingmagazine.com/2008/06/19/css-editors-reviewed/" target="_blank" rel="external">CSS编辑器回顾</a> — 收藏了一些流行的CSS编辑器。</li>
<li><a href="http://builder.yaml.de/" target="_blank" rel="external">YAML构建器</a> —  一个创建YAML布局的可视工具。</li>
<li><a href="http://gridinator.com/" target="_blank" rel="external">布局构造器</a> — 一个CSS布局构建器。</li>
<li><a href="http://www.smashingmagazine.com/2006/09/02/list-of-css-tools/" target="_blank" rel="external">CSS工具列表</a> — 列出了大量的CSS工具，从字体到优化。</li>
<li><a href="http://www.smashingmagazine.com/2008/12/09/50-really-useful-css-tools/" target="_blank" rel="external">50个非常有用的CSS工具</a> — 列出了一些非常棒的CSS工具。</li>
</ul>
<h3 id="特殊的CSS博客和网站"><a href="#特殊的CSS博客和网站" class="headerlink" title="特殊的CSS博客和网站"></a>特殊的CSS博客和网站</h3><ul>
<li><a href="http://css-tricks.com/" target="_blank" rel="external">CSS技巧</a> — 来自Chris Coyier的博客。</li>
<li><a href="http://www.artypapers.com/csshelppile/" target="_blank" rel="external">CSS Help Pile</a> — 不断收集CSS相关的教程和资源。</li>
</ul>
<p><img src="http://p3.qhimg.com/t0103b3af5fc4019550.jpg" alt=""></p>
<p>祝你愉快！</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@grace_wang" target="_blank" rel="external">旭日云中竹</a><br>链接：<a href="http://www.zcfy.cc/article/1057" target="_blank" rel="external">http://www.zcfy.cc/article/1057</a><br>原文：<a href="https://medium.com/@bradley_nice/148-resources-to-help-you-become-a-css-expert-ced300b173e7" target="_blank" rel="external">https://medium.com/@bradley_nice/148-resources-to-help-you-become-a-css-expert-ced300b173e7</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[运动曲线提升CSS动画效果]]></title>
      <url>http://jsgrblog.win/2016/12/10/%E8%BF%90%E5%8A%A8%E6%9B%B2%E7%BA%BF%E6%8F%90%E5%8D%87CSS%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<p>先有UI动画，然后才会有好的UI动画。好的动画会让人惊叹“哇哦！”——因为页面看上去很流畅、很漂亮，最重要的是，自然，一点都不会让人觉得不和谐或者僵硬死板。如果你经常逛Dribbble或者 <a href="http://www.uplabs.com" target="_blank" rel="external">UpLabs</a>这类网站的话，你就会明白我在说什么了。</p>
<a id="more"></a>
<h3 id="一些极好的拓展阅读资源"><a href="#一些极好的拓展阅读资源" class="headerlink" title="一些极好的拓展阅读资源:"></a>一些极好的拓展阅读资源:</h3><ul>
<li><p><a href="https://www.smashingmagazine.com/2015/12/animating-clipped-elements-svg/" target="_blank" rel="external">SVG和CSS的路径剪辑动画</a></p>
</li>
<li><p><a href="https://www.smashingmagazine.com/2015/06/practical-techniques-on-designing-animation/" target="_blank" rel="external">若干实用的动画技术</a></p>
</li>
<li><p><a href="https://www.smashingmagazine.com/2015/09/creating-cel-animations-with-svg/" target="_blank" rel="external">使用SVG手绘动画</a></p>
</li>
<li><p><a href="https://www.smashingmagazine.com/2014/11/the-state-of-animation-2014/" target="_blank" rel="external">新的网页动画API</a></p>
</li>
</ul>
<p>既然有这么多天才设计师创造了如此漂亮的动画，自然是任何开发者都会想要在自己的项目中引进这些效果。如今，CSS为<a href="https://developer.mozilla.org/en/docs/Web/CSS/transition-timing-function" target="_blank" rel="external"><code>transition-timing-function</code></a>提供了一些预置变量，比如<code>ease-in</code>, <code>ease-out</code> 和 <code>ease-in-out</code>, 它们将页面的平滑感和真实感提升了一个档次，但是，你不觉得这个方法太大众化了吗？试想如果页面上的每个动画都用了这3个相同的时间变量，那该是有多乏味啊。</p>
<p>(引自: <a href="https://dribbble.com/LukasStranak" target="_blank" rel="external">Lukáš Straňák</a>)</p>
<p> <code>transition-timing-function</code>有一个变形是<code>cubic-bezier(n1, n2, n3, n4)</code>, 你可以传进4个参数来创建自己独一无二的时间函数。在这篇文章的最后，你将会看到这4个参数各自代表什么——但是，相信我，要找到四个数字来捕获你想象中的转变并不是一件容易事儿。 幸亏有<a href="http://cubic-bezier.com" target="_blank" rel="external"><code>cubic-bezier</code></a>和<a href="https://matthewlein.com/ceaser/" target="_blank" rel="external"><code>Ceasar</code></a>, 你不必非得自己来完成。这些工具将运动曲线引入到了网页中。</p>
<p>(引自: <a href="https://dribbble.com/m-2-h" target="_blank" rel="external">m-2-h</a>)</p>
<p>运动曲线最早是被动画师们用来创造先进、逼真的动画(比如 <a href="http://www.adobe.com/products/aftereffects.html" target="_blank" rel="external">Adobe After Effects</a>)。通过<code>cubic-bezier</code> 和Ceasar, 你可以很容易地操纵曲线的形状，另外 (<code>n1, n2, n3, n4</code>) 这4个数字也会为你填好，这绝对超赞! 尽管如此，如果使用时想要最大化运动曲线的功能，你则需要了解它们的工作原理，这就是我们接下来在这篇文章中要讲到的。现在我们开始吧。</p>
<h3 id="理解运动曲线"><a href="#理解运动曲线" class="headerlink" title="理解运动曲线"></a>理解运动曲线</h3><p>运动曲线其实只是连接 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties" target="_blank" rel="external">动画属性</a> 和时间的一个点。一条运动曲线展示了一个动画运动的速度是如何受时间的影响并随之变化的。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig26_large-opt.png" target="_blank" rel="external"><img src="http://p7.qhimg.com/t0198f1985b49e43d5d.png" alt="运动曲线是连接动画属性和时间的一个点。"></a></p>
<p>运动曲线是连接动画属性和时间的一个点。 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig26_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>让我们拿 <a href="https://css-tricks.com/almanac/properties/t/transform/#article-header-id-3" target="_blank" rel="external">distance (<code>translateX</code>)</a> 作为动画属性举例。(这个解释同样适用于其他的任何一个动画属性。)</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig27_large-opt.png" target="_blank" rel="external"><img src="http://p1.qhimg.com/t012147368daf259496.png" alt="在一张距离－时间图上计算t1时刻的速度。"></a></p>
<p>在一张距离－时间图上计算t1时刻的速度。(<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig27_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>如果你有一定的物理学和初级微积分学的基础，你就会知道从一张距离－时间表上算出速度是非常容易的。表中的<strong>单位时间内走过的距离</strong>除以<strong>单位时间</strong>得到的某时刻的导数，就是速度。 也就是说，距离－时间曲线上的物体在曲线陡峭的地方有更快的运动速度，而在曲线平缓的地方，速度则比较慢。如果你知道它的原理，那太棒了！说明你已经做好了充足的准备，可以跳过下面这节。</p>
<p>如今，我意识到设计和开发是完全不同的领域，毕竟不是每个人都有相同的背景。 也许上面那段话你完全听不懂，也用不着灰心丧气，因为我接下来会慢慢解释的。</p>
<p>看到下面的红盒了吗？请允许我童心未泯地将之称为“Boxy”；这样提及它时会更方便一些。好了，我们可以看到Boxy正在以线性的方式从屏幕的一边移动到另一边，接下来我们来分析一下它的运动。</p>
<p><code>transition-timing-function</code> 的一个预置参数是<code>linear</code>。为了让Boxy动起来，我们要做的就是添加下面的这个方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> .moveForward &#123;</div><div class="line">  transform: translateX(1000px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了控制动画效果，我们会为Boxy设<code>transition</code>属性，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#boxy &#123;</div><div class="line">  width: 200px;</div><div class="line">  height: 200px;</div><div class="line">  background: red;</div><div class="line">  transition-property: transform; </div><div class="line">  transition-duration: 1s; </div><div class="line">  transition-timing-function: linear; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>想要将<code>transition</code>解释清楚是一件很麻烦的事情，实际上，你将会发现<code>transition</code>都是用速记形式写的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#boxy &#123;</div><div class="line">  width: 200px;</div><div class="line">  height: 200px;</div><div class="line">  background: red;</div><div class="line">  transition: transform 1s linear;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看它动起来的效果。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/TNndMJe.gif" target="_blank" rel="external"><img src="http://p8.qhimg.com/t01e59111828ca82798.gif" alt="Boxy 做直线运动。"></a></p>
<p>红盒在做直线运动。</p>
<p>它看上去很像一个机器人，不是吗？当然你可以说它之所以看上去很机械，完全是因为它做的是直线运动，这听起来好像很合理。但是你又要如何解释导致这一现象的原因呢？我们可以看到直线运动使得物品的移动显得很机械，但是隐藏在屏幕后面的工作原理又是什么呢？所以，我们的当务之急就是搞清楚为什么这样的移动会让人觉得很机械、不和谐又不自然。</p>
<p>让我们将Boxy的移动用坐标轴来展现，看看是否能得到一些有用的信息。坐标轴有两根轴线，纵轴表示距离，横轴表示时间。Boxy在1秒钟内走过了1000像素的距离。 我们接下来会用到一些数学知识，不过不用担心，因为都很简单。</p>
<p>这就是我们建的非常简易的图表，上面有两根坐标轴， 正如我刚刚提到的那样。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig1_large-opt.png" target="_blank" rel="external"><img src="http://p5.qhimg.com/t01c6e2853a8edca4fb.png" alt="只有坐标轴的空表"></a></p>
<p>只有坐标轴的空表 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig1_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>现在，它是空的，让我们填进去一些数据。</p>
<p>首先，我们可以看到在初始时刻（也就是0秒时），动画还没有开始，Boxy处在它的初始位置（也就是0像素的位置）。1秒钟过后，Boxy一共运动了1000像素，停在了初始位置的对面。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig2_large-opt.png" target="_blank" rel="external"><img src="http://p1.qhimg.com/t0165a65b34ba906b01.png" alt="Boxy的起点和终点位置"></a></p>
<p>Boxy的起点和终点位置。 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig2_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>让我们在图中标出数据。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig3_large-opt.png" target="_blank" rel="external"><img src="http://p2.qhimg.com/t01235d7dd83ccf8b53.png" alt="标有Boxy起点和终点位置的图表"></a></p>
<p>标有Boxy起点和终点位置的图表 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig3_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>到现在为止一切都很顺利。但是只有两个点的数据远远不够——我们需要更多。接下来的数据记录了Boxy在不同时间点的所处位置（这一切都多亏了我的高速摄像机）。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig4_large-opt.png" target="_blank" rel="external"><img src="http://p3.qhimg.com/t01d64520c0d8b9dba7.png" alt="不同时间点Boxy所处的位置"></a></p>
<p>不同时间点Boxy所处的位置 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig4_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>我们将这些数据添加到坐标轴中。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig5_large-opt.png" target="_blank" rel="external"><img src="http://p2.qhimg.com/t013a6e88ee6a11857f.png" alt="标有不同位置的坐标轴。"></a></p>
<p>标有不同位置的坐标轴。 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig5_large-opt.png" target="_blank" rel="external">View large version</a>)</p>
<p>当然，你也可以搜集更多不同时刻的点（比如0.375s、0.6s等等），但是我们现在有的已经足够来建成这张表了。标注了上面的所有点后，我们的表就建成啦。来，击个掌！</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig6_large-opt.png" target="_blank" rel="external"><img src="http://p4.qhimg.com/t01ba54f1b734954250.png" alt="最终版本的坐标轴"></a></p>
<p>坐标轴最终版本 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig6_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>酷！但是我们能从这得到什么呢？我们要时刻记住，实验的目的是弄明白为什么Boxy的线性运动看上去会不自然并且很机械。很显然，我们建好的这张表还不能告诉我们这是为什么。我们需要更深入地探索。</p>
<p>让我们记住这张表，然后花1分钟时间来讨论一下速度。我相信你应该了解速度的概念——我指的就是数学术语上的速度。它的计算方法如下所示：</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig7_large-opt.png" target="_blank" rel="external"><img src="http://p3.qhimg.com/t01b54717a25957ef45.png" alt="计算速度的数学公式"></a></p>
<p>计算速度的数学公式 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig7_large-opt.png" target="_blank" rel="external">View large version</a>)</p>
<p>因此，如果一辆卡车在1小时内行驶100公里，我们就说它的速度是100km／h。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig8_large-opt.png" target="_blank" rel="external"><img src="http://p0.qhimg.com/t01128b6bfb975a19d3.png" alt="速度的计算"></a></p>
<p>速度的计算 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig8_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>如果这辆卡车将速度加倍，他就会在相同的时间间隔1小时内行驶双倍的距离（也就是200公里），换句话说，要行驶100公里，它现在只需要刚才的一半时间（也就是半个小时）。能理解我的意思吗？</p>
<p>类似的，如果这辆卡车将它的速度减半，它将在相同的时间段1小时内走过50公里，也就是说，要行驶100公里，它将需要双倍时间（也就是2个小时）。</p>
<p>好！让我们回到之前的思路上，我们目前是在尝试弄清楚这张距离－时间表是如何帮助我们找到Boxy的线性运动看上去很僵硬的原因。</p>
<p>嘿，等一下！我们有一张距离－时间表，并且速度可以通过路程和时间求得，不是吗？接下来我们就尝试计算Boxy不同单位时间内的速度。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig9_large-opt.png" target="_blank" rel="external"><img src="http://p0.qhimg.com/t011b0845a4fe631ea1.png" alt="计算不同单位时间段的速度"></a></p>
<p>计算不同单位时间段的速度。 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig9_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>在这里，我挑选了3个不同的时间段：一段靠近起点，一段在中间位置，还有一段是接近终点的位置。很明显，在这三个时间段内，Boxy速度相同（它运动的路程s1=s2=s3），即1000px／s。由此可见，不管你在上表中选择的是哪个时间段，你会发现Boxy都是以1000px／s的速度移动的。是不是很意外？现实生活中，没有物体能够一直以一个恒定的速度运动；它们起步时速度都比较慢，然后会逐渐增加速度，运动一段时间后，又会在停下来之前减速，但Boxy却是以1000px／s的速度突然起步，接着做匀速运动，并且恰恰是以相同的速度突然停止。这就是为什么Boxy的移动看上去很机械且不自然，接着我们必须重新绘制我们的坐标系来体现这一点。但是在深入研究之前，我们需要了解速度的改变是如何改变距离－时间表的。准备好了吗？接下来的探索将会很有趣。</p>
<p>我们将Boxy的速度提升一倍，来看看坐标图相应地会如何变化。Boxy的初始速度，还是如我们上面计算的那样是1000px／s。因为我们将它的速度变为了两倍，Boxy只需一半时间——也就是0.5秒，就可以走完全程。让我们在坐标图中画出来。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig10_large-opt.png" target="_blank" rel="external"><img src="http://p3.qhimg.com/t016a3c8cd96966370b.png" alt="两倍速度时的坐标图"></a></p>
<p>两倍速度时的坐标图 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig10_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>如果我们将它的速度增加至3倍呢？Boxy只需要三分之一的时间就可以走完全程（也就是1/3秒）。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig11_large-opt.png" target="_blank" rel="external"><img src="http://p3.qhimg.com/t0136e8b23dbeaa5f38.png" alt="三倍速度时的坐标图"></a></p>
<p>三倍速度时的坐标图 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig11_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>嗯，看出什么了吗？我们可以看到，随着速度的增长，坐标图发生变化，这条直线与时间横轴间的夹角也在不断增加。</p>
<p>那好，我们继续将Boxy的速度减半。将它的速度减半意味着Boxy只能在1秒钟内走过500像素（也就是刚刚距离的一半）。然后让我们在坐标图中画出来。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig12_large-opt.png" target="_blank" rel="external"><img src="http://p6.qhimg.com/t0158a16075eacf4bb0.png" alt="一半速度时的坐标图"></a></p>
<p>一半速度时的坐标图 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig12_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>我们将Boxy的速度再放慢一些，让它以原本速度的三分之一运动。这样的话，1秒钟内Boxy就只能走过一开始走过路程的三分之一。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig13_large-opt.png" target="_blank" rel="external"><img src="http://p7.qhimg.com/t01accc2bf891f52d73.png" alt="三分之一速度时的坐标图"></a></p>
<p>三分之一速度时的坐标图 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig13_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>看出规律了吗？我们增加Boxy的速度时，线条越来越陡峭；而减慢Boxy的速度时，线条又变得平滑。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig14_large-opt.png" target="_blank" rel="external"><img src="http://p9.qhimg.com/t0169af68ecb7a6d71b.png" alt="速度增加时直线变陡，减慢时直线变得平缓"></a></p>
<p>速度增加时直线变陡，减慢时直线变得平缓。 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig14_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>这个结论很重要，因为对一条很陡的直线而言，也就是速度更快时，一小段时间内Boxy走过的路程会变化很多。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig15_large-opt.png" target="_blank" rel="external"><img src="http://p2.qhimg.com/t01c21cc078bd03d502.png" alt="对线段更陡的表而言，小段时间相应会在距离上有很大的改变。"></a></p>
<p>对线段更陡的表而言，小段时间相应会在距离上有很大的改变。 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig15_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig16_large-opt.png" target="_blank" rel="external"><img src="http://p0.qhimg.com/t015f17780bd1ef0798.png" alt="对线段更陡的表而言，小段时间相应会在距离上有很大的改变。"></a></p>
<p>对线段更陡的表而言，小段时间相应会在距离上有很大的改变。(<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig16_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>另一方面，对于坡度不那么大的直线，就算过去很长时间，距离上也只会变化一点点，这是运动速度比较慢的情况。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig17_large-opt.png" target="_blank" rel="external"><img src="http://p8.qhimg.com/t01699e55ca96ec49db.png" alt="坡度比较平缓时坐标图中时间和距离的变化关系"></a></p>
<p>坡度比较平缓时坐标图中时间和距离的变化关系 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig17_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig18_large-opt.png" target="_blank" rel="external"><img src="http://p8.qhimg.com/t011b56611c1e410553.png" alt="坡度比较平缓时，坐标图中时间和距离的变化关系"></a></p>
<p>坡度比较平缓时，坐标图中时间和距离的变化关系 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig18_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>以上我们所做的只是改变了Boxy的运动速度，它仍然是在做直线运动。但是，我们以新的方式弄清楚了距离和时间是如何改变速度的，接下来就可以绘制一张表来让Boxy以一种自然、真实的方式运动。</p>
<p>让我们一步一个脚印。首先，现实生活中的物体都是慢慢开始运动，并且逐渐增加运动速度的。所以，我们来模拟这一过程。</p>
<p>仔细观察下图，你会发现起点和终点位置没有变。因为我们不想改变动画的持续时间，也不想改变Boxy的运动距离。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig19_large-opt.png" target="_blank" rel="external"><img src="http://p1.qhimg.com/t0166f30888eb0272a0.png" alt="私人定制的运动曲线"></a></p>
<p>私人定制的运动曲线 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig19_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>Boxy如果照着上面的这张图运动，前0.25秒它的速度会比较慢，因为0秒到0.25秒之间这条线比较平缓，接着它会突然增速（因为0.25秒之后线段突然变陡）。 但是我们需要将这一转变变得平滑，因为我们不想要任何转角——毕竟，这是一条运动曲线。接下来就将这个急转弯换成一条曲线。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig20_large-opt.png" target="_blank" rel="external"><img src="http://p8.qhimg.com/t017802f475cf1c2e4a.png" alt="私人定制的运动曲线"></a></p>
<p>私人定制的运动曲线 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig20_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>留心Boxy从静止状态到逐渐增速过程中平滑的转变。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/xs6l6oW.gif" target="_blank" rel="external"><img src="http://p9.qhimg.com/t0139848eccb1cfdb8f.gif" alt="按照上面那条运动曲线运动的Boxy"></a></p>
<p>按照上面那条运动曲线运动的Boxy (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/xs6l6oW.gif" target="_blank" rel="external">点开看大图</a>)</p>
<p>很好！实际生活中，运动的物体停下来之前速度也是逐渐减慢的。让我们修改坐标图来适应这一变化。类似的，我们会在想要Boxy慢下来的地方增加一个点。就加在0.6秒处怎么样？我已经将这个转折点换成曲线了。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig21_large-opt.png" target="_blank" rel="external"><img src="http://p9.qhimg.com/t01e62c7869c74bf660.png" alt="运动曲线终极版"></a></p>
<p>运动曲线终极版 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig21_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>看Boxy动起来! 现在看上去自然了很多，不是吗?</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/iI5mrff.gif" target="_blank" rel="external"><img src="http://p1.qhimg.com/t01171f1e6f34c6398b.gif" alt="按照终极版运动曲线运动的Boxy"></a></p>
<p>按照终极版运动曲线运动的Boxy (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/iI5mrff.gif" target="_blank" rel="external">点开看大图</a>)</p>
<p>我们用来代替转角的曲线实际上是由很多短线段组成的；并且正如你已经知道的，表中的线段越陡峭，Boxy的运动速度就越快，线段越平缓，Boxy的速度就越慢。看坐标图的左边部分，会发现组成曲线的小线段坡度越来越大，导致速度逐渐增加；相应地，右边部分的线段越来越平缓，所以速度才会越来越慢。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig22_large-opt.png" target="_blank" rel="external"><img src="http://p8.qhimg.com/t01a801b1c9bf2bdaa0.png" alt="一条曲线只是由很多的短线段组成的。"></a></p>
<p>一条曲线只是很多的短线段的集合 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig22_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>就以上我们所知道的，想要弄清楚运动曲线容易了很多。接下来我们来看一些例子。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig23_large-opt.png" target="_blank" rel="external"><img src="http://p5.qhimg.com/t01ad551b479d334a67.png" alt=""></a></p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig23_large-opt.png" target="_blank" rel="external">(点开看大图)</a></p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/Ij44EBG.gif" target="_blank" rel="external"><img src="http://p9.qhimg.com/t010a833a5c28ad96f4.gif" alt="例 1"></a></p>
<p>例 1 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/Ij44EBG.gif" target="_blank" rel="external">点开看大图</a>)</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig24_large-opt.png" target="_blank" rel="external"><img src="http://p2.qhimg.com/t01a666f25b484eeeb3.png" alt=""></a></p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig24_large-opt.png" target="_blank" rel="external">(点开看大图)</a></p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/F4Ve4Xl.gif" target="_blank" rel="external"><img src="http://p1.qhimg.com/t013f39a117a808117a.gif" alt="例 2"></a></p>
<p>例 2 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/F4Ve4Xl.gif" target="_blank" rel="external">点开看大图</a>)</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig25_large-opt.png" target="_blank" rel="external"><img src="http://p1.qhimg.com/t01eb41932ccada2483.png" alt=""></a></p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig25_large-opt.png" target="_blank" rel="external">(点开看大图)</a></p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/a0YYL8I.gif" target="_blank" rel="external"><img src="http://p9.qhimg.com/t0139848eccb1cfdb8f.gif" alt="例 3"></a></p>
<p>例 3 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/a0YYL8I.gif" target="_blank" rel="external">点开看大图</a>)</p>
<h3 id="在UI动画中使用运动曲线"><a href="#在UI动画中使用运动曲线" class="headerlink" title="在UI动画中使用运动曲线"></a>在UI动画中使用运动曲线</h3><p>接下来你需要让一个UI元素动起来，可以将运动曲线为你所用。无论是一个滑杆儿、一个窗口模型，还是一个下拉菜单，增加适量的动画效果让它们看上去平滑自然可以大幅度提高你的用户界面质量。它会让用户对你的界面感觉良好。拿下面的滑出式菜单举个例子：</p>
<p>这是 Nash Vail (<a href="http://codepen.io/nashvail" target="_blank" rel="external">@nashvail</a>)在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上创建的Pen <a href="http://codepen.io/nashvail/pen/qNYmLG/" target="_blank" rel="external">nJial</a>。</p>
<p>点击菜单栏会从左边跳出菜单，但是这个出现的动作显得很生硬。CSS表的第51行将这个动画的<code>transition-timing-function</code> 设置为<code>linear</code>。这个动画效果显然可以优化。让我们使用<a href="http://cubic-bezier.com" target="_blank" rel="external">cubic-bezier</a> 来创建一个私人定制的定时功能。</p>
<p>如果你读到了这里，我猜你一定是个设计师或者开发人员，又或者两者兼是，因此，你对三次贝塞尔曲线一定不会感到陌生，很有可能至少遇到过1次。贝塞尔曲线的创造就是一个奇迹。  它们一开始是被用于计算机图形学来绘制形状，并且被用在<a href="https://www.sketchapp.com/" target="_blank" rel="external">Sketch</a>和<a href="http://www.adobe.com/in/products/illustrator.html" target="_blank" rel="external">Adobe Illustrator</a>这类工具中来绘制矢量图形。三次Bezier曲线使用如此广泛的原因是它们用起来非常方便：我们只需要改变4个不同点的位置，然后创造我们需要的曲线。</p>
<p>我们一般都会知道动画中物体的起点和终点位置，所以可以轻易锁定这两个点。然后就只要找到我们需要改变速度的两点位置。前两个固定的点被称为锚点，剩下的两个又叫控制点。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig28_large-opt.png" target="_blank" rel="external"><img src="http://p8.qhimg.com/t019c04674d1c9e6e94.png" alt="截取的贝塞尔曲线的一部分"></a></p>
<p>截取的贝塞尔曲线的一部分。 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig28_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>正如你所知，<code>cubic-bezier</code> 需要四个参数(<code>n1, n2, n3, n4</code>)来定制 <code>transition-timing-function</code>。这四个参数代表的是两个控制点的位置： <code>n1, n2</code>表示第一个控制点的x、y坐标点，<code>n3, n4</code>则表示第二个控制点的x、y坐标点。改变控制点的位置会使曲线的形状发生变化，<code>n1, n2, n3, n4</code> 全部或部分改变时我们的动画效果也会不一样。 举个例子，下面是传入参数为<code>cubic-bezier(.14, .78, .89, .35)</code>时的结果:</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig29_large-opt.png" target="_blank" rel="external"><img src="http://p0.qhimg.com/t018530bdbc9dd415d1.png" alt="传入参数为`(.14, .78, .89, .35)` 的三次方贝塞尔曲线。"></a></p>
<p>传入参数为<code>(.14, .78, .89, .35)</code> 的三次方贝塞尔曲线。(<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/css-animations-motion-curves-fig29_large-opt.png" target="_blank" rel="external">点开看大图</a>)</p>
<p>这些<a href="https://medium.freecodecamp.com/nerding-out-with-bezier-curves-6e3c0bc48e2f#.113c4usq9" target="_blank" rel="external">隐藏在看似简单的曲线背后的数学知识</a>着实令人着迷。</p>
<p>好了，好了，让我们回想一下初衷：我们想借助<a href="http://cubic-bezier.com" target="_blank" rel="external">三次方贝塞尔曲线</a>来定制<code>过渡时间功能的函数</code>。我们需要的是能够快速滑出，然后速度逐渐慢下来，最后停止的菜单：</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/bezierDemo.gif" target="_blank" rel="external"></a></p>
<p>调整后的三次贝塞尔曲线。 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/08/bezierDemo.gif" target="_blank" rel="external">点开看大图</a>)</p>
<p>看上去很不错。这个动画会开始很快然后逐渐慢下来，而不是全程都以一个恒定的速度移动。我只是简单地从上文中复制<code>cubic-bezier(.05, .69, .14, 1)</code> 然后拿它替换了<code>linear</code>。</p>
<p>这是Nash Vail (<a href="http://codepen.io/nashvail" target="_blank" rel="external">@nashvail</a>)在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>发布的Pen <a href="http://codepen.io/nashvail/pen/rLvymO/" target="_blank" rel="external">nJial</a>。</p>
<p>看到差别了吧？第二个版本看上去自然了很多，显得更有吸引力。试想，如果你的页面中每个动画都有一个自然定时功能，那将是有多赞啊？</p>
<p>由此可见，运动曲线一点都不复杂，它们理解、使用起来都非常简单。借助它们，你可以将你的UI页面提升一个档次。</p>
<p>我希望你已经明白了运动曲线的工作原理。如果你在使用运动曲线的过程中遇到了一些问题，或者你还根本没有用过它们，目前对你而言，让它们照你的意愿创造漂亮的动画，应该都是很简单的。毕竟，动画效果至关重要。</p>
<p><em>(完)</em></p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@JourneyWT" target="_blank" rel="external">鞠大宝</a><br>链接：<a href="http://www.zcfy.cc/article/1162" target="_blank" rel="external">http://www.zcfy.cc/article/1162</a><br>原文：<a href="https://www.smashingmagazine.com/2016/08/css-animations-motion-curves/" target="_blank" rel="external">https://www.smashingmagazine.com/2016/08/css-animations-motion-curves/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[70个老司机技巧教你更好的进行CSS编程]]></title>
      <url>http://jsgrblog.win/2016/12/10/70%E4%B8%AA%E8%80%81%E5%8F%B8%E6%9C%BA%E6%8A%80%E5%B7%A7%E6%95%99%E4%BD%A0%E6%9B%B4%E5%A5%BD%E7%9A%84%E8%BF%9B%E8%A1%8CCSS%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><strong>CSS 并不总是容易处理。</strong> 在你的能力和经验不够的时候，CSS编程会成为一个噩梦，特别是你不确定为页面元素中选择哪种选择器的时候。使用一个不常见的CSS属性以实现更好的语义化，没有比这个方法更好用的更简单的的实现减少代码复杂度的了。</p>
<p>我们研究了一些很有用的CSS窍门，提示，意见，方法，技巧以及编程解决方案，并在下面列出了他们。我们也把一些开发中会用到却一时无法查到的基础技巧列入其中。</p>
<p>下面列出的<strong>70+条专业CSS建议</strong>可以提高你的CSS编程效率。在文章的结尾可以查阅相关参考文献和文章。<br><a id="more"></a><br>对于那些与读者分享建议，技巧，方法，知识和经验的设计师，我们向他们<strong>表示重心的感谢</strong>。无论是程序员，还是设计师，开发者，信息架构师，不一而足，真的非常感谢。</p>
<p>你可能对我们之前的文章<a href="http://www.smashingmagazine.com/2007/01/19/53-css-techniques-you-couldnt-live-without/" target="_blank" rel="external">离不开的53种Css工具</a><a href="#1">1</a>很感兴趣，这篇文章提供了一个CSS基础技巧的基础工具集，你可能在之后的项目中用到他们。</p>
<p>Update (29/05/2007): <a href="http://www.maujor.com/blog/2007/05/29/70-dicas-para-escrever-css/" target="_blank" rel="external">文章的巴西-葡萄牙语翻译</a><a href="#2">2</a> 也发布了. 在此致谢 Maurício Samy Silva。</p>
<h3 id="1-1-工作流：开始"><a href="#1-1-工作流：开始" class="headerlink" title="1.1. 工作流：开始"></a>1.1. 工作流：开始</h3><ul>
<li><p><strong>当你有了设计图之后，开始于一个空白页。</strong> “页面包括页面的页眉，标题，页面示例，页脚。然后开始添加html标记。再然后添加CSS。这样页面效果看起来更好了。” [<a href="http://cssing.blogspot.com/2006/02/10-css-tips-for-new.html" target="_blank" rel="external">CSSing</a><a href="#17">17</a><a href="#3">3</a>]</p>
</li>
<li><p><strong>使用master样式表</strong> “我观察到初等水平和中等水平开发者都会犯的一个相同的错误，他们都会因为没有移除浏览器的默认CSS样式而困扰。这会导致一个你通过浏览器展现出的设计图与原设计图是矛盾的，最终使很多设计师把这种矛盾归咎于浏览器。当然这是一种误解。因此当你编写网站之前，首先要重置样式表。” [<a href="http://www.crucialwebhost.com/blog/master-stylesheet-the-most-useful-css-technique/" target="_blank" rel="external">Master Stylesheet: The Most Useful CSS Technique</a><a href="#4">4</a>], [Ryan Parr]</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/* master.css */</div><div class="line">@import url(&quot;reset.css&quot;);</div><div class="line">@import url(&quot;global.css&quot;);  </div><div class="line">@import url(&quot;flash.css&quot;);</div><div class="line">@import url(&quot;structure.css&quot;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;style type=&quot;text/css&quot; media=&quot;Screen&quot;&gt;</div><div class="line">   @import url(&quot;css/master.css&quot;);</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>首先重置CSS样式</strong> “你可能经常使用某属性的默认值而不是专门为该属性设置一个值。有的开发者倾向于设置<a href="http://leftjustified.net/journal/2004/10/19/global-ws-reset/" target="_blank" rel="external">Global white space reset</a><a href="#5">5</a> ，在样式表的顶部将所有元素的margin和padding都设置为0。”[<a href="http://www.456bereastreet.com/archive/200503/css_tips_and_tricks_part_1/" target="_blank" rel="external">Roger Johansson</a><a href="#66">66</a><a href="#53">53</a><a href="#49">49</a><a href="#45">45</a><a href="#30">30</a><a href="#23">23</a><a href="#6">6</a>]</p>
</li>
<li><p><strong>编写一个辅助CSS类库</strong>此类库用于辅助调试，但是要避免用于已发布的版本中（将标记层与表现层分离）。 你可以使用如下多种类名(即 <code>...</code>)来调试标记层。 (<em>updated</em>) [<a href="http://www.richardkmiller.com/blog/archives/2006/08/css-best-practices" target="_blank" rel="external">Richard K. Miller</a><a href="#7">7</a>]</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.width100 &#123; width: 100%; &#125;</div><div class="line">.width75 &#123; width: 75%; &#125;</div><div class="line">.width50 &#123; width: 50%; &#125;</div><div class="line">.floatLeft &#123; float: left; &#125;</div><div class="line">.floatRight &#123; float: right; &#125;</div><div class="line">.alignLeft &#123; text-align: left; &#125;</div><div class="line">.alignRight &#123; text-align: right; &#125;</div></pre></td></tr></table></figure>
<ul>
<li>Eric Meyer’s <a href="http://meyerweb.com/eric/thoughts/2007/05/01/reset-reloaded/" target="_blank" rel="external">Global Reset</a><a href="#8">8</a>, <a href="http://www.christianmontoya.com/2007/02/01/css-techniques-i-use-all-the-time/" target="_blank" rel="external">Christian Montoya’s initial CSS file</a><a href="#9">9</a>, <a href="http://businesslogs.com/design_and_usability/my_5_css_tips.php" target="_blank" rel="external">Mike Rundle’s initial CSS file</a><a href="#10">10</a>, <a href="http://www.pingmag.jp/2006/05/18/5-steps-to-css-heaven/" target="_blank" rel="external">Ping Mag’s initial CSS file</a><a href="#11">11</a>.</li>
</ul>
<h3 id="1-2-编写你自己的CSS代码"><a href="#1-2-编写你自己的CSS代码" class="headerlink" title="1.2. 编写你自己的CSS代码"></a>1.2. 编写你自己的CSS代码</h3><ul>
<li><strong>编写你自己的CSS样式之使用master样式表</strong> “编写你自己的CSS有助于未来的网站维护。从主样式表开始。在这个样式表里可以引入<code>reset.css</code>，<code>global.css</code>， <code>flash.css</code>（如果需要的话）和 <code>structure.css</code> ，有时还有布局样式表。下面是一个 “master”样式表的例子以及它是如何嵌入到文件里的：”</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">h2 &#123; &#125;</div><div class="line">#snapshot_box h2 &#123; padding: 0 0 6px 0; font: bold 14px/14px &quot;Verdana&quot;, sans-serif; &#125;</div><div class="line">#main_side h2 &#123; color: #444; font: bold 14px/14px &quot;Verdana&quot;, sans-serif; &#125;</div><div class="line">.sidetagselection h2 &#123; color: #fff; font: bold 14px/14px &quot;Verdana&quot;, sans-serif; &#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>编写你自己的样式表之使用标记</strong> “把你的样式表分为具体的部分：即全局样式-（body，paragraphs， lists等），页眉，页面结构，标题，字体样式，导航栏，表单，注释，其他内容。[<a href="http://www.erraticwisdom.com/2006/01/18/5-tips-for-organizing-your-css" target="_blank" rel="external">编写CSS样式表的5个tips</a><a href="#12">12</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`/* ------------------------*/ /* ----------&gt;&gt;&gt; GLOBAL &lt;&lt;&lt;-----------*/ /* ------------------------*/`</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>编写你自己的样式之制作一个内容表</strong> 在你CSS文件的顶部，编写一个内容表。例如，你可以概括出CSS文件所设置样式（header,main,footer等）的不同区域。然后，设置一个大的明显的板块断点来划分这些区域。Then, use a large, obvious section break to separate the areas. [<a href="http://www.pingmag.jp/2006/05/18/5-steps-to-css-heaven/" target="_blank" rel="external">5 Steps to CSS Heaven</a><a href="#89">89</a><a href="#24">24</a><a href="#13">13</a>]</p>
</li>
<li><p><strong>编写你自己的样式表之按字母顺序排列属性</strong> “我忘了我是从哪里得到这个灵感的，但在将CSS属性按字母排序一个月以来，不管你信不信，这个方法使一些特殊的属性很容易找到。” [<a href="http://www.christianmontoya.com/2007/02/01/css-techniques-i-use-all-the-time/" target="_blank" rel="external">Christian Montoya</a><a href="#38">38</a><a href="#14">14</a>]</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">   background: #fdfdfd;</div><div class="line">   color: #333;</div><div class="line">   font-size: 1em;</div><div class="line">   line-height: 1.4;</div><div class="line">   margin: 0;</div><div class="line">   padding: 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>划分单独的代码块</strong>. “这对一些人来说可能是常识，但是有时我看到一些CSS并没有被分解成几部分。这样做可以让你更容易的处理数周、数月甚至数年后的代码。你能够轻而易举的找到需要修改的类和元素。如： <code>/* Structure */</code>, <code>/* Typography */</code>等” [<a href="http://www.blogherald.com/2006/09/08/css-tips-and-tricks/" target="_blank" rel="external">CSS Tips and Tricks</a><a href="#15">15</a>]</p>
</li>
<li><p><strong>挂钩，线和铅坠。</strong> “当CSS及其分段都准备就绪，你会开始考虑选择器要钩在哪里，那么接下来就需要依靠在你的标记里使用结构挂钩。这为网站未来的编写和维护创造了优势，也增强了文档的健壮性。” [Ryan Parr]</p>
</li>
<li><p><strong>将样式表分解成单独的代码块</strong> “我把自己的样式表分解成三个单独的代码块。第一部分是直接的元素声明。改变body、一些links样式、一些header样式，以及重置窗体的margin和padding等等。 […] 在元素声明之后是类声明：一些像错误信息或者callout的东西会放在这里。 [..] 最后我开始声明主容器，然后对这个容器里的元素样式进行缩进。扫视之后我就能看清楚我的页面是如何划分的，而且找一些东西也会变得很容易。即使容器里没有任何内容我也会声明它。” [<a href="http://snook.ca/archives/html_and_css/top_css_tips/" target="_blank" rel="external">Jonathan Snook</a><a href="#68">68</a><a href="#34">34</a><a href="#18">18</a><a href="#16">16</a>]</p>
</li>
</ul>
<h3 id="1-3-工作流程：处理ID、类、选择器和属性。"><a href="#1-3-工作流程：处理ID、类、选择器和属性。" class="headerlink" title="1.3. 工作流程：处理ID、类、选择器和属性。"></a>1.3. 工作流程：处理ID、类、选择器和属性。</h3><ul>
<li><p><strong>使容器保持最小化。</strong> “将你的文档从结构臃肿中拯救出来。新手开发者倾向于使用很多类似于表格单元格的DIV来实现布局。实际上许多其他结构元素都可以用来实现布局。不要使用过多的DIV。在使用过多的包装（DIV）去实现效果前考虑所有的选择，会发现使用一点漂亮的CSS也能达到相同的预期效果。” [Ryan Parr]</p>
</li>
<li><p><strong>使属性保持最少化</strong> “工作时要多思考而不是纠结于CSS。在这条规则之下会衍生出很多子规则：如果添加一个CSS属性不是必需的，那么不要添加；如果你不确定为什么要添加一个CSS属性，不要添加；如果你感觉同一个属性添加了很多次，那么把它们找出来处理后只添加一次。” [<a href="http://cssing.blogspot.com/2006/02/10-css-tips-for-new.html" target="_blank" rel="external">CSSing</a><a href="#17">17</a><a href="#3">3</a>]</p>
</li>
<li><p><strong>使选择器保持最小化</strong> “避免不必要的选择器。使用较少的选择器意味着在实现特殊样式时所重写的选择器也较少-这更有利于故障排除。” [<a href="http://snook.ca/archives/html_and_css/top_css_tips/" target="_blank" rel="external">Jonathan Snook</a><a href="#68">68</a><a href="#34">34</a><a href="#18">18</a><a href="#16">16</a>]</p>
</li>
<li><p><strong>使CSS hack保持最少</strong> “除非遇到了已知的已公布的bug，否则不要使用hack。这是一个很重要的要点，因为我也经常看到hack被用来处理一些压根儿就没有问题的东西。如果你发现需要找一个hack来处理某个设计中的问题，那么首先你需要做一些调查（Google这里能派上用场），然后试着鉴定一下你遇到的这个问题（是否真的需要hack来处理）。[<a href="http://www.search-this.com/2007/03/26/10-quick-tips-for-an-easier-css-life/" target="_blank" rel="external">10 Quick Tips for an easier CSS life</a><a href="#19">19</a>]</p>
</li>
<li><p><strong>在敏捷开发中使用CSS常量</strong> “常量的概念-通过你的代码可以使用的固定值是有用的。有一种应对CSS中缺乏常量的方法是在CSS文件顶部注释中添加一些相关的定义来定义‘常量’。这种方法常见的一种应用是‘创建颜色词汇表’。这种方法可以让你对网站中使用的颜色有一个快速的参考，避免在使用颜色时失误，并且一旦你需要修改颜色，你可以马上利用这个速查表进行搜索和替换。” [<a href="http://24ways.org/2006/faster-development-with-css-constants" target="_blank" rel="external">Rachel Andrew</a><a href="#20">20</a>]</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">   # Dark grey (text): #333333</div><div class="line">   # Dark Blue (headings, links) #000066</div><div class="line">   # Mid Blue (header) #333399</div><div class="line">   # Light blue (top navigation) #CCCCFF</div><div class="line">   # Mid grey: #666666 #</div><div class="line">*/</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>使用一个通用的命名系统。</strong> 在寻找bug或者更新文件时，如果你有一个id和class的命名系统会节省很多时间。特别是大型的CSS文件，如果命名不规范，很快就会导致巨大的混乱。我推荐使用<code>parent_child</code>模式。 [<a href="http://christopher-scott.org/blog/10-css-tips-you-might-not-have-known-about" target="_blank" rel="external">10 CSS Tips</a><a href="#67">67</a><a href="#43">43</a><a href="#21">21</a>]</p>
</li>
<li><p><strong>根据class和id的语义适当的为他们命名。</strong> “我们倾向于避免表明表象方面的命名。否则，如果我们命名一些右列的东西，完全可能改变CSS并且“右列”最终在页面的左边显示。这在未来可能导致混乱，所以最好避免这种表象的命名方案。 [<a href="http://www.digital-web.com/articles/markup_as_craft/" target="_blank" rel="external">Garrett Dimon</a><a href="#22">22</a>]</p>
</li>
<li><p><strong>分类常见的CSS声明选择器。</strong> “分类选择器。当一些元素类型，类或者id共享一些属性时，你可以分类选择器避免在有些时候设置了相同的属性。这将会节省潜在的大量空间。” [<a href="http://www.456bereastreet.com/archive/200503/css_tips_and_tricks_part_1/" target="_blank" rel="external">Roger Johansson</a><a href="#66">66</a><a href="#53">53</a><a href="#49">49</a><a href="#45">45</a><a href="#30">30</a><a href="#23">23</a><a href="#6">6</a>]</p>
</li>
<li><p><strong>将你可能会重复使用很多次某个唯一的属性单独分离出来。</strong> “如果你发现你使用某个唯一的属性很多次，为了使你不再一遍又一遍的重复不仿将其分离出来，而且也使你能够改变网站中所有使用过此属性的部分的显示。” [<a href="http://www.pingmag.jp/2006/05/18/5-steps-to-css-heaven/" target="_blank" rel="external">5 Steps to CSS Heaven</a><a href="#89">89</a><a href="#24">24</a><a href="#13">13</a>]</p>
</li>
<li><p><strong>尽量将id和class的命名持平文档树</strong> 尽可能的使用 <a href="http://www.456bereastreet.com/archive/200509/css_21_selectors_part_1/" target="_blank" rel="external">上下文选择器</a><a href="#25">25</a> 。不要担心这样做会使选择器变得冗长。长的选择器会使css文档更容易阅读，也减少了发展成 classitis 或者 <a href="http://juicystudio.com/article/div-mania.php" target="_blank" rel="external">divitis</a><a href="#26">26</a>的可能。[<a href="http://placenamehere.com/article/156/TenSimpleCSSTips" target="_blank" rel="external">Chric Casciano</a><a href="#76">76</a><a href="#41">41</a><a href="#27">27</a>]</p>
</li>
<li><p><strong>学会利用CSS级联的特性</strong> “比方说你的网站里有两个相似的有些许不同的盒模型-你可以分别为每个盒模型写好CSS样式，也可以为两个盒模型写一个CSS样式，然后再下面写出两个盒模型的不同属性样式来区分两个盒模型。” [<a href="http://www.pingmag.jp/2006/05/18/5-steps-to-css-heaven/" target="_blank" rel="external">5 Steps to CSS heaven</a><a href="#28">28</a>]</p>
</li>
<li><p><strong>使用实用标签: <code>&lt;small&gt;</code>, <code>&lt;em&gt;</code> 和 <code>&lt;strong&gt;</code></strong> “很多时候在设计中会设置一个对各种印刷权重做出要求的部分，比如设置为同一行或者字与字之间间距很近。这些设置分散在各个div和class中，我觉得它们不符合语义化，而且会干扰你一直遵循的良好的XHTML准则。” 建议使用语义化标签代替这些设置。[<a href="http://businesslogs.com/design_and_usability/my_5_css_tips.php" target="_blank" rel="external">Mike Rundle’s 5 CSS Tips</a><a href="#29">29</a>]</p>
</li>
</ul>
<h3 id="1-4-工作流程-使用简写标记"><a href="#1-4-工作流程-使用简写标记" class="headerlink" title="1.4. 工作流程: 使用简写标记"></a>1.4. 工作流程: 使用简写标记</h3><ul>
<li><p><strong>缩写16进制颜色标记。</strong> “在CSS中，一种颜色由三对十六进制数组成，当你使用这种颜色标记时，你可以使用省略每组的第二个数字这种有效率的方法：<code>#000 相当于 #000000, #369 相当于 #336699</code>。 [<a href="http://www.456bereastreet.com/archive/200503/css_tips_and_tricks_part_1/" target="_blank" rel="external">Roger Johansson</a><a href="#66">66</a><a href="#53">53</a><a href="#49">49</a><a href="#45">45</a><a href="#30">30</a><a href="#23">23</a><a href="#6">6</a>]</p>
</li>
<li><p><strong>根据LoVe/HAte排序法定义伪类链接。</strong>: Link, Visited, Hover, Active. “首先确定你了解各种链接样式，然后最好把样式按照“link-visited-hover-active”或者“LVHA”顺序排列。如果你关注焦点样式，那么可以在这之后加入—但是在决定之前看一下这个解释。” [<a href="http://meyerweb.com/eric/css/link-specificity.html" target="_blank" rel="external">Eric Meyer</a><a href="#31">31</a>]</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a:link &#123; color: blue; &#125;</div><div class="line">a:visited &#123; color: purple; &#125;</div><div class="line">a:hover &#123; color: purple; &#125;</div><div class="line">a:active &#123; color: red; &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>按照TRouBLed排序法定义元素的margin, padding 或者border </strong>: Top, Right, Bottom, Left. “这里介绍一个简写定义元素的margin,padding或border的方法，从top开始按照顺时针：Top, Right, Bottom, Left。” [<a href="http://www.456bereastreet.com/lab/developing_with_web_standards/css/" target="_blank" rel="external">Roger Johansson</a><a href="#44">44</a><a href="#32">32</a>]</p>
</li>
<li><p><strong>你可以使用 <a href="http://www.456bereastreet.com/archive/200502/efficient_css_with_shorthand_properties/" target="_blank" rel="external">简写属性</a><a href="#33">33</a>.</strong> “为 <code>margin</code>, <code>padding</code> and <code>border</code> 使用简写属性可以节省很大空间。”</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">margin: top right bottom left;</div><div class="line">margin: 1em 0 2em 0.5em;</div><div class="line">(margin-top: 1em; margin-right: 0; margin-bottom: 2em; margin-left: 0.5em;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">border: width style color;</div><div class="line">border: 1px solid #000;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">background: color image repeat attachment position;</div><div class="line">background: #f00 url(background.gif) no-repeat fixed 0 0;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">font: font-style (italic/normal) font-variant (small-caps) font-weight font-size/line-height font-family;</div><div class="line">font: italic small-caps bold 1em/140% &quot;Lucida Grande&quot;,sans-serif;</div></pre></td></tr></table></figure>
<h3 id="1-5-工作流程-设置字体"><a href="#1-5-工作流程-设置字体" class="headerlink" title="1.5. 工作流程: 设置字体"></a>1.5. 工作流程: 设置字体</h3><ul>
<li><strong>在body标签里设置字号为62.5%从而像使用px一样使用EM</strong>. <code>font-size</code>的默认值是16px; 应用这个规则之后，Em的值大约相当于10px(16 x 62.5% = 10).“我更倾向于在body标签里设置字号为:62.5%。这种方法能够在考虑px时使用em去指定大小，例如，1.3em几乎相当于1.3px。 ” [<a href="http://snook.ca/archives/html_and_css/top_css_tips/" target="_blank" rel="external">Jonathan Snook</a><a href="#68">68</a><a href="#34">34</a><a href="#18">18</a><a href="#16">16</a>]<br>（译者注：经众成翻译用户[拉着你的手说爱你]提示，在chrome中默认最小字体12px，所以这种方法在chrome中不适用。）</li>
</ul>
<ul>
<li><strong>使用通用字符集进行编码</strong>. “[..] 答案就是使用单独的通用字符集去覆盖大部分异常事件。幸运的是这种字符集是存在的：基于Unicode的UTF-8。Unicode是一种行业标准，是为了使所有语言的文字和符号能够为电脑一视同仁的所表示和操控而设计的。 UTF- 8 应该像这样包含在你的网页页头中。” [<a href="http://www.netmag.co.uk/zine/design-tutorials/20-pro-tips" target="_blank" rel="external">20 pro tips</a><a href="#77">77</a><a href="#71">71</a><a href="#36">36</a><a href="#35">35</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/ html;charset=utf-8&quot; /&gt;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>你可以使用CSS来切换大写。</strong> 如果你需要吧一些东西转换成大写，比如一个标题，又不行重写一个副本，那么可以使用CSS来进行这项无聊的工作。下面的代码会将目标h1的所有文本转化为大写，无论是什么格式”。 [<a href="http://www.netmag.co.uk/zine/design-tutorials/20-pro-tips" target="_blank" rel="external">20 pro tips</a><a href="#77">77</a><a href="#71">71</a><a href="#36">36</a><a href="#35">35</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`h1 &#123; text-transform: uppercase; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>你可以用small-caps自动显示文本。</strong>  <code>font-variant</code> 属性是用来显示小型大写字母文本，这其中所有的小写字母被转化为大写字母，但是所有的小型大写字母下的文本相比其余的文本字号较小。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`h1 &#123; font-variant: small-caps; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>定义通用字体类型来覆盖通用设置。</strong> “当我们声明一个设计中使用的特定字体时，我们会希望这种字体以及在用户的系统中安装。简单的说如果他们的系统没有安装这个字体，那么将无法看到这个字体。我们需要做的就是参考用户在他们机器上可能会安装的字体，比如下面的font-family属性。我们完成一个通用字体类型是非常重要的。”[<a href="http://www.communitymx.com/content/article.cfm?cid=FAF76&amp;print=true" target="_blank" rel="external">Getting into good coding habits</a><a href="#37">37</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`p &#123; font-family: Arial, Verdana, Helvetica, sans-serif; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>将<code>line-height</code>设置为1.4em – 1.6em。</strong> “<code>line-height:1.4</code>”为易读的行，合理的行高避免了行超过10个字而过长，而且颜色对比也不会太不明显。比如，对于过亮的CRT显示屏来说，纯黑色在纯白色的背景下往往对比太强烈，因此我尝试运用米白色(<code>#fafafa</code>是一个好的选择)和暗灰色（<code>#333333</code>也不错）。” [<a href="http://www.christianmontoya.com/2007/02/01/css-techniques-i-use-all-the-time/" target="_blank" rel="external">Christian Montoya</a><a href="#38">38</a><a href="#14">14</a>]</p>
</li>
<li><p><strong>设置 <code>html</code>-元素为100.01%。</strong> 这个针对字号的奇怪100.01%会对几个浏览器bug进行弥补。首先，设置一个默认的body百分比字号（而不是em）消除了IE/Win系统中的字体缩放比例问题，即使之后在其它元素中设置为em。此外，一些版本的Opera浏览器会设置一个比其他浏览器小的100%的默认字号。另一方面，Safari浏览器却有一个101%字号的问题。目前流行的最佳解决方案是针对这个属性设置为100.01%的值。” [<a href="http://www.communitymx.com/content/article.cfm?cid=FAF76&amp;print=true" target="_blank" rel="external">CSS: Getting into good habits</a><a href="#39">39</a>]</p>
</li>
</ul>
<h3 id="1-6-工作流程-调试"><a href="#1-6-工作流程-调试" class="headerlink" title="1.6. 工作流程: 调试"></a>1.6. 工作流程: 调试</h3><ul>
<li><strong>添加边框以确定容器</strong> “在构建文档或者调整布局问题时使用大量的测试样式，比如额外的边框或者背景颜色。<code>div { border:1px red dashed; }</code>就像一个小装饰品。这里有 <a href="http://www.squarefree.com/bookmarklets/webdevel.html" target="_blank" rel="external">应用边框的书签</a><a href="#40">40</a> ，并且还能为你做其它事情。” 你也可以使用 <code>* { border: 1px solid #ff0000; }</code>. [<a href="http://placenamehere.com/article/156/TenSimpleCSSTips" target="_blank" rel="external">Chric Casciano</a><a href="#76">76</a><a href="#41">41</a><a href="#27">27</a>]. 为元素添加一个边框来认清它们，这样有助于识别正常情况下不易察觉的重叠部分或者额外的空白部分。[<a href="http://www.mezzoblue.com/css/cribsheet/" target="_blank" rel="external">CSS Crib Sheet</a><a href="#69">69</a><a href="#42">42</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`* &#123; border: 1px solid #f00; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>在调试前首先检查封闭的元素。</strong> “如果你曾经因为只修改了很少的东西就破坏了你优美的宝贝布局而沮丧，那么很可能是因为没有封闭的元素。[<a href="http://christopher-scott.org/blog/10-css-tips-you-might-not-have-known-about" target="_blank" rel="external">10 CSS Tips</a><a href="#67">67</a><a href="#43">43</a><a href="#21">21</a>]</li>
</ul>
<h3 id="2-1-技术性技巧-IDs-Classes"><a href="#2-1-技术性技巧-IDs-Classes" class="headerlink" title="2.1. 技术性技巧: IDs, Classes"></a>2.1. 技术性技巧: IDs, Classes</h3><ul>
<li><strong>每个页面一个id，每个页面很多class。</strong> “检查你使用的id:文档中只有一个元素能使用某个值的id属性，而共享同一个类名的元素个数是无限制的。[..]class名和id名只能由字母[A-Za-z0-9]和连字符 (-)组成，而且不能由连字符或者数字开头(参考 CSS2 的语法和基本数据类型)。” [<a href="http://www.456bereastreet.com/lab/developing_with_web_standards/css/" target="_blank" rel="external">Roger Johansson</a><a href="#44">44</a><a href="#32">32</a>]</li>
</ul>
<ul>
<li><p><strong>区分选择器中元素名的大小写。</strong> “记住要严格区分大小写。当CSS与XHTML用在一起时，选择器中的元素名是区分大小写的。为了避免这个问题我总是推荐在CSS选择器中使用小写的元素名。class和id属性值在HTML和XHTML中都是区分大小写的，所以要避免混合大小写的class和id名字。”[<a href="http://www.456bereastreet.com/archive/200503/css_tips_and_tricks_part_1/" target="_blank" rel="external">Roger Johansson</a><a href="#66">66</a><a href="#53">53</a><a href="#49">49</a><a href="#45">45</a><a href="#30">30</a><a href="#23">23</a><a href="#6">6</a>]</p>
</li>
<li><p><strong>CSS中的class与id必须是有效的</strong>“即 <a href="http://www.w3.org/TR/html401/types.html#type-id" target="_blank" rel="external">由字母开头</a><a href="#46">46</a>, 而不是数字或者下划线。id必须是唯一的。他们的名字应当 <a href="http://www.w3.org/QA/Tips/goodclassnames" target="_blank" rel="external">具有普遍性</a><a href="#47">47</a>,能够描述功能而不是装装样子。” [<a href="http://learningtheworld.eu/2006/best-practices/#css" target="_blank" rel="external">CSS Best Practices</a><a href="#48">48</a>]</p>
</li>
<li><p><strong>你可以将多个class的名字分配给一个给定的元素。</strong> “你可以将多个class的名字分配给一个元素。这样有利于书写不同的规则来定义不同的属性，并且只在需要的地方应用它们。” [<a href="http://www.456bereastreet.com/archive/200503/css_tips_and_tricks_part_1/" target="_blank" rel="external">Roger Johansson</a><a href="#66">66</a><a href="#53">53</a><a href="#49">49</a><a href="#45">45</a><a href="#30">30</a><a href="#23">23</a><a href="#6">6</a>]</p>
</li>
</ul>
<h3 id="2-2-技术性技巧：充分用好选择器。"><a href="#2-2-技术性技巧：充分用好选择器。" class="headerlink" title="2.2. 技术性技巧：充分用好选择器。"></a>2.2. 技术性技巧：充分用好选择器。</h3><p>Roger Johansson写了一系列关于<a href="http://www.456bereastreet.com/archive/200509/css_21_selectors_part_1/" target="_blank" rel="external">CSS 2.1 选择器</a><a href="#50">50</a>的<strong>非常</strong>有实用性的文章。这篇文章 <strong>重磅推荐</strong>  – 下面会列举其中一些有用的方面。要注意IE6及其更早的版本是不支持选择器  ‘&gt;’ 和 ‘+’的。 (<em>updated</em>).</p>
<ul>
<li><strong>你可以使用子选择器</strong> “一个子选择器指向某个元素的直接孩子。一个子选择器由两个或者更多的选择器组成，这些选择器由大于号“&gt;”分割。父类在大于号“&gt;”的左边，并且选择符和选择器之间允许出现空格。这个规则会影响所有div元素下的strong元素。  [<a href="http://www.456bereastreet.com/archive/200510/css_21_selectors_part_2/" target="_blank" rel="external">Roger Johansson</a><a href="#52">52</a><a href="#51">51</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`div &gt; strong &#123; color:#f00; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>你可以使用相邻选择器。</strong> 一个相邻选择器由两个简单的选择器组成，这两个选择器由加号“+”分开。相邻选择器内部允许出现空格。这个选择器匹配一个元素，这个元素是前一个元素的相邻元素。这两个元素必须有相同的父元素，并且第一个元素必须是紧挨第二个元素。[<a href="http://www.456bereastreet.com/archive/200510/css_21_selectors_part_2/" target="_blank" rel="external">Roger Johansson</a><a href="#52">52</a><a href="#51">51</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`p + p &#123; color:#f00; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>你可以使用属性选择器。</strong> 属性选择器匹配的元素是基于这个属性的存在或值。下面是四条属性选择器的匹配情况：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[att] 匹配包含att属性的元素，无论它是什么值。</div><div class="line">[att=val] 匹配包含属性att值为“val”的元素。</div><div class="line">[att~=val] 匹配含属性att，且att的值中包含“val”的元素。这种情况下“val”中不能包含空格。</div><div class="line">[att|=val] 匹配含属性att且值为连字号分割的开头为“val”的元素。这种匹配主要用于匹配由lang属性(xml:lang in XHTML)指定的语言码，即 “en”, “en-us”, “en-gb”等。</div></pre></td></tr></table></figure>
<ul>
<li>下面规则中的选择器匹配含<code>title</code>属性的<code>p</code>元素，无论它是什么值：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`p[title] &#123; color:#f00; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li>这个选择器匹配所有的class属性值为error的div元素:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`div[class=error] &#123; color:#f00; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li>多属性的选择器可以用于同一个选择器。这个方法可以实现对同一个元素的不同属性的匹配。下面的规则将适用于所有类值为“quate”且包含cite属性的blockquote元素：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`blockquote[class=quote][cite] &#123; color:#f00; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>你也可以使用后代选择器。</strong> “后代选择器可以帮助你从你的标记中消除很多类属性，从而是你的CSS选择器更加的有效。 ” [<a href="http://www.456bereastreet.com/archive/200503/css_tips_and_tricks_part_1/" target="_blank" rel="external">Roger Johansson</a><a href="#66">66</a><a href="#53">53</a><a href="#49">49</a><a href="#45">45</a><a href="#30">30</a><a href="#23">23</a><a href="#6">6</a>]</li>
</ul>
<h3 id="2-3-技术性技巧-样式链接"><a href="#2-3-技术性技巧-样式链接" class="headerlink" title="2.3.技术性技巧:样式链接"></a>2.3.技术性技巧:样式链接</h3><ul>
<li><p><strong>如果你使用锚，在设计链接时要小心。</strong> “如果你在代码中使用了经典的锚(<code>&lt;a name=&quot;anchor&quot;&gt;</code>) ，那么你会注意到它失去了<code>:hover</code>和<code>:active</code> 伪类作用。为了避免这种情况，你需要为锚设置<code>id</code>而不是用<a href="http://dbaron.org/css/1999/09/links" title="Notes on suggesting link styles" target="_blank" rel="external">略晦涩难懂</a><sup><a href="https://hackhands.com/70-Expert-Ideas-For-Better-CSS-Coding/#54" target="_blank" rel="external">54</a></sup>的语法： <code>:link:hover, :link:active</code>来设计。” [<a href="http://www.mezzoblue.com/css/cribsheet/" target="_blank" rel="external">Dave Shea</a><a href="#55">55</a>]</p>
</li>
<li><p><strong>为链接定义关系。</strong> “rel属性是用来从一个资源指向另一个资源表示语义链接关系。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a[rel~=&quot;nofollow&quot;]::after &#123; content: &quot;2620&quot;; color: #933; font-size: x-small; &#125;</div><div class="line">a[rel~=&quot;tag&quot;]::after &#123; content: url(http://www.technorati.com/favicon.ico); &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>“这些使用空格分隔的值列表的属性选择器。包含这些值的关系的任何一个元素将会被匹配。含禁止链接关联的链接将会伴随一个暗红色的骷髅头（？）而标签关联的链接将会伴随一个Technocrati图标。” [<a href="http://lachy.id.au/log/2005/04/handy-css" target="_blank" rel="external">Handy CSS</a><a href="#90">90</a><a href="#57">57</a><a href="#56">56</a>]</p>
</li>
<li><p>你可以自动标记外部链接。许多人利用非标准关联 <code>rel=&quot;external&quot;</code>来指定一个外部站点的链接。然而，把它添加到每一个link上是消耗时间并且没有必要的。这个样式规则将会使网站上的外部链接放在一个东北向箭头上。[<a href="http://lachy.id.au/log/2005/04/handy-css" target="_blank" rel="external">Handy CSS</a><a href="#90">90</a><a href="#57">57</a><a href="#56">56</a>]</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`a[href^=&quot;http://&quot;]:not([href*=&quot;smashingmagazine.com&quot;])::after &#123; content: &quot;2197&quot;; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>你可以使用 <code>outline: none;</code>来去除链接的虚线</strong>使用 <code>outline: none;</code><a href="http://sonspring.com/journal/removing-dotted-links" target="_blank" rel="external">去除链接虚线</a><a href="#58">58</a>：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`a:focus &#123; outline: none; &#125;`</div></pre></td></tr></table></figure>
<h3 id="2-4-技术性技巧-CSS-Techniques"><a href="#2-4-技术性技巧-CSS-Techniques" class="headerlink" title="2.4. 技术性技巧: CSS-Techniques"></a>2.4. 技术性技巧: CSS-Techniques</h3><ul>
<li><p><strong>你可以指定body标签的id。</strong> “大多数情况下在body标签上设置一个id有助于操作CSS的表面条目及标记页面的基础元素。你不仅仅可以组织你的章节，而且还可以在不改变模板和标记的情况下创建多个CSS样式。” [Ryan Parr, <a href="http://alistapart.com/articles/bodyswitchers" target="_blank" rel="external">Invasion of Body Switchers</a><a href="#59">59</a>]</p>
</li>
<li><p><strong>你可以通过CSS创建高度相等的列。</strong> <a href="http://www.positioniseverything.net/articles/onetruelayout/equalheight" target="_blank" rel="external">等高技术</a><a href="#60">60</a>: 使所有列展示为相同高度的方法。但是没有伪列式背景图片的需要。 <a href="http://www.alistapart.com/articles/fauxcolumns/" target="_blank" rel="external">伪列</a><a href="#61">61</a>: 结合背景图片。</p>
</li>
<li><p><strong>你可以使CSS垂直对齐。</strong> “比方说一个导航菜单，高度指定为2em。解决方法：在CSS中将行高设置为与盒子高度相同。 在这种情况下，盒子高度是2em，因此我们可以在CSS规则中设置line-height：2em，那么盒子中的文本将会浮动在中间位置。” [<a href="http://evolt.org/article/rdf/17/60369/" target="_blank" rel="external">Evolt.org</a><a href="#62">62</a>]</p>
</li>
<li><p><strong>你可以使用伪元素和类来动态生成内容。</strong> <a href="http://www.456bereastreet.com/archive/200510/css_21_selectors_part_3/" target="_blank" rel="external">伪类和伪元素</a><a href="#63">63</a>. 伪类和伪元素可以用来格式化元素，这些元素的信息都是在文档树中无法得到的。例如，没有元素指向一段的第一行或者一个元素文本的第一个字母。你可以使用 :first-child, :hover, :active, :focus, :first-line, :first-letter, :before, :after and more.</p>
</li>
<li><p><strong>你可以使用<code>&lt;hr&gt;</code>来优雅的分隔帖子。</strong> “重新设计的水平规则 (</p>
</li>
</ul>
<hr>
<p>) 结合图片将会给网页很大程度的加分。[<a href="http://www.richardkmiller.com/blog/archives/2006/08/css-best-practices" target="_blank" rel="external">CSS: Best Practices</a><a href="#64">64</a>]</p>
<ul>
<li><strong>你可以在每页上都是用相投的导航(X)HTML代码。</strong> “大多数网站突出了用户位置的导航栏。但是这样会很痛苦，因为你必须调整每一个页面的导航栏后面的HTML代码。能不能找到一个两全其美的方法呢？” [<a href="http://www.sitepoint.com/article/top-ten-css-tricks" target="_blank" rel="external">Ten More CSS Tricks you may not know</a><a href="#65">65</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">   &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;home&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;</div><div class="line">   &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;about&quot;&gt;About us&lt;/a&gt;&lt;/li&gt;  </div><div class="line">   &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;contact&quot;&gt;Contact us&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<ul>
<li>将一个<code>id</code> 加入到 <code>body</code> 标签中。这个id应该能表现出网站中用户的位置，并且当用户访问站点的不同部分时也能随之变化。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`#home .home, #about .about, #contact .contact &#123;  commands for highlighted navigation go here &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>使用<code>margin: 0 auto;</code> 实现水平居中布局。</strong> “要实现用CSS水平居中一个元素，你需要指定这个元素的宽度和水平的margin。” [Roger Johansson]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`&lt;div id=&quot;wrap&quot;&gt; &lt;!-- Your layout goes here --&gt; &lt;/div&gt;`</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`#wrap &#123; width:760px; /* Change this to the width of your layout */  margin:0 auto; &#125;`</div></pre></td></tr></table></figure>
<ul>
<li><strong>你可以将CSS样式添加到RSS源。</strong> “你可以用XSL样式表做很多事情（将链接转化为可点击链接等），但是CSS可以使非专业人员对你的代码不那么恐惧。 [Pete Freitag]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`&lt;?xml version=&quot;1.0&quot; ?&gt; &lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;http://you.com/rss.css&quot; ?&gt;  ...`</div></pre></td></tr></table></figure>
<ul>
<li><strong>你可以隐藏旧浏览器的CSS。</strong> “从旧的浏览器隐藏CSS文件的一种常用方法是使用 <code>@import</code>的诀窍。 [<a href="http://www.456bereastreet.com/archive/200503/css_tips_and_tricks_part_1/" target="_blank" rel="external">Roger Johansson</a><a href="#66">66</a><a href="#53">53</a><a href="#49">49</a><a href="#45">45</a><a href="#30">30</a><a href="#23">23</a><a href="#6">6</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`@import &quot;main.css&quot;;`</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>别忘了声明块级元素中的margin和padding。</strong> [<a href="http://christopher-scott.org/blog/10-css-tips-you-might-not-have-known-about" target="_blank" rel="external">10 CSS Tips</a><a href="#67">67</a><a href="#43">43</a><a href="#21">21</a>]</p>
</li>
<li><p><strong>设置宽度或者margin和padding。</strong> “我的经验法则是，如果设置了一个宽度，就不设置margin或padding。同样，如果设置了一个margin或padding，就不设置宽度。处理盒模型是就是会有如此的痛苦，特别是当你处理百分比的那种。所以，我设置外部容器的宽度，然后对其中的元素设置margin和padding。如此一来一切都会顺利。” [<a href="http://snook.ca/archives/html_and_css/top_css_tips/" target="_blank" rel="external">Jonathan Snook</a><a href="#68">68</a><a href="#34">34</a><a href="#18">18</a><a href="#16">16</a>]</p>
</li>
<li><p><strong>避免将padding/border和固定宽度应用到元素中。</strong> “IE5的盒模型是有误的，这带来了一大堆麻烦。这其中有很多解决方案，但是最好是通过设置父元素的padding来避开这个问题，而不是对子元素设置固定宽度。 [<a href="http://www.mezzoblue.com/css/cribsheet/" target="_blank" rel="external">CSS Crib Sheet</a><a href="#69">69</a><a href="#42">42</a>]</p>
</li>
<li><p><strong>提供打印样式。</strong> “你可以像加入一个正规样式一样为你的页面加入一个打印样式：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;print.css&quot; media=&quot;print&quot;&gt;`</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`&lt;style type=”text/css” media=”print”&gt; @import url(print.css); &lt;/style&gt;`</div></pre></td></tr></table></figure>
<ul>
<li>这将确保此CSS只会应用于打印时的页面而不会影响这个页面在屏幕上的显示。应用新的打印样式后你可以确保实现白色背景下的实心黑色文本并且移除多余的特性，极大提高可读性。 <a href="http://www.smashingmagazine.com/2007/02/21/printing-the-web-solutions-and-techniques/" target="_blank" rel="external">More about CSS-based print-Layouts</a><a href="#70">70</a>. [<a href="http://www.netmag.co.uk/zine/design-tutorials/20-pro-tips" target="_blank" rel="external">20 pro tips</a><a href="#77">77</a><a href="#71">71</a><a href="#36">36</a><a href="#35">35</a>]</li>
</ul>
<h3 id="2-5-技术性技巧-IE-调整"><a href="#2-5-技术性技巧-IE-调整" class="headerlink" title="2.5. 技术性技巧: IE 调整"></a>2.5. 技术性技巧: IE 调整</h3><ul>
<li><strong>你可以强制使IE应用透明PNG图片。</strong> “理论上，PNG文件支持各种级别的透明程度；然而，一个IE6的bug阻碍了这个属性的跨浏览器运作。” [<a href="http://blog.outer-court.com/archive/2007-03-30-n51.html" target="_blank" rel="external">CSS Tips, Outer-Court.com</a><a href="#72">72</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#regular_logo &#123; background: url(&apos;test.png&apos;); width:150px; height:55px; &#125;</div><div class="line">* html #regular_logo &#123;</div><div class="line">   background:none;</div><div class="line">   float:left;</div><div class="line">   width:150px;</div><div class="line">   filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src=&apos;test.png&apos;, sizingMethod=&apos;scale&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>你可以在IE中定义<code>min-width</code> 和 <code>max-width</code> 。</strong>[<a href="http://www.sitepoint.com/article/top-ten-css-tricks" target="_blank" rel="external">Ten More CSS Trick you may not know</a><a href="#73">73</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#container &#123;</div><div class="line">   min-width: 600px;</div><div class="line">   max-width: 1200px;</div><div class="line">   width:expression(document.body.clientWidth &lt; 600? &quot;600px&quot; : document.body.clientWidth &gt; 1200? &quot;1200px&quot; : &quot;auto&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>你可以为IE设置条件注释。</strong> “IE/Win条件下最安全的处理方式是使用条件注释。使用微软专有的条件注释感觉起来比CSS hack更有前途。你可以利用这个方法为IE/Win设置一个单独的样式表，这个样式表包含所有使其正确运作的必须的规则。” [<a href="http://www.456bereastreet.com/archive/200503/css_tips_and_tricks_part_2/" target="_blank" rel="external">Roger Johansson</a><a href="#74">74</a>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`&lt;!--[if IE]&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie.css&quot; /&gt; &lt;![endif]--&gt;`</div></pre></td></tr></table></figure>
<h3 id="工作流程-获得灵感"><a href="#工作流程-获得灵感" class="headerlink" title="工作流程:获得灵感"></a>工作流程:获得灵感</h3><ul>
<li><p><strong>娱乐试验向CSS</strong> “去玩。玩背景图。玩浮动. ” [<a href="http://chunkysoup.net/article/12/AbusingMargins" target="_blank" rel="external">Play with positive and negative margins</a><a href="#75">75</a>. 玩继承和级联规则。就是玩。[<a href="http://placenamehere.com/article/156/TenSimpleCSSTips" target="_blank" rel="external">Chric Casciano</a><a href="#76">76</a><a href="#41">41</a><a href="#27">27</a>]</p>
</li>
<li><p><strong>向别人学习</strong> 从别人优秀的网站中汲取知识。任何网站的HTML都可以轻易的通过查看网页的源代码得到。观察别人是如何做的并把他们的方法应用到自己的中做种。 [<a href="http://www.netmag.co.uk/zine/design-tutorials/20-pro-tips" target="_blank" rel="external">20 pro tips</a><a href="#77">77</a><a href="#71">71</a><a href="#36">36</a><a href="#35">35</a>]</p>
</li>
</ul>
<h3 id="来源及相关"><a href="#来源及相关" class="headerlink" title="来源及相关"></a>来源及相关</h3><ul>
<li><p><a href="http://www.456bereastreet.com/archive/200503/css_tips_and_tricks_part_1/" target="_blank" rel="external">CSS Tips and Tricks</a> by <em>Roger Johansson</em></p>
</li>
<li><p><a href="http://blog.jm3.net/2007/03/16/the-only-ten-things-to-know-about-css/" target="_blank" rel="external">(The Only) Ten Things To Know About CSS</a> by <em>John Manoogian</em></p>
</li>
<li><p><a href="http://www.mezzoblue.com/archives/2003/11/19/css_crib_she/" target="_blank" rel="external">CSS Crib Sheet</a> by <em>Dave Shea</em></p>
</li>
<li><p><a href="http://www.sitepoint.com/article/top-ten-css-tricks" target="_blank" rel="external">My Top Ten CSS Tricks [CSS Tutorials]</a> by <em>Trenton Moss</em></p>
</li>
<li><p><a href="http://blog.outer-court.com/archive/2007-03-30-n51.html" target="_blank" rel="external">CSS Tips</a> by <em>Philipp Lenssen</em></p>
</li>
<li><p><a href="http://www.snook.ca/archives/html_and_css/top_css_tips/" target="_blank" rel="external">Top CSS Tips</a> by <em>Jonathan Snook</em></p>
</li>
<li><p><a href="http://tantek.com/log/2004/09.html#d07t1434" target="_blank" rel="external">Ten CSS tricks — corrected and improved</a> by <em>Tantek Çelik</em></p>
</li>
<li><p><a href="http://www.webcredible.co.uk/user-friendly-resources/css/more-css-tricks.shtml" target="_blank" rel="external">Ten More CSS Trick you may now know</a> by <em>Trenton Moss</em></p>
</li>
<li><p><a href="http://www.christianmontoya.com/2007/02/01/css-techniques-i-use-all-the-time/" target="_blank" rel="external">CSS techniques I use all the time</a> by <em>Christian Montoya</em></p>
</li>
<li><p><a href="http://www.stopdesign.com/log/2005/05/03/css-tip-flags.html" target="_blank" rel="external">CSS Tip Flags</a> by <em>Douglas Bowman</em></p>
</li>
<li><p><a href="http://businesslogs.com/design_and_usability/my_5_css_tips.php" target="_blank" rel="external">My 5 CSS Tips</a> by <em>Mike Rundle</em></p>
</li>
<li><p><a href="http://www.pingmag.jp/2006/05/18/5-steps-to-css-heaven/" target="_blank" rel="external">5 Steps to CSS Heaven</a> by <em>Ping Mag</em></p>
</li>
<li><p><a href="http://lachy.id.au/log/2005/04/handy-css" target="_blank" rel="external">Handy CSS</a> by <em>Lachlan Hunt</em></p>
</li>
<li><p><a href="http://erraticwisdom.com/2006/01/18/5-tips-for-organizing-your-css" target="_blank" rel="external">Erratic Wisdom: 5 Tips for Organizing Your CSS</a> by <em>Thame Fadial</em></p>
</li>
<li><p><a href="http://www.seomoz.org/blog/css-properties-you-probably-never-use" target="_blank" rel="external">15 CSS Properties You Probably Never Use (but perhaps should)</a> by <em>SeoMoz</em></p>
</li>
<li><p><a href="http://christopher-scott.org/blog/10-css-tips-you-might-not-have-known-about" target="_blank" rel="external">10 CSS Tips You Might Not Have Known About</a> by <em>Christopher Scott</em></p>
</li>
<li><p><a href="http://www.alistapart.com/articles/12lessonsCSSandstandards" target="_blank" rel="external">A List Apart: Articles: 12 Lessons for Those Afraid of CSS and Standards</a> by <em>Ben Henick</em></p>
</li>
<li><p><a href="http://www.dkeithrobinson.com/entry/tips_for_a_better_design_review_process/" target="_blank" rel="external">Tips for a better design review process</a> by <em>D. Keith Robinson</em></p>
</li>
<li><p><a href="http://www.netmag.co.uk/zine/design-tutorials/20-pro-tips" target="_blank" rel="external">20 pro tips – .net magazine</a> by <em>Jason Arber</em></p>
</li>
<li><p><a href="http://www.richardkmiller.com/blog/archives/2006/08/css-best-practices" target="_blank" rel="external">CSS Best Practices</a> by <em>Richard K Miller</em></p>
</li>
<li><p><a href="http://www.search-this.com/2007/03/26/10-quick-tips-for-an-easier-css-life/" target="_blank" rel="external">10 Quick Tips for an Easier CSS Life</a> by <em>Paul Ob</em></p>
</li>
<li><p>10 CSS Tips from a Professional CSS Front-End Architect by <em>72 DPI in the shade team blog</em></p>
</li>
<li><p><a href="http://www.d.umn.edu/itss/support/Training/Online/webdesign/css.html#tips" target="_blank" rel="external">Web Design References: Cascading Style Sheets</a> by <em>Laura Carlson</em></p>
</li>
<li><p><a href="http://www.communitymx.com/content/article.cfm?cid=FAF76&amp;print=true" target="_blank" rel="external">Getting Into Good Coding Habits</a> by <em>Adrian Senior</em></p>
</li>
</ul>
<p>This article is by <strong>Vitaly Friedman</strong> from <a href="http://smashingmagazine.com" target="_blank" rel="external">smashingmagazine.com</a>.</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@ziyekkk" target="_blank" rel="external">网瘾少年</a><br>链接：<a href="http://www.zcfy.cc/article/1078" target="_blank" rel="external">http://www.zcfy.cc/article/1078</a><br>原文：<a href="https://hackhands.com/70-Expert-Ideas-For-Better-CSS-Coding/" target="_blank" rel="external">https://hackhands.com/70-Expert-Ideas-For-Better-CSS-Coding/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用CSS相对单位构建可缩放的组件]]></title>
      <url>http://jsgrblog.win/2016/12/10/%E4%BD%BF%E7%94%A8CSS%E7%9B%B8%E5%AF%B9%E5%8D%95%E4%BD%8D%E6%9E%84%E5%BB%BA%E5%8F%AF%E7%BC%A9%E6%94%BE%E7%9A%84%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p><em>这是 <a href="https://ishadeed.com/" target="_blank" rel="external">Ahmad Shadeed</a> 的一篇博客，他为我们列举了使用相对单位的诸多好处。说到<code>em</code>这类相对单位，可能大多数人的第一反应是可以用于设置字体大小，事实上，还有许多其他yong chu用处，比如将字体大小与其他视觉元素的尺寸绑定。</em></p>
<p>在这个动态的世界中，我们所做的任何事情随时都可能发生变化。作为前端开发者，我们也应该使用动态的方法进行布局。<br><a id="more"></a><br>本文将讨论使用CSS相对单位（％，em，或rem）来缩放元素组件中所有UI的方法。我们将举出一些实际的例子，分析各种方法的利弊，最后，还给出了一个使用这种方法建立完整页面的例子。</p>
<h3 id="一个关于字体大小比例的简单例子"><a href="#一个关于字体大小比例的简单例子" class="headerlink" title="一个关于字体大小比例的简单例子"></a>一个关于字体大小比例的简单例子</h3><p><img src="http://p3.qhimg.com/t016c9b944f1a0955a1.jpg" alt=""></p>
<p>这里面包含了三个元素：</p>
<ol>
<li>副标题</li>
<li>主标题</li>
<li>左边框</li>
</ol>
<p>HTML如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;article class=&quot;post&quot;&gt;</div><div class="line">   &lt;a href=&quot;#&quot;&gt;</div><div class="line">     &lt;span class=&quot;post-category&quot;&gt;Featured&lt;/span&gt;</div><div class="line">     &lt;h2 class=&quot;post-title&quot;&gt;Building Dynamic Components is Awesome&lt;/h2&gt;</div><div class="line">   &lt;/a&gt;</div><div class="line">&lt;/article&gt;</div></pre></td></tr></table></figure>
<p>我希望每个元素相当于其他元素都是成比例的，这样当产生缩放时，他们会发生等比例的变化：</p>
<p><img src="http://p6.qhimg.com/t01fd7aab55668ae1b2.jpg" alt=""></p>
<p>假设我们采用绝对单位（px）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.post &#123;</div><div class="line">  border-left: 4px solid #4a90e2;</div><div class="line">&#125;</div><div class="line">.post-category &#123;</div><div class="line">  font-size: 14px;</div><div class="line">  color: #7d7d7d;</div><div class="line">&#125;</div><div class="line">.post-title &#123;</div><div class="line">  font-size: 36px;</div><div class="line">  font-weight: bold;</div><div class="line">  color: #4a90de;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当发生缩放时，要使各部分的比例不变，唯一方法就是重新计算各个元素的字体大小。比如，客户说，他们想让这个区域增大1.5倍，那你就得将字体大小分别调整到 <code>21px</code> 和 <code>54px</code>。</p>
<p>为了使得调整起来更方便，我们可以使用百分比单位。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.post-category &#123;</div><div class="line">  font-size: 85%;</div><div class="line">&#125;</div><div class="line">.post-title &#123;</div><div class="line">  font-size: 135%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码的意思是，<code>font-size</code> 的大小要等于其定义了 <code>font-size</code> 属性的最近父级元素字体大小的 85%。</p>
<p>我们可以给父级元素设置 <code>font-size</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.post &#123;</div><div class="line">  font-size: 24px;</div><div class="line"></div><div class="line">  /* </div><div class="line">    Child elements with % font sizes...</div><div class="line"></div><div class="line">    85%</div><div class="line">    0.85 * 24 = 20.4</div><div class="line"></div><div class="line">    135%</div><div class="line">    1.35 * 24 = 32.4</div><div class="line">  */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你不需要考虑最终的计算值是多少，因为浏览器会自动计算相应的字体大小。对你来说，它只是一个比例而已。</p>
<p><img src="http://p8.qhimg.com/t017c9466decf7cc958.jpg" alt=""></p>
<p>使用 <code>em</code>，我们也可以做到一样的事情。对于字体大小来说，百分比和 em 其实是一样的东西。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.post-category &#123;</div><div class="line">  font-size: 85%;</div><div class="line">  /* the same as */</div><div class="line">  font-size: 0.85em;</div><div class="line">&#125;</div><div class="line">.post-title &#123;</div><div class="line">  font-size: 135%;</div><div class="line">  /* the same as */</div><div class="line">  font-size: 1.35em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们对除了 <code>font-size</code> 之外的属性使用 <code>em</code> 时，计算值的大小仍然基于 <code>font-size</code> 得到的。这和百分比不同，比如，对于使用百分比的 <code>width</code> 属性，它的计算值是由父级元素的 <code>width</code> 属性而不是 <code>font-size</code> 属性得到的。</p>
<p>举个栗子，如果我们设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.post &#123;</div><div class="line">  font-size: 24px;</div><div class="line">  border-left: 0.25em solid #4a90e2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>border-left-width</code> 属性的值会计算得到 <code>6px</code>。</p>
<p>在下面这个demo中，滑动条会改变两个组件的 <code>font-size</code> 值。第一个组件的每个元素的大小都通过像素设置，第二个组件的各个元素大小则都通过 em 设置。</p>
<p><a href="http://codepen.io/shadeed/pen/5037e798ccb88eb220f26540e6886f5c/" target="_blank" rel="external">demo.</a></p>
<p>可以看到，使用 em 时，一切都会成比例缩放。</p>
<h3 id="等比例的按钮"><a href="#等比例的按钮" class="headerlink" title="等比例的按钮"></a>等比例的按钮</h3><p>我们有时需要不同尺寸的按钮。比如，用一个更大尺寸的按钮版本来强调该动作的重要性。使用 <code>em</code>，我们可以轻松的同时增加 <code>font-size</code> 和 <code>padding</code> 的大小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;button class=&quot;button&quot;&gt;Save Settings&lt;/button&gt;</div><div class="line"></div><div class="line">&lt;button class=&quot;button button--medium&quot;&gt;Save Settings&lt;/button&gt;</div><div class="line"></div><div class="line">&lt;button class=&quot;button button--large&quot;&gt;Save Settings&lt;/button&gt;</div></pre></td></tr></table></figure>
<p>如果我们把尺寸都通过像素来设置，那么我们将需要这么做：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.button &#123;</div><div class="line">  font-size: 16px;</div><div class="line">  padding: 10px 16px;</div><div class="line">  border-radius: 3px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.button--medium &#123;</div><div class="line">  font-size: 24px;</div><div class="line">  padding: 15px 24px;</div><div class="line">  border-radius: 4px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.button--large &#123;</div><div class="line">  font-size: 32px;</div><div class="line">  padding: 20px 32px;</div><div class="line">  border-radius: 5px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相反，结合百分比和 em 值，我们可以使尺寸值成比例变化，甚至包括 <code>border-radius</code>！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.button &#123;</div><div class="line">  font-size: 1em; /* Let&apos;s say this computes to 16px */</div><div class="line">  padding: 0.625em 1em; /* 0.1875 * 16 = 10px */</div><div class="line">  border-radius: 0.1875em; /* 0.1875 * 16 = 3px */</div><div class="line">&#125;</div><div class="line"></div><div class="line">.button--medium &#123;</div><div class="line">  font-size: 130%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.button--large &#123;</div><div class="line">  font-size: 160%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它们将成比例缩放：</p>
<p><a href="http://codepen.io/shadeed/pen/f2de84b1d64c07b5085f2e4dadbca4e1/" target="_blank" rel="external">demo.</a></p>
<h3 id="图片宽／高的成比例缩放"><a href="#图片宽／高的成比例缩放" class="headerlink" title="图片宽／高的成比例缩放"></a>图片宽／高的成比例缩放</h3><p>下面是一个需要让头像图片比署名和发表时间稍大的例子。注意图中的蓝色高亮部分。当我们改变 <code>font-size</code> 大小时，它的高度将发生变化。</p>
<p><img src="http://p3.qhimg.com/t015d06d6466d4221e8.jpg" alt=""></p>
<p>HTML如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;bio&quot;&gt;</div><div class="line">  &lt;img src=&quot;author.jpg&quot; alt=&quot;Photo of author Ahmad Shadeed&quot;&gt;</div><div class="line">  &lt;div class=&quot;bio__meta&quot;&gt;</div><div class="line">    &lt;h3&gt;&lt;b&gt;By:&lt;/b&gt; Ahmad Shadeed&lt;/h3&gt;</div><div class="line">    &lt;time&gt;Posted on August 5, 2016&lt;/time&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>我们不仅将字体的尺寸设置为 em 值，图片的宽高也是一样。并且要确保图片质量足够好，不会因为过度放大而失真。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.bio h3 &#123;</div><div class="line">  font-size: 1em;</div><div class="line">&#125;</div><div class="line">.bio time &#123;</div><div class="line">  font-size: 0.875em;</div><div class="line">&#125;</div><div class="line">.bio img &#123;</div><div class="line">  width: 3.125em;</div><div class="line">  height: 3.125em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="成比例变化的边界"><a href="#成比例变化的边界" class="headerlink" title="成比例变化的边界"></a>成比例变化的边界</h3><p>另一种能用 em 值来设置的属性就是 <code>box-shadow</code>。</p>
<p><img src="http://p4.qhimg.com/t0152ef5abbfcbd1243.jpg" alt=""></p>
<p>我们已经知道，边界的大小可以利用 em 值进行放缩。这里，我们将一个内层的 <code>box-shadow</code> 的高度设为 em 值，从而令其随着文本大小进行缩放。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.headline &#123;</div><div class="line">  box-shadow: inset 0 -0.25em 0 0 #e7e7e7;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/shadeed/pen/2ec1144b424ca7017c22fea52aa01494/" target="_blank" rel="external">demo.</a></p>
<p>注意：在为CSS渐变设置断点颜色时，我们也可以使用这种方法，只需要把断点也设为 em 值即可。</p>
<h3 id="给图标留出位置"><a href="#给图标留出位置" class="headerlink" title="给图标留出位置"></a>给图标留出位置</h3><p>假设在左上角要有一个用自定义图标实现的装饰性引号``。我们应该考虑到字体大小发生变化的情况，这时，相对单位就有用武之地了。</p>
<p><img src="http://p5.qhimg.com/t01252ce7226885b2da.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;blockquote class=&quot;quote&quot;&gt;</div><div class="line">  &lt;p&gt;</div><div class="line">    &lt;span&gt;</div><div class="line">      Building dynamic web components using modular design concepts is awesome. </div><div class="line">      &lt;em&gt;- Ahmad Shadeed&lt;/em&gt;</div><div class="line">    &lt;/span&gt;</div><div class="line">  &lt;/p&gt;</div><div class="line">&lt;/blockquote&gt;</div></pre></td></tr></table></figure>
<p>和上面提到的那样，我们将一切都用相对单位来表示。装饰性SVG图标通过伪元素引入，然后，将该伪元素绝对定位，让其父级元素相对定位，大小用相对单位表示，最后用相对单位表示的padding为伪元素留出足够的空间。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">.quote &#123;</div><div class="line">  position: relative;</div><div class="line">  padding: 1.5em 2em;</div><div class="line">  padding-left: 4.5em;</div><div class="line">  border-radius: 0.3125em;</div><div class="line">&#125;</div><div class="line">.quote p &#123;</div><div class="line">  font-size: 2em;</div><div class="line">&#125;</div><div class="line">.quote span &#123;</div><div class="line">  box-shadow: inset 0 -0.25em 0 0 rgba(255, 255, 255, 0.4);</div><div class="line">&#125;</div><div class="line">.quote:before &#123;</div><div class="line">  content: &quot;&quot;;</div><div class="line">  position: absolute;</div><div class="line">  top: 2.125em;</div><div class="line">  left: 1.875em;</div><div class="line">  background: url(&quot;quotes.svg&quot;) no-repeat;</div><div class="line">  height: 1.875em;</div><div class="line">  width: 1.875em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过这种方法，当我们改变字体大小时，所有的东西都能自由缩放。</p>
<p><img src="http://p5.qhimg.com/t01d7514d96ef5ff183.jpg" alt=""></p>
<p>注意这一过程中，各个元素是如何等比例缩放的，这一效果就像在设计软件中我们全选所有元素，然后同时缩放一样！</p>
<p><img src="http://p8.qhimg.com/t01c5a410544cde30a8.gif" alt=""></p>
<p>如果使用的是像素值，那么缩放的效果就会不尽如人意。特别是小图标，它将要不然离文字特别近，要不然就特别远。</p>
<p><img src="http://p1.qhimg.com/t01d0f5adf19f53edf5.jpg" alt=""></p>
<p>示例如下：</p>
<p><a href="http://codepen.io/shadeed/pen/2ec1144b424ca7017c22fea52aa01494/" target="_blank" rel="external">demo.</a></p>
<h3 id="在图片中添加说明文字"><a href="#在图片中添加说明文字" class="headerlink" title="在图片中添加说明文字"></a>在图片中添加说明文字</h3><p>想象一下有排列成这样的一组的图片和说明文字：</p>
<p><img src="http://p7.qhimg.com/t0191cc0e7479a752da.jpg" alt=""></p>
<p>通过字体大小，我们可以实现大部分设计效果，比如向左向上的偏移大小，padding，甚至阴影效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;figure class=&quot;figure&quot;&gt;</div><div class="line">  &lt;img src=&quot;sunrise.jpg&quot; alt=&quot;Sunrise&quot;&gt;</div><div class="line">  &lt;figcaption&gt;The feeling you got from watching the sunrise is amazing.&lt;/figcaption&gt;</div><div class="line">&lt;/figure&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.figure figcaption &#123;</div><div class="line">  position: absolute;</div><div class="line">  top: 1.25em;</div><div class="line">  left: -1.875em;</div><div class="line">  right: 0;</div><div class="line">  padding: 1em;</div><div class="line">  box-shadow: -0.3125em 0.3125em 0 0 rgba(0, 0, 0, 0.15);</div><div class="line">  font-size: 1.75em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/shadeed/pen/c51b4e5d3e635e1bfc8d9fe499c247d6/" target="_blank" rel="external">demo.</a></p>
<h3 id="装饰性背景"><a href="#装饰性背景" class="headerlink" title="装饰性背景"></a>装饰性背景</h3><p>在标题的后面有个黑色的圆形背景：</p>
<p><img src="http://p0.qhimg.com/t018309de496d228476.jpg" alt=""></p>
<p>让我们首先确保其大小能够随着字体大小的变化而变化。除此之外，还有一些更加微妙的细节。border－radius值和虚线的粗细应该也是成比例变化的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;section class=&quot;block&quot;&gt;</div><div class="line">  &lt;h3 class=&quot;block__title&quot;&gt;Content outline&lt;/h3&gt;</div><div class="line">  &lt;div class=&quot;block__content&quot;&gt;</div><div class="line">    &lt;p&gt;Description to be there....&lt;/p&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">.block__title &#123;</div><div class="line">  position: relative;</div><div class="line">  font-size: 1.5em;</div><div class="line">  padding: 0.5em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.block__title:after &#123;</div><div class="line">  content: &quot;&quot;;</div><div class="line">  position: absolute;</div><div class="line">  left: 0.25em;</div><div class="line">  top: 0;</div><div class="line">  width: 2.5em;</div><div class="line">  height: 2.5em;</div><div class="line">  border-radius: 50%;</div><div class="line">  background: #000;</div><div class="line">  opacity: 0.5;</div><div class="line">  transform: scale(1.75);</div><div class="line">&#125;</div><div class="line"></div><div class="line">.block__title:before &#123;</div><div class="line">  content: &quot;&quot;;</div><div class="line">  margin-left: 0.5em;</div><div class="line">  border-bottom: 0.0625em dashed rgba(255, 255, 255, 0.5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>尽可能的使用相对单位，这能使得每一个元素都能自如缩放：<br><a href="http://codepen.io/shadeed/pen/8993265d72b2dc808ed144ff8a448295/" target="_blank" rel="external">demo.</a></p>
<h3 id="带icon的搜索框"><a href="#带icon的搜索框" class="headerlink" title="带icon的搜索框"></a>带icon的搜索框</h3><p>使用带小图标的button是很常见的，不过，你也可以在input中使用小图标。一个很常见的例子就是用一个放大镜的小图标来表示搜索按钮：</p>
<p><img src="http://p2.qhimg.com/t01321f19b5edda68df.jpg" alt=""></p>
<p>小图标通过<code>background-image</code>来放置，并且给input加了padding－left，以防止文字覆盖小图标。当文字尺寸增加时，我们也应该增加小图标的尺寸。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;form class=&quot;search&quot;&gt;</div><div class="line">  &lt;label for=&quot;search&quot;&gt;Enter keyword:&lt;/label&gt;</div><div class="line">  &lt;input type=&quot;search&quot; id=&quot;search&quot; placeholder=&quot;What are you searching about?&quot;&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.search input &#123;</div><div class="line">  width: 25em;</div><div class="line">  font-size: 1em;</div><div class="line">  padding: 0.625em;</div><div class="line">  padding-left: 2.5em;</div><div class="line">  border-radius: 0.3125em;</div><div class="line">  border: 0.125em solid #b4b4b4;</div><div class="line">  background: url(&quot;search.svg&quot;) left 0.625em center/1.5em 1.5em no-repeat;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所有经典尺寸都被设为了相对单位：padding、border、border－radius等等，此外，我们还给背景位置和背景尺寸也设置了相对单位。现在，一切都可以很好的进行缩放了。</p>
<p><a href="http://codepen.io/shadeed/pen/a9eabeb1090744105254dd52fc2f6a6b/" target="_blank" rel="external">demo.</a></p>
<h3 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h3><p>考虑一个典型的表单勾选框，它有一个可以反复切换的开关：</p>
<p><img src="http://p4.qhimg.com/t013112188be137e583.jpg" alt=""></p>
<p>没有什么是我们不能缩放滴！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;&quot; class=&quot;switch&quot;&gt;</div><div class="line">  &lt;p&gt;Do you want to subscribe?&lt;/p&gt;</div><div class="line">  &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;switch&quot; class=&quot;off-screen&quot;&gt;</div><div class="line">  &lt;label for=&quot;switch&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Do you want to subscribe?&lt;/span&gt;&lt;/label&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.switch label &#123;</div><div class="line">  width: 5.625em;</div><div class="line">  height: 2.5em;</div><div class="line">  border: 0.125em solid #b4b4b4;</div><div class="line">  border-radius: 2.5em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.switch label:before &#123;</div><div class="line">  content: &quot;&quot;;</div><div class="line">  right: 0.25em;</div><div class="line">  top: 0.21875em;</div><div class="line">  width: 2em;</div><div class="line">  height: 2em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完美缩放：</p>
<p><a href="http://codepen.io/shadeed/pen/1179b6e57a4fbe914bf099743b4e6945/" target="_blank" rel="external">demo.</a></p>
<h3 id="只在需要的时候限制行宽"><a href="#只在需要的时候限制行宽" class="headerlink" title="只在需要的时候限制行宽"></a>只在需要的时候限制行宽</h3><p>假如有这样一个内容块：</p>
<p><img src="http://p8.qhimg.com/t01c7c34b616fd55eb8.jpg" alt=""></p>
<p>图中，我们还剩余了许多水平空间。当不做任何限制的时候，行的长度可能会太长，以至于看起来不舒服。设置<code>max-width</code>属性可以很好的限制行的长度。我们可能不会选择以像素为单位（正如之前一直提到的，它不能自由缩放）；也可能不会选择百分比，因为只有在更窄的宽度时，100%才会看起来不错。而相对单位则正好满足各项需求。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;hero&quot;&gt;</div><div class="line">  &lt;h2&gt;This is title for this hero section&lt;/h2&gt;</div><div class="line">  &lt;p&gt;And this paragraph is a sub title, as you know I&apos;m writing an article about using em units to build dynamic components.&lt;/p&gt;</div><div class="line">  &lt;a href=&quot;#&quot;&gt;Read about hero&lt;/a&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.hero h2 &#123;</div><div class="line">  margin-bottom: 0.25em;</div><div class="line">  font-size: 1.75em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.hero p &#123;</div><div class="line">  margin-bottom: 1em;</div><div class="line">  max-width: 28.125em; /* limit line length */</div><div class="line">  font-size: 1.25em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.hero a &#123;</div><div class="line">  display: inline-block;</div><div class="line">  background: #4a90e2;</div><div class="line">  padding: 0.7em 1.5em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在行的最大长度已经被限制住了，当行宽变小的时候，行的长度将会如意料中的那样占满整行。</p>
<p><a href="http://codepen.io/shadeed/pen/df7e6366a508171035ab9d5c96683eb5/" target="_blank" rel="external">See the demo.</a></p>
<h3 id="按钮中的SVG小图标"><a href="#按钮中的SVG小图标" class="headerlink" title="按钮中的SVG小图标"></a>按钮中的SVG小图标</h3><p>人们喜欢图标字体的原因之一是，图标大小是随着文本大小自动变化的。不过，这也可以通过小图标实现。</p>
<p><img src="http://p9.qhimg.com/t0189a628d8aa2512c8.jpg" alt=""></p>
<p>我们用em值设置<code>width</code>和<code>height</code>，然后，小图标就会随着字体大小的缩放而成比例变化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;social&quot;&gt;</div><div class="line">    &lt;li class=&quot;social__item&quot;&gt;</div><div class="line">      &lt;a href=&quot;#&quot;&gt;</div><div class="line">        &lt;svg width=&quot;32&quot; height=&quot;32&quot; viewBox=&quot;0 0 32 32&quot;&gt;</div><div class="line">        &lt;!-- SVG Data --&gt;                    </div><div class="line">        &lt;/svg&gt; </div><div class="line">        Like on Facebook</div><div class="line">      &lt;/a&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">    &lt;li class=&quot;social__item&quot;&gt;</div><div class="line">      &lt;a href=&quot;#&quot;&gt;</div><div class="line">        &lt;svg width=&quot;32&quot; height=&quot;32&quot; viewBox=&quot;0 0 32 32&quot;&gt;</div><div class="line">        &lt;!-- SVG Data --&gt;                    </div><div class="line">        &lt;/svg&gt;  </div><div class="line">        Follow on Twitter</div><div class="line">      &lt;/a&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">    &lt;li class=&quot;social__item&quot;&gt;</div><div class="line">      &lt;a href=&quot;#&quot;&gt;</div><div class="line">        &lt;svg width=&quot;32&quot; height=&quot;32&quot; viewBox=&quot;0 0 32 32&quot;&gt;</div><div class="line">        &lt;!-- SVG Data --&gt;                    </div><div class="line">        &lt;/svg&gt; </div><div class="line">        Follow on Dribbble</div><div class="line">      &lt;/a&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.social__item svg &#123;</div><div class="line">  display: inline-block;</div><div class="line">  vertical-align: middle;</div><div class="line">  width: 2.1875em;</div><div class="line">  height: 2.1875em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/shadeed/pen/06fb18a477bd6f2bf4b4f52db4adc424/" target="_blank" rel="external">demo.</a></p>
<h3 id="列表序号"><a href="#列表序号" class="headerlink" title="列表序号"></a>列表序号</h3><p>假如我们给一个列表设计了经典的序号样式。如下所示，设置如下内容，那么最好确保所有元素都能成比例缩放，否则，可能出现如下问题：</p>
<p><img src="http://p4.qhimg.com/t012d7462bb1ca04e84.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;list&quot;&gt;</div><div class="line">  &lt;li&gt;Go to example.com and click on Register&lt;/li&gt;</div><div class="line">  &lt;li&gt;Enter your email address&lt;/li&gt;</div><div class="line">  &lt;li&gt;Pick a strong password&lt;/li&gt;</div><div class="line">  &lt;li&gt;Congrats! You now have an account&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.list li &#123;</div><div class="line">  position: relative;</div><div class="line">  padding-left: 3.125em;</div><div class="line">  margin-bottom: 1em;</div><div class="line">  min-height: 2.5em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.list li:before &#123;</div><div class="line">  font-size: 1em;</div><div class="line">  width: 2.5em;</div><div class="line">  height: 2.5em;</div><div class="line">  text-align: center;</div><div class="line">  line-height: 2.5em;</div><div class="line">  border-radius: 50%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，就能愉快的缩放了：</p>
<p><a href="http://codepen.io/shadeed/pen/9eb5d1e604e275a2dce29f161aca1809/" target="_blank" rel="external">demo.</a></p>
<h3 id="在列表／警告／模态中定位小图标"><a href="#在列表／警告／模态中定位小图标" class="headerlink" title="在列表／警告／模态中定位小图标"></a>在列表／警告／模态中定位小图标</h3><p>我想你现在应该已经掌握了相对单位的要点，那么就让我们看一些只有例子的demo，进一步的展示相对单位的好处：<br><a href="http://codepen.io/shadeed/pen/67bbdf87c292767549ce1ae0f71861f6/" target="_blank" rel="external">demo.</a></p>
<h3 id="汉堡包菜单图标"><a href="#汉堡包菜单图标" class="headerlink" title="汉堡包菜单图标"></a>汉堡包菜单图标</h3><p>也许你已经通过在元素之外使用伪元素伪造了一个图标。这也是可以缩放的：</p>
<p><a href="http://codepen.io/shadeed/pen/cf7eac4b80b41bd011a6e7699d05bdb1/" target="_blank" rel="external">demo.</a></p>
<h3 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h3><p>我们已经看过如何使用相对单位来控制背景大小。其实，渐变效果中的颜色断点也能通过相对单位来设置。现在就让我们来试试吧：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.box-1 &#123;</div><div class="line">  background: </div><div class="line">    linear-gradient(</div><div class="line">      to right, </div><div class="line">      #4a90e2 0, </div><div class="line">      #4a90e2 0.625em, </div><div class="line">      #1b5dab 0.625em, </div><div class="line">      #1b5dab 1.875em, </div><div class="line">      #4a90e2 0, </div><div class="line">      #4a90e2 3.125em</div><div class="line">    );</div><div class="line">  background-size: 1.25em 100%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/shadeed/pen/c30dacfa463f2862bf845ffd707228b5/" target="_blank" rel="external">See the demo.</a></p>
<h3 id="雪碧图"><a href="#雪碧图" class="headerlink" title="雪碧图"></a>雪碧图</h3><p>用像素来设置一些具有固定大小的元素是更方便的，比如栅格图片。但是，这并不意味着我们就不能通过相对单位来进行设置。如果将背景位置和背景大小通过em结合，我们就可以使用能自由缩放的<a href="https://css-tricks.com/css-sprites/" target="_blank" rel="external">雪碧图</a>了。</p>
<p><a href="http://codepen.io/shadeed/pen/a761b067a8b7094bf58d7c6fe450ece5/" target="_blank" rel="external">See the demo.</a></p>
<hr>
<h3 id="结合em和rem"><a href="#结合em和rem" class="headerlink" title="结合em和rem"></a>结合<code>em</code>和<code>rem</code></h3><p>本文主要使用的是<code>em</code>单位。我们已经确认过，<code>em</code>值是建立在<code>font-size</code>之上的，并且会产生层叠。<code>em</code>还有一个兄弟单位：<code>rem</code>。rem值也是相对的，不过，是相对于根节点的字体大小（e.g.<code>html{}</code>或<code>:root{}</code>）。所以，rem不会和em值一样发生层叠，不过，如果你改变根节点的<code>font-size</code>，rem的值也会相应改变。<br>结合em和rem，我们可以使一些尺寸固定，而让另一些动态变化。例如，你可能希望一些组件中的文字仅仅相对根节点变化，而另一些元素随着更直接的字体大小变化。如下图所示:</p>
<p><img src="http://p5.qhimg.com/t01eac0d726ef186c1c.jpg" alt=""></p>
<p>下面是一个改变直接字体大小对图片大小产生影响的例子：<br><a href="http://codepen.io/shadeed/pen/f7fcc697cb69f606cd45e0a877379337/" target="_blank" rel="external">See the demo.</a></p>
<hr>
<h3 id="使用相对单位建立一个完整的站点"><a href="#使用相对单位建立一个完整的站点" class="headerlink" title="使用相对单位建立一个完整的站点"></a>使用相对单位建立一个完整的站点</h3><p>我创建了一个完整的页面来演示我们如何应用动态组件的概念到现实需求中，而不是仅仅写一些小的demo。</p>
<p><img src="http://p7.qhimg.com/t018916a1889ca7c6e7.jpg" alt=""></p>
<p>这里的一切都是可动态变化的：logo、标签、标题、作者、小节标题、有序列表、表单输入框、按钮、引用。。。</p>
<p><img src="http://p7.qhimg.com/t0193912417769614a6.jpg" alt=""></p>
<p>如果我们将浏览器的默认字体大小从16px增加至20px，下面是整个站点的变化情况：</p>
<p><img src="http://p7.qhimg.com/t01ca5b3a5514f551e4.gif" alt=""></p>
<p>这个效果很棒，对不对？你一定注意到了除了字体之外，其他元素也是动态变化的。这就是<code>em</code>的魅力所在！ ?<br><a href="http://codepen.io/shadeed/full/d616aee645f87445b88df2a47d91dc95/" target="_blank" rel="external">Check out the full page demo.</a></p>
<p>注意，字体大小也会因为媒体查询而变化。</p>
<h3 id="放大"><a href="#放大" class="headerlink" title="放大"></a>放大</h3><p>我们提出的基于em值的设计方式也是和浏览器放大效果兼容的。</p>
<p><img src="http://p2.qhimg.com/t01b7709dc9b4055008.jpg" alt=""><br>然而，基于像素的设计就会出现一些问题：</p>
<p><img src="http://p1.qhimg.com/t011d926b22b1c41ce7.jpg" alt=""></p>
<h3 id="em的挑战"><a href="#em的挑战" class="headerlink" title="em的挑战"></a><code>em</code>的挑战</h3><p>使用em值时，有一样事情要特别注意，那就是当你设置字体大小时，它是基于最近的父级元素明确声明的字体大小值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.parent &#123;  </div><div class="line">  font-size: 20px;</div><div class="line">  .child &#123; </div><div class="line">    /* This is based on 20px, so it&apos;s 30px */</div><div class="line">    font-size: 1.5em;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我想，我们已经把这点说的够明白了。<br>但是，当我们将其他属性的尺寸设为em值时，它基于的值是当前元素新计算出来的字体大小值。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.parent &#123;</div><div class="line">  font-size: 20px;</div><div class="line">  .child &#123;</div><div class="line"></div><div class="line">    /* This is based on 20px, so it&apos;s 30px */</div><div class="line">    font-size: 1.5em;</div><div class="line"></div><div class="line">    /* This is based on 1.5em (not 20px), so it&apos;s also 30px */</div><div class="line">    border: 1em solid black;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同一个元素中的两个不同em值，最后得到的计算值却是相同的，这看起来非常奇怪。</p>
<p>这也再次说明了，em值的继承特性会造成一些困扰。当你在组件中用em设置大小，然后组件发生了层叠，那么尺寸将可能发生难以理解的层叠效果。</p>
<p><img src="http://p3.qhimg.com/t01d4a25adf9eec9852.png" alt=""></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>使用像素设置大小是<strong>难以维护的</strong>。它们不相对于任何元素发生变化。当需要进行缩放时，你要手动的调整它们。这是困难、耗时且易出错的。</li>
<li>使用em值设置大小能够让元素<strong>按字体大小成比例缩放</strong>，所以改变字体大小将会改变元素中所有值的大小（子元素也会发生继承）。</li>
<li>明确的设置字体大小将会阻止用户通过浏览器设置改变他们的默认字体大小，这是<strong>对网页可访问性不利的</strong></li>
</ul>
<h3 id="阅读更多"><a href="#阅读更多" class="headerlink" title="阅读更多"></a>阅读更多</h3><ul>
<li><p><a href="http://simurai.com/blog/2015/09/09/back-to-the-roots" target="_blank" rel="external">Back to the :roots</a></p>
</li>
<li><p><a href="https://css-tricks.com/rems-ems/" target="_blank" rel="external">Font Size Idea: px at the Root, rem for Components, em for Text Elements</a></p>
</li>
</ul>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@yuduxyz" target="_blank" rel="external">谢于中</a><br>链接：<a href="http://www.zcfy.cc/article/1276" target="_blank" rel="external">http://www.zcfy.cc/article/1276</a><br>原文：<a href="https://css-tricks.com/building-resizeable-components-relative-css-units/" target="_blank" rel="external">https://css-tricks.com/building-resizeable-components-relative-css-units/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于css定位，你需要知道的5件事]]></title>
      <url>http://jsgrblog.win/2016/12/10/%E5%85%B3%E4%BA%8Ecss%E5%AE%9A%E4%BD%8D%EF%BC%8C%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%845%E4%BB%B6%E4%BA%8B/</url>
      <content type="html"><![CDATA[<p>近年来前端工程师已经可以通过不同的css布局技巧制作出很复杂的布局。其中有些技巧有很长的历史（比如：<a href="https://drafts.csswg.org/css-box-3/#the-float-property" target="_blank" rel="external">floats</a>）,也有一些是近几年才被青睐的(比如<a href="https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties" target="_blank" rel="external">flexbox</a>)。</p>
<p>在这篇文章中，我们会更加细致地探索一些鲜为人知的关于 <a href="https://drafts.csswg.org/css-position-3/#position-property" target="_blank" rel="external">CSS positioning</a>定位的事情。<br><a id="more"></a><br>在我们开始学习这些事情前，让我们快速浏览当然也是很必要地看一下可用的定位类型。</p>
<h2 id="css中的定位类型一览"><a href="#css中的定位类型一览" class="headerlink" title="css中的定位类型一览"></a>css中的定位类型一览</h2><p><code>position</code>这个css属性允许我们指定元素的定位类型。</p>
<h3 id="css定位选项"><a href="#css定位选项" class="headerlink" title="css定位选项"></a>css定位选项</h3><p><strong>static</strong>是此属性的默认值。这时候，我们称那个元素没有被定位。为了定位它，我们需要改变预定义的类型。<br>为了改变预定义类型，我们将<code>position</code>的属性值设置为下面中的一个：</p>
<ul>
<li><code>relative</code></li>
<li><code>absolute</code></li>
<li><code>fixed</code></li>
<li><code>sticky</code></li>
</ul>
<p>只有设置了之后，我们才能使用offset参数来为我们的元素指定我们想要的位置：</p>
<ul>
<li><code>top</code></li>
<li><code>right</code></li>
<li><code>bottom</code></li>
<li><code>left</code></li>
<li>这些属性的初始值是关键字“auto”</li>
</ul>
<p>我们需要记住一点，当一个元素的<code>position</code>被设置为<code>absolute</code>或者<code>fixed</code>，我们称之为一个<strong>绝对定位元素</strong>。同样，注意一个被定位的元素可以用<code>z-index</code>属性来指定他的堆叠顺序。</p>
<h3 id="CSS定位类型的主要差别"><a href="#CSS定位类型的主要差别" class="headerlink" title="CSS定位类型的主要差别"></a>CSS定位类型的主要差别</h3><p>现在，让我们简单的讨论下这些定位类型之间的<strong>三个关键差别</strong>：</p>
<ul>
<li><p>一个—<em>绝对</em>定位的元素是完全脱离正常流的。邻近的兄弟节点元素会占据它的位子。</p>
</li>
<li><p>一个<em>相对或者粘性</em>定位的元素保留他们的位置。邻近的元素不会占据这个元素保留的空间。然而，这个元素的偏移量（offsets）不会占据空间。他们完全忽略其他的元素，因此这可能会与其他元素相互重叠。</p>
</li>
<li><p>一个<em>绝对（fixed）</em>定位的元素（记住：fixed是absolute定位的一个子类）经常相对于视图的定位（除了一个有<code>transform</code>属性的父元素，最新版本的桌面浏览器都支持这种行为）。</p>
</li>
<li><p>一个粘性的定位元素是相对于最近的可滑动的父元素（比如：<code>overflow:auto</code>）.如果没有这种父元素，它就相对于视图定位。</p>
</li>
</ul>
<p>在接下来的事例中，我们将探索这些类型的定位是如何运行的：</p>
<p>看一下Pen<a href="http://codepen.io/georgemarts/pen/qOqNgm/" target="_blank" rel="external">定位概述</a> by George (<a href="http://codepen.io/georgemarts" target="_blank" rel="external">@georgemarts</a>) 在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上.</p>
<p><em>注意：粘性定位类型依然被认为是实验性的技术，<a href="http://caniuse.com/#search=sticky" target="_blank" rel="external">并且浏览器支持有限</a>.当然，如果你想要，你可以将方法加入不支持的浏览器。鉴于他有限的支持，我们在接下来的文章中不会提到这个属性。</em></p>
<h2 id="绝对定位类型的定位元素"><a href="#绝对定位类型的定位元素" class="headerlink" title="绝对定位类型的定位元素"></a>绝对定位类型的定位元素</h2><p>我相信你们中许多人已经知道绝对定位是如何实现的了。然而这个定位类型是需要技巧的并且容易迷惑新手设计者。</p>
<p>因为这个原因，我决定将此列入鲜为人知的概念列表之中（包括相应的实例），涵盖在这片文章之中。</p>
<p>因此，一个定位类型被设置成绝对定位的元素是相对于它最近的父元素。当然，这仅仅在定位类型不是‘staic’的情况下有效。考虑到这一点，如果元素没有任何定位的父元素，那么它是相对于视图定位。</p>
<p>为了解释这种行为，看下面的在线实例：</p>
<p>看一下Pen<a href="http://codepen.io/georgemarts/pen/dYOpMm" target="_blank" rel="external">绝对定位类型的定位元素</a> by George (<a href="http://codepen.io/georgemarts" target="_blank" rel="external">@georgemarts</a>) 在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上.</p>
<p>在这个实例中，我们给绿盒子一个初始的绝对定位类型，设置他的偏移量（offsets）为<code>bottom:0</code>和<code>left:0</code>。此外，我们不需要给直接父元素（红盒子）一个特定的定位类型。</p>
<p>然而，我们相对定位父元素（比如：一个class为<code>jumbotron</code>的元素）。只要我们改变他父元素的定位类型，注意绿盒子的定位是如何改变的。</p>
<h2 id="绝对定位的元素无视了float-这个属性"><a href="#绝对定位的元素无视了float-这个属性" class="headerlink" title="绝对定位的元素无视了float 这个属性"></a>绝对定位的元素无视了<code>float</code> 这个属性</h2><p>如果一个元素是浮动左或右，而且我们将此定位类型设置为 ‘absolute’ 或者 ‘fixed’ ，那么float的属性就会被设置为 ‘none’ .另一方面，如果我们将定位类型设置成relative，那么元素依然包含浮动的属性。</p>
<p>看一个相关的例子：</p>
<p>看一下Pen<a href="http://codepen.io/georgemarts/pen/WQovLM" target="_blank" rel="external">绝对定位的元素无视了<code>float</code> 这个属性</a> by George (<a href="http://codepen.io/georgemarts" target="_blank" rel="external">@georgemarts</a>) 在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上.</p>
<p>在这个例子中，我们将两个不同的元素定义为 <code>float:right</code>. 注意当红盒子变成了绝对定位的元素，这就无视了 <code>float</code> 属性，然而相对定位的绿盒子保留了他float的值。</p>
<h2 id="内联元素如果被设置为绝对定位，那么他会表现出块级元素的特征"><a href="#内联元素如果被设置为绝对定位，那么他会表现出块级元素的特征" class="headerlink" title="内联元素如果被设置为绝对定位，那么他会表现出块级元素的特征"></a>内联元素如果被设置为绝对定位，那么他会表现出块级元素的特征</h2><p>一个内联元素，如果他的position设置为 absolute或者fixed，那么它就有块级元素的属性。<a href="https://drafts.csswg.org/css-position-3/#dis-pos-flo" target="_blank" rel="external">这张表</a>总结什么类型的元素被转换成块级元素。</p>
<p>这里有一个例子：</p>
<p>看一下Pen<a href="http://codepen.io/georgemarts/pen/xwEymK" target="_blank" rel="external">内联元素如果被设置为绝对定位，那么他会表现出块级元素的特征</a> by George (<a href="http://codepen.io/georgemarts" target="_blank" rel="external">@georgemarts</a>) 在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上.</p>
<p>在这个例子中，我们定义两个不同元素。第一个（比如：绿盒子）为块级元素（比如：div）。第二个（比如：红盒子）为内联元素（如 span）。注意只有绿盒子有显示。</p>
<p>红盒暂时没有出现，因为我们给它的 <code>width</code> 和 <code>height</code>的这两个属性，这属性只能用于块级元素和内联元素。外加，这是一个空元素（不包含任何子元素比如文本节点）。<br><strong>译者ps：不知道是不是这里写错了 宽高属性只能用于块级元素，用在内联元素上，不会有效果</strong></p>
<p>记住如果我们设置定位的类型是absolute或者fixed，元素会呈现出块级元素的特性。</p>
<h2 id="外边距（margins）不会在绝对定位的元素上合并"><a href="#外边距（margins）不会在绝对定位的元素上合并" class="headerlink" title="外边距（margins）不会在绝对定位的元素上合并"></a>外边距（margins）不会在绝对定位的元素上合并</h2><p>默认情况下，当两个垂直外边距互相接触，他们之间的间距会取得两个之间比较大的外边距。这种行为可以理解为<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing" target="_blank" rel="external">外边距合并</a>.</p>
<p>就像在一个浮动的元素上的外边距一样，一个绝对定位元素的外边距不会和其他外边距合并。</p>
<p>思考下下面的例子：</p>
<p>看一下Pen<a href="http://codepen.io/georgemarts/pen/jbVrGd" target="_blank" rel="external">外边距（margins）不会在绝对定位的元素上合并</a> by George (<a href="http://codepen.io/georgemarts" target="_blank" rel="external">@georgemarts</a>) 在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上.</p>
<p>在这个例子中个，最初的元素的外边距等于<code>20px</code>。此外，他的<code>top</code>外边距和父元素的<code>top</code>外边距重叠了，这也是<code>20px</code>。正如你所见，只有当我们绝对定位元素，这个<code>top</code>外边距才不会和父元素的相关外边距重叠。</p>
<p>但是，我们该如何防止外边距合并？当然，我们需要放些东西放去分开他们。</p>
<p>比如说，举个例子，有一点内边距或者边框（我们可以把这条规则用于父元素或者子元素）。另一个选择是添加<code>clearfix</code>类（在我的例子中）到父元素之中。</p>
<h2 id="用px和百分比定位元素"><a href="#用px和百分比定位元素" class="headerlink" title="用px和百分比定位元素"></a>用px和百分比定位元素</h2><p>你用过百分比而不是px来定义定位元素的偏移量（offsets）吗？如果答案是是的，你可能会发现坐标值的计算和你选择的CSS单位是不一样的（比如px或者百分比）。</p>
<p>这看上去有点迷惑，是吧？因此让我看下<a href="https://drafts.csswg.org/css-position-3/#valdef-top-percentage" target="_blank" rel="external">规范</a>中关于声明为百分比的偏移量。</p>
<blockquote>
<p>偏移量是包含框的宽度（对于<code>left</code>或者<code>right</code>）或者高度（对于<code>top</code>和<code>bottom</code>）的百分比。对于黏着定位的元素，偏移量是底部的宽度（对于<code>left</code>或者<code>right</code>）或者高度（对于<code>top</code>和<code>bottom</code>）的百分比。负值也是允许的。</p>
</blockquote>
<p>也就是说，只要我们定义偏移量为百分比，目标元素的定位就依赖于父元素的宽（对于左右的偏移量）和高（对于上下的偏移量）。</p>
<p>下面的例子说明了差别：<br>看一下Pen<a href="http://codepen.io/georgemarts/pen/PPbGbL" target="_blank" rel="external">用px和百分比定位元素</a> by George (<a href="http://codepen.io/georgemarts" target="_blank" rel="external">@georgemarts</a>) 在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上.</p>
<p>在这个例子中，我们用px和百分比移动元素。很明显，当偏移量是px的时候，元素按照我们所期待地移动。又快又好。</p>
<p>相反的是，当我们用百分比作为css单位的时候，元素的定位按照它父元素的尺寸。这里有一个有用的可视化告诉你新位置（用百分比）是如何计算的。</p>
<p><img src="http://p0.qhimg.com/t01dddcccf2f135d7b8.png" alt="New Position"></p>
<p><em>注意：你也已经许知道，<code>transform</code>属性（伴随着不同的<code>translate</code>方法）也可以让我们改变元素的位置。但是，请记住如果我们使用百分比作为css单位，那么元素会相对于他的尺寸定位并且不是相对于父元素尺寸定位（和偏移量（offsets）不一样）。</em></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>我希望这篇文章能够帮助你牢固掌握css定位布局方式并且突出一些可能会迷惑的css概念。 我喜欢你们在下方的评论中分享你们的想法，问题或者建议。感谢你们的阅读。</p>
<p>译者PS：第一次翻译技术类文章，希望对大家有所帮助。</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@cherryvenus" target="_blank" rel="external">cherryvenus</a><br>链接：<a href="http://www.zcfy.cc/article/1390" target="_blank" rel="external">http://www.zcfy.cc/article/1390</a><br>原文：<a href="https://scotch.io/bar-talk/5-things-you-might-not-know-about-the-css-positioning-types" target="_blank" rel="external">https://scotch.io/bar-talk/5-things-you-might-not-know-about-the-css-positioning-types</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[了解并使用 CSS 中的 rem 单位]]></title>
      <url>http://jsgrblog.win/2016/12/10/%E4%BA%86%E8%A7%A3%E5%B9%B6%E4%BD%BF%E7%94%A8CSS%E4%B8%AD%E7%9A%84rem%E5%8D%95%E4%BD%8D/</url>
      <content type="html"><![CDATA[<p>在 SitePoint 上有几篇是以 CSS 单位为主题的文章（比如：<a href="http://www.sitepoint.com/look-at-length-units-in-css/" target="_blank" rel="external">CSS 长度单位一览</a>, <a href="http://www.sitepoint.com/new-css3-relative-font-size/" target="_blank" rel="external">CSS 3 中新的文字大小单位</a>, and <a href="http://www.sitepoint.com/power-em-units-css/" target="_blank" rel="external">CSS 中 em 单位的作用</a>）</p>
<p>今天我们深度了解一下 <strong>rem 单位</strong>，这个单位目前已经得到了优秀浏览器的支持，并且有一些兼容方案来帮助你在低版本的 IE 浏览器中的使用它。</p>
<h3 id="作者的其他作品"><a href="#作者的其他作品" class="headerlink" title="作者的其他作品"></a>作者的其他作品</h3><ul>
<li><a href="https://www.sitepoint.com/front-end-development-internet-explorer/?utm_source=sitepoint&amp;utm_medium=relatedinline&amp;utm_term=&amp;utm_campaign=relatedauthor" target="_blank" rel="external">结束低版本 Internet Explorer 支持后的前端开发</a></li>
<li><a href="https://www.sitepoint.com/cleaning-house-after-internet-explorer/?utm_source=sitepoint&amp;utm_medium=relatedinline&amp;utm_term=&amp;utm_campaign=relatedauthor" target="_blank" rel="external">结束低版本 Internet Explorer 支持后的代码整理</a></li>
</ul>
<a id="more"></a>
<h2 id="什么是-rem"><a href="#什么是-rem" class="headerlink" title="什么是 rem"></a>什么是 rem</h2><p>可能在你使用收音机或者用其他音乐播放器之前，就已经听过“R.E.M.”这个词了。在这个乐队眼中，这个词是“浅睡眠时眼球的快速转动”的缩写，而在 css 中，rem 代表着“以根元素为参照物的 em 单位“。他不会让你抛弃你的宗教信仰也不会让你相信那个远在月球的人，但是它可以帮助你实现一个和谐、平稳的设计。</p>
<p>根据 <a href="http://www.w3.org/TR/2013/CR-css3-values-20130730/#font-relative-lengths" target="_blank" rel="external">W3C 规范</a>中对 1rem 的定义：</p>
<blockquote>
<p>1rem 与等于根元素 <code>font-size</code> 的计算值。当明确规定根元素的 <code>font-size</code> 时，rem 单位以该属性的初始值作参照。</p>
</blockquote>
<p>这就意味着 <code>1rem</code> 等于 <code>html</code> 元素的字体大小（大部分浏览器根元素的字体大小为16px）</p>
<h2 id="Rem-单位-vs-Em-单位"><a href="#Rem-单位-vs-Em-单位" class="headerlink" title="Rem 单位 vs Em 单位"></a>Rem 单位 vs Em 单位</h2><p>使用 em 单位最主要的问题是他们与用户元素相关联。在这种情况下，这些元素可以相互嵌套并且造成意想不到的结果。我们来思考下面一个例子，在根元素的文字大小为默认值 <code>16px</code> 的情况下，我们想要所有列表的字体大小均为 <code>12px</code> :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">  font-size: 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ul &#123;</div><div class="line">  font-size: 0.75em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假如有一个列表是嵌套在另一个列表下，那么内列表的字体大小将会是外列表字体大小的 75%（也就是 <code>9px</code> ），我们仍然可以通过几行代码来解决这个问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ul ul &#123;</div><div class="line">  font-size: 1em;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就可以解决这个问题，然而我们仍需要特别关注那些嵌套特别深的元素。</p>
<p>当使用 rem 单位后，事情就变得简单了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">  font-size: 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ul &#123;</div><div class="line">  font-size: 0.75rem;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当所有尺寸都以根元素的文字大小作为参照后，就不再需要为嵌套的元素单独定义样式了。</p>
<h2 id="使用-rem-单位定义文字大小"><a href="#使用-rem-单位定义文字大小" class="headerlink" title="使用 rem 单位定义文字大小"></a>使用 rem 单位定义文字大小</h2><p>Jonathan Snook 是使用 rem 单位来定义文字大小的先驱，早在 2011 年 5 月，他就发表了题为<a href="http://snook.ca/archives/html_and_css/font-size-with-rem" target="_blank" rel="external">《使用 rem 来定义文字大小》</a> 的文章。和大多数 CSS 开发者一样，他必须去解决在 em 单位在复杂的布局上的一系列问题。</p>
<p>在那时候，老版本的 IE 依然有很大的市场份额，并且他们不可以缩放由 px 来定义的文本。然而，就像我们之前看到的那样，在使用 em 单位的情况下，很容易忘记元素之前的嵌套关系，并且得到一个意想不到的结果。</p>
<p>使用 rem 单位来定义文字的大小最大的问题在于这些值有点难以使用。让我们来看一个例子，假设根元素的文字大小是 16px，我们常用的文字大小转换为 rem 值如下： </p>
<ul>
<li><p>10px = 0.625rem</p>
</li>
<li><p>12px = 0.75rem</p>
</li>
<li><p>14px = 0.875rem</p>
</li>
<li><p>16px = 1rem (base)</p>
</li>
<li><p>18px = 1.125rem</p>
</li>
<li><p>20px = 1.25rem</p>
</li>
<li><p>24px = 1.5rem</p>
</li>
<li><p>30px = 1.875rem</p>
</li>
<li><p>32px = 2rem</p>
</li>
</ul>
<p>正如我们看到的那样，这些值在计算起来非常不方便。因此，Snook 使用一个叫 <strong>62.5</strong> 的方式来解决这个问题。然而这并不是一个创新，因为它早已在 em 单位中运用了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">body &#123; font-size:62.5%; &#125;  /* =10px */</div><div class="line">h1   &#123; font-size: 2.4em; &#125; /* =24px */</div><div class="line">p    &#123; font-size: 1.4em; &#125; /* =14px */</div><div class="line">li   &#123; font-size: 1.4em; &#125; /* =14px? */</div></pre></td></tr></table></figure>
<p>因为 rem 单位与根元素相关联，Snook 改进后的方案变为了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">html &#123; font-size: 62.5%; &#125;  /* =10px */</div><div class="line">body &#123; font-size: 1.4rem; &#125; /* =14px */</div><div class="line">h1   &#123; font-size: 2.4rem; &#125; /* =24px */</div></pre></td></tr></table></figure></p>
<p>有一点值得考虑的是有一些浏览器不支持 rem 单位。因此上面的代码可以按照以下方式来改写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">    font-size: 62.5%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">body &#123;</div><div class="line">    font-size: 14px;</div><div class="line">    font-size: 1.4rem;</div><div class="line">&#125;</div><div class="line"></div><div class="line">h1 &#123;</div><div class="line">    font-size: 24px;</div><div class="line">    font-size: 2.4rem;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>尽管这个解决方案看起来是最好的解决方案，但还是有人不建议使用这种方式。Harry Roberts 写了一篇<a href="http://csswizardry.com/2011/05/font-sizing-with-rem-could-be-avoided/" target="_blank" rel="external">文章</a>，里面记录了他在实际使用 rem 单位过程中的一些感受。从他的观点来看，虽然 <strong>62.5%</strong> 这种解决方案使得计算变得简单（因为字体大小以 px 为单位时的值正好是以 rem 为单位的 10 倍），但是他迫使开发者重写他们网站中的所有文字大小。</p>
<p>Chris Coyier 在 CSS-Tricks 提出了第三种<a href="https://css-tricks.com/rems-ems/" target="_blank" rel="external">解决方案</a>。他的解决方式充分利用了到目前为止我们遇到的三种单位。根元素的长度单位依旧采用 <code>px</code> ，模块用 rem 单位，模块内的元素使用 em 单位。这种方式可以很容易的操作根元素的大小、缩放模块，模块内内容的大小以模块自身文字大小来进行缩放。Louis Lazaris 随后在 <a href="http://www.sitepoint.com/power-em-units-css/" target="_blank" rel="external">CSS 中 em 单位的强大之处</a> 提出了他的观点。</p>
<p>在下面的例子中你可以看出 Chris 的解决方案是怎么工作的：</p>
<p>代码可以看 SitePoint(<a href="http://codepen.io/SitePoint" target="_blank" rel="external">@SitePoint</a>) 在 <a href="http://codepen.io" target="_blank" rel="external">CodePen</a> 写的 <a href="http://codepen.io/SitePoint/pen/XmRaGd/" target="_blank" rel="external">《在 CSS 中使用 em 和 rem 单位的方式》</a>。</p>
<p>正如你看到的那样，没有利用新技术来解决这个问题。可能一些组合方式仅仅被开发者的想象力所限制。</p>
<h2 id="在媒体查询中使用-rem-单位"><a href="#在媒体查询中使用-rem-单位" class="headerlink" title="在媒体查询中使用 rem 单位"></a>在媒体查询中使用 rem 单位</h2><p>在媒体查询中利用 em 和 rem 单位，与“行的最佳长度”的概念密切向关，并能给用户带来流畅的阅读体验。在 2014 年 9 月，Smashing Magazine 在 web typography 发表了一篇名叫<br><a href="http://www.smashingmagazine.com/2014/09/balancing-line-length-font-size-responsive-web-design/" target="_blank" rel="external">尺寸那些事: 在 web 响应式设计中掌握文字大小与行宽度的平衡</a>的文章。最有意思的是，文章给出了行的最佳宽度度，45 到 85 个字符（包括空格和标点符号），65 是最理想的行宽值。</p>
<p>粗略的估计一个字节大小就是 1rem，利用这个方法我们就可以用一种移动优先的方式控制内容的单行文本流：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">  width: 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@media (min-width: 85rem) &#123;</div><div class="line">  .container &#123;</div><div class="line">    width: 65rem;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然而在媒体查询中使用 em 和 rem 单位作为媒体查询的条件时有一个有意思的细节：1 rem，1em 还有浏览器默认文字大小这三值表示这同一个值。这样做的原因可以在<a href="https://drafts.csswg.org/mediaqueries/#units" target="_blank" rel="external">媒体查询规范</a>得到解释（特别强调）:</p>
<blockquote>
<p>询中相对单位都是以一个初始值作为基准，这就意味着这些单位永远不会基于声明的结果。例如：在 HTML 中，<strong>em 单位与用户浏览器或者用户偏好设置中设置的初始文字大小有关，而不是页面上的样式中定义的文字大小</strong>。</p>
</blockquote>
<p>让我们看一个关于这个特性的一个小例子：</p>
<p><a href="http://codepen.io/SitePoint/pen/GpmvaG" target="_blank" rel="external"><strong>在 CodePen 上看一个关于媒体查询的 demo</strong></a></p>
<p>首先，在我们的 HTML 文档中，有一个元素将会展现视口的宽度：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`Document width: &lt;span&gt;&lt;/span&gt;px`</div></pre></td></tr></table></figure>
<p>接下来是两条媒体查询语句，一条是使用 rem 单位，另一条使用 em 单位（这里为了简便，使用了 Sass）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">  font-size: 62.5%; /* 62.5% of 16px = 10px */</div><div class="line"></div><div class="line">  @media (min-width: 20rem) &#123;</div><div class="line">    /* 20*16px = 320px */</div><div class="line">    background-color: lemonchiffon;</div><div class="line">    font-size: 200%;</div><div class="line">    /* 200% of 16px = 32px */</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @media (min-width: 30em) &#123;</div><div class="line">    /* 30*16px = 480px */</div><div class="line">    background-color: lightblue;</div><div class="line">    font-size: 300%; /* 300% of 16px = 48px */（译：原文是48px）</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，我们使用一点 jQuery 在页面上显示视口的宽度，并且在窗口缩放的时候更新这个值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(&apos;span&apos;).text($(window).width());</div><div class="line"></div><div class="line">$(window).on(&apos;resize&apos;, function(e) &#123;</div><div class="line">  $(&apos;span&apos;).text($(window).width());</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在开头，我们使用了 <strong>62.5%</strong> 这个方法来说明，修改根元素字体大小不会对媒体查询产生任何影响。当我们更改窗口的宽度时，我们可以看到在 320 px 时，第一条媒体查询开始起作用，到480px第二条媒体查询开始起作用。任何一条在媒体查询中对文字大小声明的改变都没有起作用。唯一一个可以改变媒体查询中宽度的是在浏览器里更改默认文字大小。</p>
<p>因为这个原因，在媒体查询语句中使用 em 单位还是 rem 单位已经不那么重要了。事实上，无论是<a href="http://foundation.zurb.com/" target="_blank" rel="external">Foundation v5</a>还是最近刚发布的<a href="http://v4-alpha.getbootstrap.com/" target="_blank" rel="external">Bootstrap v4 alpha</a>都在他们的媒体查询中使用了 em 单位。</p>
<h2 id="使用-rem-单位来缩放文档"><a href="#使用-rem-单位来缩放文档" class="headerlink" title="使用 rem 单位来缩放文档"></a>使用 rem 单位来缩放文档</h2><p>我们能发现的第三种使用 rem 单位的方式是去构建可缩放组件。使用 rem 来定义元素的宽度，外边距和内边距<br>通过使用根元素的字体大小作为一个接口使元素缩放一致变为了可能。<br>我们可以通过下面两个例子来看这是怎么起作用的。</p>
<p><a href="http://codepen.io/SitePoint/pen/wKdrwN" target="_blank" rel="external"><strong>使用 rem 来缩放文档实例一</strong></a></p>
<p>在这个例子里，我们通过媒体查询中更改根元素的文字大小。就像上一个章节所讲，这样做的目的是为用户定制不同设备下的不同阅读体验。通过 rem 单位来表示宽度，外边距，内边距，这样所有元素就会基于用户的设备大小缩放。</p>
<p>让我们看另一个例子：</p>
<p>代码可以看 SitePoint(<a href="http://codepen.io/SitePoint" target="_blank" rel="external">@SitePoint</a>) 在 <a href="http://codepen.io" target="_blank" rel="external">CodePen</a> 写的 <a href="http://codepen.io/SitePoint/pen/EVmwjZ/" target="_blank" rel="external">《使用 rem 动态缩放模块》</a></p>
<p>在第二个例子中，我们使用 JavaScript 来做同样的操作。这次用户根据自己的需要手动控制界面的大小。我们可以使用多种方式（可以使用数据库，cookie 还有本地存储）来存储用户数据，这样就可以给用户搭建一个基于用户偏好的个性化系统。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这里总结一下到目前为止我们对 CSS 中 rem 单位的认识。很显然，在项目中使用 rem 有许多优点，比如：响应式，可缩放，增加阅读体验，增加自定义元素的灵活性。rem 虽然不是一个通用的解决方案，但是通过谨慎的使用，它还是可以解决困扰开发者多年的问题。<br>我们每个人都可以去挖掘 rem 的所有潜能。从你的编辑器开始吧，实验并向我们分享您的成果。</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@z591446731" target="_blank" rel="external">耳机</a><br>链接：<a href="http://www.zcfy.cc/article/1411" target="_blank" rel="external">http://www.zcfy.cc/article/1411</a><br>原文：<a href="https://www.sitepoint.com/understanding-and-using-rem-units-in-css/" target="_blank" rel="external">https://www.sitepoint.com/understanding-and-using-rem-units-in-css/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[网页设计和开发的55个顶尖博客]]></title>
      <url>http://jsgrblog.win/2016/12/10/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%BC%80%E5%8F%91%E7%9A%8455%E4%B8%AA%E9%A1%B6%E5%B0%96%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="Top-Blogs-About-Web-Design-And-Web-Development"><a href="#Top-Blogs-About-Web-Design-And-Web-Development" class="headerlink" title="Top Blogs About Web Design And Web Development"></a>Top Blogs About Web Design And Web Development</h1><p><img src="http://p0.qhimg.com/t015b47d6867e672d8c.png" alt="http://p0.qhimg.com/t015b47d6867e672d8c.png"><br><a id="more"></a><br>在这篇推文中，我收集使到一些使得网页设计师和开发人员更方便网站建设的站点。这些站点都有精心编写的，明确的，内容充实的的文章，内容包含对CMS之如WordPress讨论，Photoshop工具，CSS和HTML教程代码，对用户体验的想法（UX）和用户界面（UI）的提示、技巧、资源和赠品。<br>在今天的帖子中，我们将一睹55个最好的网页设计师和开发人员博客和网站。请注意站点不以排名先后论英雄。</p>
<h3 id="1-Web-Designer-Depot"><a href="#1-Web-Designer-Depot" class="headerlink" title="1. Web Designer Depot"></a>1. <a href="http://www.webdesignerdepot.com/" target="_blank" rel="external">Web Designer Depot</a></h3><figure name="db06" id="db06" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01ff670751d5a43289.png" alt=""><br><br></figure>

<p>Web Designer Depot是全球设计师之间的聚集地，在这里有设计师们分享为来帮助发展设计社区功能而分享的文章和教程。 站点主题包括HTML 5，CSS3，响应式设计，排版，可用性，jQuery，移动应用程序，资源，业务，自由职业者，灵感等。</p>
<hr>
<h3 id="2-InstantShift"><a href="#2-InstantShift" class="headerlink" title="2. InstantShift"></a>2. <a href="http://www.instantshift.com/" target="_blank" rel="external">InstantShift</a></h3><figure name="6be5" id="6be5" data-scroll="native"><br><img src="http://p0.qhimg.com/t01ced39b90896d1d2a.jpg" alt=""><br><br></figure>


<p>InstandShift是一个流行于网页设计师和开发人员的社区。有很多关于WordPress，网页设计，CSS，工具，教程，字体，摄影等很多优秀的帖子。</p>
<hr>
<h3 id="3-CSS-Tricks"><a href="#3-CSS-Tricks" class="headerlink" title="3. CSS-Tricks"></a>3. <a href="https://css-tricks.com/" target="_blank" rel="external">CSS-Tricks</a></h3><figure name="e8c6" id="e8c6" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01bb38fc2c7483793b.jpg" alt=""><br><br></figure>

<p>这是由Chris Coyier1人创立最初只涵盖CSS，到现在有11人的团队，涵盖网页设计和开发的各个方面网站。 他们的内容包括文章，视频，代码片段、教程，新闻，基本资料等。</p>
<hr>
<h3 id="4-Hongkiat"><a href="#4-Hongkiat" class="headerlink" title="4. Hongkiat"></a>4. <a href="http://www.hongkiat.com/blog/" target="_blank" rel="external">Hongkiat</a></h3><figure name="1bc7" id="1bc7" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t014f145a5d1ecca4fa.jpg" alt=""><br><br></figure>

<p>这个网站自2007建立年以来，已经为设计师，开发人员，工程师和博主提供了一系列的文章，教程，推荐的工具，提示和技巧。 他们喜欢写关于插件，工具，桌面和移动应用程序，小工具，天才般的想法等任何令人感兴趣的任何东西。</p>
<hr>
<h3 id="5-Six-Revisions"><a href="#5-Six-Revisions" class="headerlink" title="5. Six Revisions"></a>5. <a href="http://sixrevisions.com/" target="_blank" rel="external">Six Revisions</a></h3><figure name="ab52" id="ab52" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t018a046b66448c011e.jpg" alt=""><br><br></figure>

<p>该网站由Jacob Gube于2008年推出，涵盖了设计和构建网站及应用程序的网站设计和开发的整个流程。 他们发表文章，新闻，教程，指南等等。 该网站主题涵盖的范围从Photoshop到自由职业者和之间的一切。</p>
<hr>
<h3 id="6-Smashing-Magazine"><a href="#6-Smashing-Magazine" class="headerlink" title="6. Smashing Magazine"></a>6. <a href="https://www.smashingmagazine.com/" target="_blank" rel="external">Smashing Magazine</a></h3><figure name="2845" id="2845" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01053e16f6bf1d0006.jpg" alt=""><br><br></figure>

<p>这个网站由Vitaly Friedman和Sven Lennartz创立，为设计师和开发人员提供了一系列的文章，教程。站点主题包括设计，用户体验设计，代码，WordPress，移动应用程序和设计，图形等。内容涵盖软件，概念，新闻等，也包括CSS，Photoshop，电子商务，插件，网站主题等等。</p>
<hr>
<h3 id="7-Vandelay-Design"><a href="#7-Vandelay-Design" class="headerlink" title="7. Vandelay Design"></a>7. <a href="http://www.vandelaydesign.com/" target="_blank" rel="external">Vandelay Design</a></h3><figure name="82b4" id="82b4" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01093ab68666675c88.jpg" alt=""><br><br></figure><br>这个网站的重点是提供创意，为小企业主和企业家配备开发他们的经营理念的工具。 他们站点有很多关于网页设计，写作，网络开发等等的文章。 他们也有链接到免费资源，一个包含高级资源的商店，他们通过提供免费的WordPress主题回馈社区。<br><br>————<br><br><br>### 8. <a href="http://thenextweb.com/" target="_blank" rel="external">TheNextWeb (Design &amp; Dev)</a><br><br><figure name="4ccc" id="4ccc" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t018089824cdf2f0aef.jpg" alt=""><br><br></figure>


<p>该网站自2006年成立以来一直致力于国际技术新闻，设计，商业，文化等领域的文章发布。其内容包括入门指南，代码，UX设计，关于交易和课程的链接和新闻，设计活动视频，硬件，软件，评论，即将到来的活动，平面设计等。</p>
<hr>
<h3 id="9-SpeckyBoy"><a href="#9-SpeckyBoy" class="headerlink" title="9. SpeckyBoy"></a>9. <a href="https://speckyboy.com/" target="_blank" rel="external">SpeckyBoy</a></h3><figure name="a19f" id="a19f" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01193862562fda227e.jpg" alt=""><br><br></figure>


<p>Paul Andrew在2007年10月建立了自己的自由职业者站点。现已发展为为一个网页设计杂志站点。 它拥有大量的教程，资源，节省利用的技术，甚至鼓舞人心的艺术。 主题包括网页设计和开发，平面设计，移动开发，广告，设计风格和趋势，技术新闻等。</p>
<hr>
<h3 id="10-A-List-Apart"><a href="#10-A-List-Apart" class="headerlink" title="10. A List Apart"></a>10. <a href="http://alistapart.com/" target="_blank" rel="external">A List Apart</a></h3><figure name="dff5" id="dff5" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t014e16a89c5848ce59.jpg" alt=""><br><br></figure><br>这个网站是由Jeffrey Zeldman于1998年建立的。 该站点文章专注于网页设计灵域，面向设计师，开发人员，建筑师，专家，策略家，项目经理和作家开放。 站点主题包括代码，内容，设计，商业和工业，工具，技术，UX等。<br><br>————<br><br>### 11. <a href="https://www.fastcodesign.com/" target="_blank" rel="external">FastCo Design</a><br><br><figure name="5db2" id="5db2" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t016a4538e9a365c17b.jpg" alt=""><br><br></figure>

<p>这是一本专注于商业和设计之间结合的技术杂志站点。它涵盖了广泛的主题，包括电子，UX，平面设计，建筑，时尚，消费产品等等。 在这里的设计师提供见解，意见，提示，新闻等等更多信息。</p>
<hr>
<h3 id="12-DesignShack"><a href="#12-DesignShack" class="headerlink" title="12. DesignShack"></a>12. <a href="https://designshack.net/" target="_blank" rel="external">DesignShack</a></h3><figure name="ff80" id="ff80" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01c341e8fae4c27bbb.jpg" alt=""><br><br></figure>


<p>这个设计网站发布了启发灵感的网页设计文章、布资源和教程。他们专注于设计和收录了网上最伟大的项目。 他们定期发布教读者创造自己设计的新技术的文章，并分享行业的每日新闻。该站点主题包括网站，排版，商业品牌，快捷方式等等。</p>
<hr>
<h3 id="13-Spoon-Graphics"><a href="#13-Spoon-Graphics" class="headerlink" title="13. Spoon Graphics"></a>13. <a href="http://blog.spoongraphics.co.uk/" target="_blank" rel="external">Spoon Graphics</a></h3><figure name="1a92" id="1a92" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01fdf103c78824dd32.jpg" alt=""><br><br></figure>

<p>这是由Chris Spooner建立的设计博客。 他分享一些贴士，资源和灵感，以帮助各阶段教育水平和技能水平的设计师。内容包括教程，文章，视频，新闻和免费资源的链接。主题专注于平面设计，图形软件，排版，模板，标志等。还有一个只供会员的下载的区域。</p>
<hr>
<h3 id="14-CoDrops"><a href="#14-CoDrops" class="headerlink" title="14. CoDrops"></a>14. <a href="http://tympanus.net/codrops/" target="_blank" rel="external">CoDrops</a></h3><figure name="0539" id="0539" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t019731b1411531587c.jpg" alt=""><br><br></figure>

<p>这个设计博客是由是由网页设计师兼开发人员Manoela Ilic和Pedro Botelho共同搭建完成的。 它开建立之初是想作为实验博客，后面成为一个热衷于分享对网页设计和网站开发的社区。团队成员及其他贡献者一起发布有关最新网络趋势，技术等的文章和教程。站点主题包括教程，赠品，CSS参考目录，在线实验区域，讨论网页设计概念的蓝图，以及包含来自社区的设计和新闻资源的集合。他们还主持有奖问答节目。</p>
<hr>
<h3 id="15-TutorialZine"><a href="#15-TutorialZine" class="headerlink" title="15. TutorialZine"></a>15. <a href="http://tutorialzine.com/" target="_blank" rel="external">TutorialZine</a></h3><figure name="72bb" id="72bb" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01ee9215797dec37e6.jpg" alt=""><br><br></figure>


<p>本网站是由来自保加利亚瓦尔纳的网站开发人员和设计师团队建立的。该站点文章包括小贴士，教程，赠品，编辑，UI，UX，新闻和在线实验。文章内容涵盖很多代码开发，包括HTML5，CSS3，jQuery，JavaScript和PHP。他们甚至有一个免费的jQuery电子书。</p>
<hr>
<h3 id="16-HackingUI"><a href="#16-HackingUI" class="headerlink" title="16. HackingUI"></a>16. <a href="http://hackingui.com/" target="_blank" rel="external">HackingUI</a></h3><figure name="e707" id="e707" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t0197c1dea9df2a5fcc.jpg" alt=""><br><br></figure>

<p>这是一个由Sagi Shrieber和David Tintner创立的在线杂志，主要是针对互动设计和前端开发。 它涵盖设计，代码，赠品，灵感，生产力，素描等各个领域。他们有许多教程和文章，包括Photoshop，CSS，JavaScript，商业，个人生活，免费图标链接，模板，赠品，有趣的网站，评论等等。</p>
<hr>
<h3 id="17-Web-Design-Weekly"><a href="#17-Web-Design-Weekly" class="headerlink" title="17. Web Design Weekly"></a>17. <a href="https://web-design-weekly.com/" target="_blank" rel="external">Web Design Weekly</a></h3><figure name="2d17" id="2d17" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t013b068b06e999e3a9.jpg" alt=""><br><br></figure>

<p>这是由由Jake Bresnehan创建和维护一个周刊杂志和博客网站。杂志包括标题，文章，工具，资源，灵感，工作等。杂志和博客都包括关于编程代码（CSS，HTML等）等文章教程。大多数内容在收录在电子杂志中，并通过电子邮件推送给用户这里非常注重代码。</p>
<hr>
<h3 id="18-David-Walsh"><a href="#18-David-Walsh" class="headerlink" title="18. David Walsh"></a>18. <a href="https://davidwalsh.name/" target="_blank" rel="external">David Walsh</a></h3><figure name="5556" id="5556" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01fdd0f56b65cad3a6.jpg" alt=""><br><br></figure>

<p>这是JavaScript和HTML5专家David Walsh的博客。 它包含大量的文章和教程，主要侧重于前端技术。站点主题包括代码（CSS，HTML，AJAX，JavaScript等），开发软件，资源链接，网站主题，设计概念，演示，移动端，浏览器等。</p>
<hr>
<h3 id="19-Naldz-Graphics"><a href="#19-Naldz-Graphics" class="headerlink" title="19. Naldz Graphics"></a>19. <a href="http://naldzgraphics.net/" target="_blank" rel="external">Naldz Graphics</a></h3><figure name="6b2e" id="6b2e" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t0173ec4a1590f61936.jpg" alt=""><br><br></figure>

<p>这是由Ronald Bien于2008年创建的设计博客。它展示了设计社区里的教程，赠品，灵感，资源等。站点内容包括文章，教程，赠品和WordPress主题。 它有很多的链接到良好的设计示例，免费图标，PSD模板，宣传册设计，标志设计等等。</p>
<hr>
<h3 id="20-Design-Beep"><a href="#20-Design-Beep" class="headerlink" title="20. Design Beep"></a>20. <a href="http://designbeep.com/" target="_blank" rel="external">Design Beep</a></h3><figure name="afd2" id="afd2" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01cd05366eeb3d2784.jpg" alt=""><br><br></figure>

<p>这个博客包含了许多关于设计和开发的主题。主要包括文章，教程，工具，资源，赠品和灵感等几大块。 涵盖了图形，标志，排版，网页设计，Photoshop，WordPress主题和插件，CSS，Illustrator，jQuery等等。 它有很多贴士，下载链接，评论，收藏等。还有一些提示最佳实践的贴士和广泛适用的主题。</p>
<hr>
<h3 id="21-PixelHint"><a href="#21-PixelHint" class="headerlink" title="21. PixelHint"></a>21. <a href="http://pixelhint.com/" target="_blank" rel="external">PixelHint</a></h3><figure name="cfe9" id="cfe9" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01aad06982d31b6741.jpg" alt=""><br><br></figure>

<p>这里是一个专门发布Web UI设计教程网页设计博客。他们还分享免费的供网页设计师和开发人员下载的网站模板和网络资源。 他们讨论网页设计最新趋势和技术方法，以及创建网站UI的最好的方法和技巧。 该博客包含大量的教程和免费资源链接，发展概念和代码教程。 免费资源包括图标和PSD模板。</p>
<hr>
<h3 id="22-PixelBuddha"><a href="#22-PixelBuddha" class="headerlink" title="22. PixelBuddha"></a>22. <a href="https://pixelbuddha.net/" target="_blank" rel="external">PixelBuddha</a></h3><figure name="4708" id="4708" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t015fcf099ca61cad23.jpg" alt=""><br><br></figure><br>这个网站是尼克弗罗斯特和格雷格拉宾。站点内容包含用于Web开发人员的免费且专业的资源。 大多数资源是图形。 资源包括动画，照片，字体，效果，HTML，图标，模板等。站点文章还会讨论如何获取资源。部分高级资源还会有一个免费版本。<br><br>————<br><br>### 23. <a href="http://graphicburger.com/" target="_blank" rel="external">GraphicBurger</a><br><br><figure name="8f13" id="8f13" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t012bda96c6eb5fd858.jpg" alt=""><br><br></figure>

<p>这个网站的从Raul Taciu的Cluj-Napoca，罗马尼亚和专注于高质量的设计资源是免费的。资源包括独有的PSD文件，还有来自世界各地的免费素材。资源包括模型，UI工具包，图标，文字效果，背景等。文章详细讨论了产品，并提供了下载链接。</p>
<hr>
<h3 id="24-Queness"><a href="#24-Queness" class="headerlink" title="24. Queness"></a>24. <a href="http://www.queness.com/" target="_blank" rel="external">Queness</a></h3><figure name="6865" id="6865" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t0165554b981436f35e.jpg" alt=""><br><br></figure>

<p>这是一个专门用于网页设计和开发的博客，其中包含大量教程和代码片段。该站点类别包括技术，教程，网页设计，网站开发，WordPress，JavaScript，移动开发，排版等等。 文章包括新闻，免费资源，资源链接，主题合集等等。</p>
<hr>
<h3 id="25-Inspirationfeed"><a href="#25-Inspirationfeed" class="headerlink" title="25. Inspirationfeed"></a>25. <a href="http://inspirationfeed.com/" target="_blank" rel="external">Inspirationfeed</a></h3><figure name="0914" id="0914" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01984206602da23232.jpg" alt=""><br><br></figure>

<p>该站点由Igor Ovsyannykov管理，提供有关设计，商业，创办企业的精神，WordPress，图形，交易和职场自我成长的信息。文章包括教程，灵感，博客，免费资源，新闻，主题，纹理，壁纸，SEO，社交媒体，标志，字体等等。 还有视频教程和免费资源的链接。</p>
<hr>
<h3 id="26-DesignWoop"><a href="#26-DesignWoop" class="headerlink" title="26. DesignWoop"></a>26. <a href="http://designwoop.com/" target="_blank" rel="external">DesignWoop</a></h3><figure name="7a9e" id="7a9e" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01ac3670a673ad677e.jpg" alt=""><br><br></figure>

<p>这个博客提供了许多文章给设计师和开发人员。站点主题包括工具，赠品，设计理念，灵感，面试，WordPress，主题，插件，方法小贴士，教程等。文章广泛的包含了教程、集合和链接等领域。链接包括CSS动画片段，WordPress主题，图标，排版，优秀的网站设计案例，线框图工具等等。站点的教程包括Photoshop，CSS，Sketch等等。</p>
<hr>
<h3 id="27-CSSReflex"><a href="#27-CSSReflex" class="headerlink" title="27. CSSReflex"></a>27. <a href="http://www.cssreflex.com/" target="_blank" rel="external">CSSReflex</a></h3><figure name="ba3c" id="ba3c" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01e370995d7e2d826d.jpg" alt=""><br><br></figure>

<p>这个网站由来自巴林的Naeem Noor创建并维护，专门面向于网络开发人员、设计师和编程人员。站点提供了很多工具，资源，代码片段和提示。内容包括博客，CSS生成器，CSS滤镜效果，CSS演示，响应式计算器和视频。它讨论许多方面如博客，服务器，UI设计，WYSIWYG生成器，图标，架构，模板，开发人员的浏览器扩展，资源链接等等。</p>
<hr>
<h3 id="28-Viget-Inspire"><a href="#28-Viget-Inspire" class="headerlink" title="28. Viget Inspire"></a>28. <a href="https://www.viget.com/articles" target="_blank" rel="external">Viget Inspire</a></h3><figure name="4604" id="4604" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01689eab54f21fa0e9.jpg" alt=""><br><br></figure>

<p>这个博客来的诞生是来自一个更大的项目，是由布莱恩·威廉姆斯，安迪·兰金和Wynne“流行”威廉姆斯于1999年成立。博客涵盖了设计和各种动效。站点主题包括UX，颜色，可访问性，新闻，事件，实验，实验，品牌管理，APP，游戏，插图，教程等等。</p>
<hr>
<h3 id="29-WinningWP"><a href="#29-WinningWP" class="headerlink" title="29. WinningWP"></a>29. <a href="http://winningwp.com/" target="_blank" rel="external">WinningWP</a></h3><figure name="fa8e" id="fa8e" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t015c54f854f0920f09.jpg" alt=""><br><br></figure>

<p>这是一个曾获奖的博客，由来自伦敦的布林威尔逊建立并运营，专注于WordPress相关的技术和资源，给任何对WordPress感兴趣的人提供有用的提示。站点的内容由来自世界各地的网页设计师，程序员和专业创意者提供。站点主题包括网站主题，插件，代码托管，SEO，安全性，性能，教程，提示，博客，系统组件，设计，营销，社交媒体，新闻，周边趣事等等。 尽管建立网站的初衷是专注于WordPress但也包含其他CMS。</p>
<hr>
<h3 id="30-Designrfix"><a href="#30-Designrfix" class="headerlink" title="30. Designrfix"></a>30. <a href="http://designrfix.com/" target="_blank" rel="external">Designrfix</a></h3><figure name="b8a1" id="b8a1" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t010dca9683345c69d8.jpg" alt=""><br><br></figure>

<p>这个网站致力于提供一个平台给所有志同道合的设计师一起交流技术和分享灵感。它包括灵感，教程，赠品，资源，平面设计，网页设计和商业活动。 主题包括移动平台，内容管理系统，CSS，jQuery，WordPress主题，工具，资源，图标，培训视频链接，插图，UI，UX，编码，Photoshop等等。</p>
<hr>
<h3 id="31-Creative-Overflow"><a href="#31-Creative-Overflow" class="headerlink" title="31. Creative Overflow"></a>31. <a href="http://creativeoverflow.net/" target="_blank" rel="external">Creative Overflow</a></h3><figure name="568b" id="568b" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01813ceb0a55420115.jpg" alt=""><br><br></figure>

<p>这是Jacques van Heerden建立的在线设计杂志。该网站是通过发布文章，建议，教程，资源和灵感以达到激发艺术家变得更好的目的。站点内容包括许多热门主题和目录，如收藏，免费资源，新闻，访谈，WordPress，新闻，赠品等。文章包括有关品牌，WordPress主题，商业发展，电子商务，徽标，营销的信息，甚至为您提供创意商业提供建议如何选择打印机。</p>
<hr>
<h3 id="32-One-Xtra-Pixel"><a href="#32-One-Xtra-Pixel" class="headerlink" title="32. One Xtra Pixel"></a>32. <a href="http://www.onextrapixel.com/" target="_blank" rel="external">One Xtra Pixel</a></h3><figure name="7b9e" id="7b9e" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01cddd1afd4e078bdb.jpg" alt=""><br><br></figure><br>这是一个为新加坡设计师和网站开发人员而设立的在线杂志。站点提供了许多资源，文章，教程和链接。主题包括设计，图形，WordPress，CSS，社交媒体，开发，免费资源，工具包，事件等。提供了一步一步的教程包括有关编写代码，在Photoshop中修改图像。甚至有一个连环图专们针对设计和Web开发的，偶尔也有其他主题的漫画。<br><br>————<br><br><br>### 33. <a href="http://www.noupe.com/" target="_blank" rel="external">Noupe</a><br><br><figure name="ede9" id="ede9" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t0184210711545f023f.jpg" alt=""><br><br></figure>

<p>这是由来自德国的Commindo Media GmbH＆Co. KG建立的博客。站点的内容专门为Web开发人员和设计师而编写的。站点主题包括网页设计，排版，图形，CSS，JavaScript，Ajax，广告，市场营销，WordPress，电子商务，自由职业者，灵感等等。 文章包括设计教程，编写代码，使用图形程序，SEO，免费资源，卡通，主题，插件，提示，技巧等等。</p>
<hr>
<h3 id="34-InstantShift"><a href="#34-InstantShift" class="headerlink" title="34. InstantShift"></a>34. <a href="http://www.instantshift.com/" target="_blank" rel="external">InstantShift</a></h3><figure name="319f" id="319f" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01438f089f669ddfe4.jpg" alt=""><br><br></figure>

<p>这是一个为网页设计师和开发人员设计和提供灵感的博客。它每天都有资源推荐，内容包括灵感，文章，教程，赠品，网页设计，WordPress，字体，CSS，图标，摄影，Photoshop，JavaScript，Illustrator，平面设计，信息图表，案例，logo，新闻和更多。</p>
<hr>
<h3 id="35-WPKUBE"><a href="#35-WPKUBE" class="headerlink" title="35. WPKUBE"></a>35. <a href="https://www.wpkube.com/" target="_blank" rel="external">WPKUBE</a></h3><figure name="7268" id="7268" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01c0546736f38eb6b4.jpg" alt=""><br><br></figure>


<p>这个网站是由Devesh Sharma创立的。它主要集中在WordPress，包括学习指南、教程方法、插件、新闻、评论、提示和技巧、插件、主题，评论、安全、SEO、初学者指南和代码等。 它包括许多资源的链接，例如工具，代码托管和优惠券。站点文章是由WordPress专业人员写的，内容广泛，面向各个级别的从业人士。</p>
<hr>
<h3 id="36-Fresh-Web-Dev"><a href="#36-Fresh-Web-Dev" class="headerlink" title="36. Fresh Web Dev"></a>36. <a href="http://freshwebdev.com/" target="_blank" rel="external">Fresh Web Dev</a></h3><figure name="9404" id="9404" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t014eeebb3d1b7325a7.jpg" alt=""><br><br></figure>

<p>这个网站涵盖网页设计和开发，重点是WordPress，Javascript，CSS，PHP，设计，HTML5和其他各个方面。站点它包括WordPress，Photoshop，编写代码，Linux服务器开发和配置，字体，图形等产品的文章和教程。他们还提供交易和免费资源的链接。内容由专业的设计师和开发人员为其群体所写。</p>
<hr>
<h3 id="37-DesignM-ag"><a href="#37-DesignM-ag" class="headerlink" title="37. DesignM.ag"></a>37. <a href="https://designm.ag/" target="_blank" rel="external">DesignM.ag</a></h3><figure name="f354" id="f354" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t0105a5e523af2ae8a4.jpg" alt=""><br><br></figure>


<p>这是一个基于社区的网站，包括博客，设计图库，用户提交的新闻和招聘专区。博客包括工具，图标，主题，代码片段，字体，图形等资源。教程包括Photoshop，网页设计等。站点主题还包括采访，灵感，WordPress，设计师案例，免费资源，排版，UI等。该站点涵盖了所有的网页设计的方方面面。</p>
<hr>
<h3 id="38-Creative-Market-Blog"><a href="#38-Creative-Market-Blog" class="headerlink" title="38. Creative Market Blog"></a>38. <a href="https://creativemarket.com/" target="_blank" rel="external">Creative Market Blog</a></h3><figure name="8367" id="8367" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01b244f4b062023e76.jpg" alt=""><br><br></figure>

<p>这个博客有很多关于网页设计和前端开发的教程。它包括许多文章和贴士，如字体设计和优化排版，使用Photoshop的小贴士，推荐书籍的列表，解决常见的设计问题的方法论，使用负空间，WordPress，PHP，HTML，CSS，灵感等。目标受众是从初级到高级的网站开发人员和设计师。</p>
<hr>
<h3 id="39-SitePoint"><a href="#39-SitePoint" class="headerlink" title="39. SitePoint"></a>39. <a href="https://www.sitepoint.com/" target="_blank" rel="external">SitePoint</a></h3><figure name="7faf" id="7faf" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01c35fe5c4e3cda660.jpg" alt=""><br><br></figure>

<p>这个博客由Mark Harbottle和Matt Mickiewicz创立。站点提供新颖的想法，概念和新技术等内容，还包括文章、课程、教程、书籍或任何与设计和构建网站相关的内容。网站用户讨论代码（HTML，CSS，PHP，JavaScript和Ruby），移动开发，WordPress，设计，UX，商业运营，以及任何与网络技术相关的内容。</p>
<hr>
<h3 id="40-Web-Design-Ledger"><a href="#40-Web-Design-Ledger" class="headerlink" title="40. Web Design Ledger"></a>40. <a href="https://webdesignledger.com/" target="_blank" rel="external">Web Design Ledger</a></h3><figure name="954b" id="954b" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t011e5050c130ca8fe0.jpg" alt=""><br><br></figure>


<p>这是一个涵盖网页设计和开发且同时提供了大量的资源的博客。站点主题包括网页设计、灵感、UI、图形、访谈、网络开发、评论和内容管理系统。文章包含免费资源链接，时事新闻，APP教程，工具，字体，图标，矢量图形，WordPress，Drupel，Ghost，编码，电子商务，移动开发，可穿戴设备，排版设计等信息的链接。</p>
<hr>
<h3 id="41-envato-tuts"><a href="#41-envato-tuts" class="headerlink" title="41. envato tuts+"></a>41. <a href="https://tutsplus.com/" target="_blank" rel="external">envato tuts+</a></h3><figure name="1c96" id="1c96" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t0112c00ccb3e8981a0.jpg" alt=""><br><br></figure>

<p>这是一个有很多文章的钱打U呢和设计的教程网站。站点类别包括Photoshop，Illustrator，矢量，插图，工具和提示，灵感，新闻，设计，文本效果，CSS，HTML，UX，UI，工作流，设计理论等等。文章针对的是初级阶段，内容十分广泛。还有一些可供订阅的课程。</p>
<hr>
<h3 id="42-HappyCog’s-Cognition-Blog"><a href="#42-HappyCog’s-Cognition-Blog" class="headerlink" title="42. HappyCog’s Cognition Blog"></a>42. <a href="http://cognition.happycog.com/" target="_blank" rel="external">HappyCog’s Cognition Blog</a></h3><figure name="56ea" id="56ea" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01f572b1611c77478a.jpg" alt=""><br><br></figure>


<p>这个博客来自Happy Cog的创始人Jeffrey Zeldman建立的，主要关注设计，经验体会和代码。站点主题包括流程，设计，前端开发，团队，项目管理，社区，职业，战略，公司和客户关系。文章包括案例研究，教程，方法提示，商业运营和客户关系处理，排版，编码，Photoshop等等。大多数文章是是精心编写和详细的理论研究成果。</p>
<hr>
<h3 id="43-WebAppers"><a href="#43-WebAppers" class="headerlink" title="43. WebAppers"></a>43. <a href="http://www.webappers.com/" target="_blank" rel="external">WebAppers</a></h3><figure name="2b96" id="2b96" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t011168eb4ac3b390c4.jpg" alt=""><br><br></figure>

<p>这是一个专门为Web开发人员和设计人员分享开源资源的博客。对于设计师，站点有免费的图标，字体，表，股票照片，画笔和设计灵感。对于开发人员，有很多JavaScript和Ajax组件，如插件，菜单，工具提示，图表，轮转图，日历，模态窗等。它还涵盖代码托管，电子商务，社交媒体，工具，安全，统计等等更多。该站点的文章详细和前沿。</p>
<hr>
<h3 id="44-Web-Field-Manual"><a href="#44-Web-Field-Manual" class="headerlink" title="44. Web Field Manual"></a>44. <a href="http://webfieldmanual.com/" target="_blank" rel="external">Web Field Manual</a></h3><figure name="1fb9" id="1fb9" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01b52d9c0ca57ba27f.jpg" alt=""><br><br></figure>


<p>此博客提供了一个用于UX和UI设计的资源列表。该站点是由网页设计师策划和维护，包含了大量的网页设计文章和资源。主题设计包括人们趋势，灵感，规范的和不规范的风格指南，工作进程，工作流，工具箱，优秀的和拙劣的网格和排版，动画制作的最佳与最坏方式，设计准则的最佳与最坏遵守，和可访问性的最佳与最坏标准。每个类别都有详细的资源列表。站点主题包括编码入门，最佳实践，灵感，参考，流行趋势，性能，CSS/SASS，SVG，JavaScript，工作流，工具箱和各种库。</p>
<hr>
<h3 id="45-UXPin-Blog"><a href="#45-UXPin-Blog" class="headerlink" title="45. UXPin Blog"></a>45. <a href="https://www.uxpin.com/studio/blog/" target="_blank" rel="external">UXPin Blog</a></h3><figure name="1aff" id="1aff" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01930450bd98666b54.jpg" alt=""><br><br></figure>

<p>UXPin是供网页设计师使用的产品设计平台。他们的博客侧重于各方面的各种平台的用户体验。它包含大量关于用户体验设计，移动端，设计趋势，最佳实践，设计小贴士，交互设计，UI设计，网页设计，元素和模式，过程，UXPin，线框，平面设计，团队协作，可用性，原型，草图，样机，Photoshop等等。该站点的文章都非常实用和详细。</p>
<hr>
<h3 id="46-Good-UI"><a href="#46-Good-UI" class="headerlink" title="46. Good UI"></a>46. <a href="https://www.goodui.org/" target="_blank" rel="external">Good UI</a></h3><figure name="8dfc" id="8dfc" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01a796a551a4e92179.jpg" alt=""><br><br></figure>

<p>这是一个致力于制作最好的网站布局，以改善用户界面的网站和博客。网站介绍最佳实践，布局，如何合并功能以达到更简洁的设计。大力推荐使用社交途径，来无论何处可以何处响应行动呼吁，来如何使可点击和可选择的不同样式表，来如何推荐一个选择来帮助用户决策，也提供了允许用户取消错误行为的决策，来具体证明明最佳的受众是谁，来显示更强的对比，使用更少的字段，合理显示所有选项等等。站点的信息都很简短，简单，易于理解。</p>
<hr>
<h3 id="47-Spyre-Studios"><a href="#47-Spyre-Studios" class="headerlink" title="47. Spyre Studios"></a>47. <a href="http://spyrestudios.com/" target="_blank" rel="external">Spyre Studios</a></h3><figure name="a4be" id="a4be" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01fe978827f23fc240.jpg" alt=""><br><br></figure>

<p>这是一个包含很多文章和教程的网页设计和开发电子杂志。站点目录包括设计，展示，非同寻常的灵感，教程，CSS，资源，工具，UX，移动端，免费资源，可用性，商业，排版，Illustrator，Photoshop，极简主义，工具等。还有很多免费下载的元素，图标，字体，PSD模板等。文章的大小合适阅读，包含和很多的分步细节。</p>
<hr>
<h3 id="48-Skyje"><a href="#48-Skyje" class="headerlink" title="48. Skyje"></a>48. <a href="http://skyje.com/" target="_blank" rel="external">Skyje</a></h3><figure name="c2d0" id="c2d0" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t016fe630f295c871de.jpg" alt=""><br><br></figure>

<p>这个博客成立于2008年，是一个面向网页设计师和网页开发人员的网站。主题包括社交网络，新闻和与Web 2.0相关的一切。站点主题包括设计，WordPress，社交媒体，SEO，标志，灵感，教程，免费资源，字体，图标，Photoshop，模板等。教程主要覆盖图形以及重点关注Photoshop。还包括插件、代码（JavaScript和CSS）和Illustrator。</p>
<hr>
<h3 id="49-MonsterPost"><a href="#49-MonsterPost" class="headerlink" title="49. MonsterPost"></a>49. <a href="http://www.templatemonster.com/blog/" target="_blank" rel="external">MonsterPost</a></h3><figure name="48ca" id="48ca" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t014dd0d6addf463999.jpg" alt=""><br><br></figure>

<p>这是世界优秀网页模板站点Template Monster的设计博客。站点主题包括新闻，文章，工具，赠品，灵感，信息图表，WordPress和Joomla。 教程包括文章和视频，并重点关注WordPress，排版，CSS，HTML，jQuery，Photoshop，Illustrator，网络技术，Web开发方法论，以及设计网站和UI元素。</p>
<hr>
<h3 id="50-UX-Matters"><a href="#50-UX-Matters" class="headerlink" title="50. UX Matters"></a>50. <a href="http://www.uxmatters.com/" target="_blank" rel="external">UX Matters</a></h3><figure name="3b16" id="3b16" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01b873e065d6a68110.jpg" alt=""><br><br></figure>

<figure name="b23d" id="b23d" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01e502a8625d89cc32.jpg" alt=""><br><br></figure>

<figure name="5afb" id="5afb" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t018a810c17c59136d1.jpg" alt=""><br><br><figcaption>Here’s the range of topics</figcaption><br><br></figure>


<p>这本网络杂志由Pabini Gabriel-Petit于2005年创立，为UX开发人员提供视野和灵感。它提供了许多有价值的建议，最佳实践，主题观点，以及探索UX设计的战略方面的深层思考的文章。主题包括网页设计，移动端，用户研究，视觉设计，web应用程序设计，设计流程，访谈，评论，内容创建，通信设计，架构，商业，战略等等。</p>
<hr>
<h3 id="51-Usability-Geek"><a href="#51-Usability-Geek" class="headerlink" title="51. Usability Geek"></a>51. <a href="http://usabilitygeek.com/" target="_blank" rel="external">Usability Geek</a></h3><figure name="6a1b" id="6a1b" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01bd35382ff7282f03.jpg" alt=""><br><br></figure>


<p>这个博客开始由Justin Mifsud在2011年建立的，出发点是作为一个提升网站可用性的重要性的兴趣交流网站。Justin想提高网页设计师和开发人员在商业和政治网站可用性设计的意识。站点主题包括可用性，指南，测试，用户体验（UX），商业运营，转换，人机交互（HCI），术语，评论，资源和信息架构（IA）。</p>
<hr>
<h3 id="52-Boxes-and-Arrows"><a href="#52-Boxes-and-Arrows" class="headerlink" title="52. Boxes and Arrows"></a>52. <a href="http://boxesandarrows.com/" target="_blank" rel="external">Boxes and Arrows</a></h3><figure name="7655" id="7655" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t0151fb81554e14562c.jpg" alt=""><br><br></figure>

<p>这是一本2001年开始的同行写的杂志，讨论所有关于设计的东西。站点主题包括交互设计，信息架构，平面设计，甚至商业服务设计。<br>站点目录包括设计原则，发现，研究和测试，过程和方法，界面，可交付成果和文档，书评，会议和活动，软件和工具，以及工作场所和职业。</p>
<hr>
<h3 id="53-Web-Design-Dev"><a href="#53-Web-Design-Dev" class="headerlink" title="53. Web Design Dev"></a>53. <a href="http://www.webdesigndev.com/" target="_blank" rel="external">Web Design Dev</a></h3><figure name="2e13" id="2e13" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t018572f93ee627eff2.jpg" alt=""><br><br></figure>

<p>这个网站专注于网页设计包含所有东西。站点主题包括赠品，网站模板，WordPress主题，Photoshop，Dreamweaver教程，Illustrator，评论，灵感，网站开发，CSS，HTML，合集，编程，网上兼职，访谈和SEO。该站点涵盖了从移动界面设计到开发电子商务网站开发之间的方方面面。</p>
<hr>
<h3 id="54-Impressive-Webs"><a href="#54-Impressive-Webs" class="headerlink" title="54. Impressive Webs"></a>54. <a href="https://www.impressivewebs.com/" target="_blank" rel="external">Impressive Webs</a></h3><figure name="682d" id="682d" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t0138401c716fecdd54.jpg" alt=""><br><br></figure>

<p>这是Louis Lazaris的个人博客，作者是一个自由的网络开发人员，杂志站点SitePoint的HTML/CSS内容的管理编辑，和两本关于HTML/CSS的书的作者。博客内容大多是关于HTML、CSS和JavaScript的文章。Louis在他的博客讨论相关的概念，原则和bug。博客也它包括许多文章、教程，CSS基础，屏幕录像，新闻，评论等等。这个博客站点强调的代码和设计的结合。</p>
<hr>
<h3 id="55-Design-Bombs"><a href="#55-Design-Bombs" class="headerlink" title="55. Design Bombs"></a>55. <a href="http://www.designbombs.com/" target="_blank" rel="external">Design Bombs</a></h3><figure name="924e" id="924e" data-scroll="native"><br><br><img src="http://p0.qhimg.com/t01417ede4b91ba2e8d.jpg" alt=""><br><br></figure>

<p>最初作为一个网页设计展示画廊，现已成为分享网页设计的想法，文章，教程和资源，以帮助网页设计师提升他们技艺的平台。站点内容包括WordPress主题和插件，网站设计的综述，赠品，独家优惠等等。网页设计师可以这里找到很多高品质的资源。</p>
<p>言尽于此，学习之路不止。<br>Have a nice day!</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@AleCC" target="_blank" rel="external">Alecc</a><br>链接：<a href="http://www.zcfy.cc/article/1417" target="_blank" rel="external">http://www.zcfy.cc/article/1417</a><br>原文：<a href="https://medium.com/web-development-zone/top-blogs-about-web-design-and-web-development-57706bb620be#.uhbnrozhw" target="_blank" rel="external">https://medium.com/web-development-zone/top-blogs-about-web-design-and-web-development-57706bb620be#.uhbnrozhw</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS变量和预处理变量有什么不同？]]></title>
      <url>http://jsgrblog.win/2016/12/10/CSS%E5%8F%98%E9%87%8F%E5%92%8C%E9%A2%84%E5%A4%84%E7%90%86%E5%8F%98%E9%87%8F%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>变量是 CSS 预处理器 存在的最主要的原因之一。设置变量的能力是有用的，比如把一个颜色设置成变量，用那个变量贯穿你写的CSS，你会发现它是一致的，抽离的，并且容易修改。你也可以用原生 CSS变量（CSS自定义变量）做同样的事。但是也有一些重要的区别应该搞清楚。<br><a id="more"></a></p>
<h3 id="一个简单的预处理变量的用法像是这样："><a href="#一个简单的预处理变量的用法像是这样：" class="headerlink" title="一个简单的预处理变量的用法像是这样："></a>一个简单的预处理变量的用法像是这样：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$brandColor: #F06D06;</div><div class="line"></div><div class="line">.main-header &#123;</div><div class="line">  color: $brandColor;</div><div class="line">&#125;</div><div class="line">.main-footer &#123;</div><div class="line">  background-color: $brandColor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是使用 <a href="http://sass-lang.com/" target="_blank" rel="external">Sass</a> 写的 SCSS 变量，但是所有的 <strong>CSS预处理器</strong> 都提供这种变量的概念：<a href="http://stylus-lang.com/docs/variables.html" target="_blank" rel="external">Stylus</a>，<a href="http://lesscss.org/features/" target="_blank" rel="external">Less</a>，<a href="https://github.com/postcss/postcss-simple-vars" target="_blank" rel="external">PostCSS</a>，等等。</p>
<p>上面这段代码如果放入浏览器里什么都不会做。因为浏览器不理解这种声明并且忽略它。预处理器需要把它编译成浏览器能够理解的 CSS。这段代码会编译成这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.main-header &#123;</div><div class="line">  color: #F06D06;</div><div class="line">&#125;</div><div class="line">.main-footer &#123;</div><div class="line">  background-color: #F06D06;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它现在是有效的 CSS 了。那个变量是预处理器语言的一个部分，而不是 CSS 本身。一旦编译完成，变量就消失了。</p>
<p>最近，原生 CSS 开始支持 CSS变量，或者叫做 “CSS自定义属性”。它允许你直接在CSS里使用变量。不需要编译。</p>
<h3 id="一个简单的自定义-CSS-属性的用法像这样："><a href="#一个简单的自定义-CSS-属性的用法像这样：" class="headerlink" title="一个简单的自定义 CSS 属性的用法像这样："></a>一个简单的自定义 CSS 属性的用法像这样：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">:root &#123;</div><div class="line">  --main-color: #F06D06;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.main-header &#123;</div><div class="line">  color: var(--main-color);</div><div class="line">&#125;</div><div class="line">.main-footer &#123;</div><div class="line">  background-color: var(--main-color);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这两个例子达到了完全相同的结果。我们可以定义一个颜色，使用两次。</p>
<p>那么，问题来了…… 为什么要使用 <strong>原生CSS</strong> 重复造轮子呢？</p>
<h3 id="为什么你要用原生的-CSS-自定义属性？"><a href="#为什么你要用原生的-CSS-自定义属性？" class="headerlink" title="为什么你要用原生的 CSS 自定义属性？"></a>为什么你要用原生的 CSS 自定义属性？</h3><ul>
<li><p>你用这些属性 <strong>不需要一个预处理器</strong>。</p>
</li>
<li><p><strong>他们是顺序执行的</strong>。 你可以在任何选择器中设置一个变量或覆盖现有变量。</p>
</li>
<li><p>当它们的值变了 (e.g. 媒体查询或其他状态)， <strong>浏览器会在需要的时候重绘</strong>.</p>
</li>
<li><p>你可以访问并且 <strong>用 JavaScript 操纵它们</strong>.</p>
</li>
</ul>
<p>对于顺序执行，这有一个简单的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">:root &#123;</div><div class="line">  --color: red;</div><div class="line">&#125;</div><div class="line">body &#123;</div><div class="line">  --color: orange;</div><div class="line">&#125;</div><div class="line">h2 &#123;</div><div class="line">  color: var(--color);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>任何 <code>h2</code> 都会是 orange，因为所有 <code>h2</code> 都是 <code>body</code> 的孩子，而 <code>body</code> 有更高的应用特权。</p>
<p>你甚至能在媒体查询中重置变量并且把这些变量级联到任何地方去使用，有些事仅用预处理器变量是处理不了的。</p>
<p>查看 <a href="http://codepen.io/chriscoyier/pen/ORdLvq?editors=0110" target="_blank" rel="external">这个例子</a> 当媒体查询改变那些用来设置简单网格的变量：</p>
<p><img src="http://p0.qhimg.com/t01c28f4d0f8b30ab0e.gif" alt=""></p>
<p>Rob Dodson 对 CSS自定义属性的见解 <a href="https://developers.google.com/web/updates/2016/02/css-variables-why-should-you-care" target="_blank" rel="external">CSS 变量：你为什么要关心？</a></p>
<blockquote>
<p>那些 [预处理器] 使用的变量面临一个重要的缺点，那就是它们是静态的，无法在运行时改变。加入可在运行时更改变量的能力，不仅仅为像动态应用主题打开了大门，也对响应式设计和多边形填充的CSS未来潜力具有深远的影响。</p>
</blockquote>
<p>他提到 <a href="https://googlechrome.github.io/samples/css-custom-properties/index.html" target="_blank" rel="external">一个例子</a> 当 JavaScript 改变样式时。它不直接在元素上改变样式，而仅仅是在<strong>运行时</strong>重置一些变量：</p>
<p><img src="http://p0.qhimg.com/t01b546e0e692ac4535.gif" alt=""></p>
<p>Wes Bos 也有一个关于这个的很好示例：</p>
<p>看源码 <a href="https://codepen.io/wesbos/pen/adQjoY/" target="_blank" rel="external">用 JS 更新 CSS 变量</a> by Wes Bos (<a href="http://codepen.io/wesbos" target="_blank" rel="external">@wesbos</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>注意有一大串我留在这的关于 CSS自定义属性的东西。你可以设置回滚。也可以把它们和 <code>calc()</code> 一起使用。你可以有很多技巧使用它们。看下面的家庭作业部分：</p>
<h3 id="为什么使用预处理器变量？"><a href="#为什么使用预处理器变量？" class="headerlink" title="为什么使用预处理器变量？"></a>为什么使用预处理器变量？</h3><ul>
<li><p>最重要的一点：没有传统浏览器支持的条件。它们被编译成一般CSS。</p>
</li>
<li><p>其次：你可以用值传递单位，如果你一定要的话。</p>
</li>
</ul>
<h3 id="你可以一起使用它们"><a href="#你可以一起使用它们" class="headerlink" title="你可以一起使用它们"></a>你可以一起使用它们</h3><p>有很多令人信服的原因去一起使用它们。你绝对可以用一个预处理器生成 CSS自定义属性。Ivan Ivanov 写了一个示例，允许你通过 Sass 写 CSS自定义属性的语法，输出的代码如下：</p>
<p>查看源代码 <a href="http://codepen.io/vank0/pen/kkGvAb/" target="_blank" rel="external">现在就使用 CSS4 变量</a> by $i.van(ov) (<a href="http://codepen.io/vank0" target="_blank" rel="external">@vank0</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>我试图去思考，当我们使用 CSS自定义属性而不用担心浏览器支持时，那我们就用它们去处理所有我们的变量正在处理的事。我们也许还在用预编译器为了其他方便，但是变量处理在原生CSS看起来不错，它可能值得把所有都搬到这个上面来。</p>
<h3 id="关于CSS自定义属性的浏览器支持"><a href="#关于CSS自定义属性的浏览器支持" class="headerlink" title="关于CSS自定义属性的浏览器支持"></a>关于CSS自定义属性的浏览器支持</h3><p>这个浏览器支持数据事从 <a href="http://caniuse.com/#feat=css-variables" target="_blank" rel="external">Caniuse</a>来的，它也报告了这个功能在 W3C 候选推荐位置。</p>
<h4 id="桌面"><a href="#桌面" class="headerlink" title="桌面"></a>桌面</h4><p>Google Chrome，Mozilla Firefox，Internet Explorer，Opera，Apple Safar i4931No369.1</p>
<h4 id="手机-平板电脑"><a href="#手机-平板电脑" class="headerlink" title="手机 / 平板电脑"></a>手机 / 平板电脑</h4><p>iOS Safari，Android，Opera Mobile，Android Chrome，Android Firefox 9.353375349</p>
<h3 id="家庭作业时间-强化"><a href="#家庭作业时间-强化" class="headerlink" title="家庭作业时间: 强化!"></a>家庭作业时间: 强化!</h3><h4 id="1-看-Lea-Verou-的-CSS-变量：-var-–subtitle"><a href="#1-看-Lea-Verou-的-CSS-变量：-var-–subtitle" class="headerlink" title="1) 看 Lea Verou 的 CSS 变量： var(–subtitle);"></a>1) 看 Lea Verou 的 <em>CSS 变量： var(–subtitle);</em></h4><p>她涵盖了大量的实际应用，还有一些技巧例如当变量顺序执行时控制一些陷阱。</p>
<h4 id="2-看-David-Khourshid-的-CSS-的响应式动画【Reactive-Animations-with-CSS】"><a href="#2-看-David-Khourshid-的-CSS-的响应式动画【Reactive-Animations-with-CSS】" class="headerlink" title="2) 看 David Khourshid 的 CSS 的响应式动画【Reactive Animations with CSS】"></a>2) 看 David Khourshid 的 <em>CSS 的响应式动画【Reactive Animations with CSS】</em></h4><p>David 分享了这个主意用CSS变量去连接 DOM 事件，能够做一些非常牛X的UI，而不用太多代码。查看他的网站 (<a href="http://slides.com/davidkhourshid/reactanim#/26" target="_blank" rel="external">从 #26 开始</a>) 那个展示了他是多么牛X。</p>
<h4 id="3-读-Harry-Roberts-Pragmatic-Practical-and-Progressive-Theming-with-Custom-Properties"><a href="#3-读-Harry-Roberts-Pragmatic-Practical-and-Progressive-Theming-with-Custom-Properties" class="headerlink" title="3) 读 Harry Roberts Pragmatic, Practical, and Progressive Theming with Custom Properties"></a>3) 读 Harry Roberts <em>Pragmatic, Practical, and Progressive Theming with Custom Properties</em></h4><p><a href="http://csswizardry.com/2016/10/pragmatic-practical-progressive-theming-with-custom-properties/" target="_blank" rel="external">他的文章</a> 解释怎么用CSS变量让站点的用户自定义主题更容易。</p>
<h4 id="4-阅读-Roman-Komarov-的-关于-CSS-变量的条件【Conditions-for-CSS-Variables】"><a href="#4-阅读-Roman-Komarov-的-关于-CSS-变量的条件【Conditions-for-CSS-Variables】" class="headerlink" title="4) 阅读 Roman Komarov 的 关于 CSS 变量的条件【Conditions for CSS Variables】"></a>4) 阅读 Roman Komarov 的 <em>关于 CSS 变量的条件【Conditions for CSS Variables】</em></h4><p>尽管它已经被所有人谈论很久了，但却没有逻辑门在CSS中 (e.g. <code>@if (true) { }</code>)。我们用一些东西来伪装成逻辑门，比如 <code>:checked</code>，但是那依赖 DOM。 <a href="http://kizu.ru/en/fun/conditions-for-css-variables/" target="_blank" rel="external">Roman 展示了一个技巧</a> 你能够用 <code>0</code> 或 <code>1</code> 在一个变量上，然后通过 <code>calc()</code> 来模拟布尔逻辑。</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@llq" target="_blank" rel="external">千罹</a><br>链接：<a href="http://www.zcfy.cc/article/1567" target="_blank" rel="external">http://www.zcfy.cc/article/1567</a><br>原文：<a href="https://css-tricks.com/difference-between-types-of-css-variables/" target="_blank" rel="external">https://css-tricks.com/difference-between-types-of-css-variables/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何创建响应式删格系统]]></title>
      <url>http://jsgrblog.win/2016/12/10/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%93%8D%E5%BA%94%E5%BC%8F%E5%88%A0%E6%A0%BC%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p>对自定义网页设计来说，最好的补充之一就是定制的响应式栅格系统。你可以自定义你需要的一切，包括有多少列数，列的大小，列之间的间隔，甚至是需要改变布局的临界点。</p>
<p>不幸的是，许多人甚至不会尝试着为他们的网页设计去建立自定义栅格，因为他们缺乏建立那样一个系统的知识和信心。</p>
<p>因此，在这篇文章中，我想帮助大家获得需要建立一个定制的栅格系统所需要的知识和信心。希望你能脱离框架，并且看完这篇文章后可以在你的下一个项目尝试自定义栅格。<br><a id="more"></a></p>
<h2 id="如何开始"><a href="#如何开始" class="headerlink" title="如何开始"></a>如何开始</h2><p>在创建删格系统之前你需要知道三件事情。</p>
<p><strong>首先，设计你的删格</strong>.</p>
<p>你是要使用等宽的还是不等宽的网格列？要有多少列数？间隔和列的大小是多少？</p>
<p>当你回答了上面的问题你只能做出正确的网格计算。为了解决大家的困扰，我写了一篇<a href="https://zellwk.com/blog/designing-grids" target="_blank" rel="external">设计删格</a>。如果你正想学习设计一个删格系统可以读一下。</p>
<p><strong>其次，你需要明确你的删格系统在不同视口的表现</strong></p>
<p>当屏幕视口发生变化时你要实时重新计算列和间隔么？当间隔保持不变时，你要改变列的大小么？在明确的分界点上你要改变删格列的数量么？</p>
<p>你需要好好回答这些问题。在如何计算列宽和间隔宽上，这些会给你一些线索。在提到的那篇<a href="https://zellwk.com/blog/designing-grids/" target="_blank" rel="external">设计删格</a>中我也写了这些要考虑的东西，你不确定这些问题的话可以参考下。</p>
<p><strong>最后，你愿意在HTML里写删格类吗？</strong>.</p>
<p>当涉及到删格系统时，前端世界拆分出两个派系。</p>
<p>一派就是在HTML中写入删格类名（以Bootstrap和Foundation为代表）。我称这一派<strong>HTML删格系统</strong>。HTML像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;container&quot;&gt;</div><div class="line">  &lt;div class=&quot;row&quot;&gt;</div><div class="line">    &lt;div class=&quot;col-md-9&quot;&gt;Content&lt;/div&gt;</div><div class="line">    &lt;div class=&quot;col-md-3&quot;&gt;Sidebar&lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>第二个派系主张在CSS中创建删格。我称之为<strong>CSS 删格系统</strong>。</p>
<p>CSS删格系统的HTML代码相比HTML删格系统的要简单一点。对于同样的页面你需要创建的标签也会少一点。同时，你也不需要记住这些删格类名是什么：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;content-sidebar&quot;&gt;</div><div class="line">  &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;sidebar&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>另一方面，CSS删格系统中的CSS更复杂。你需要仔细想清楚才能取得一个简单的解决方案（如果你从没创建过）。</p>
<p><strong>我会选择什么？</strong></p>
<p>许多前端大牛会选择CSS删格系统。我，也不例外，属于CSS删格派系（当然我不敢称自己是大牛）。</p>
<p>关于我为什么选择CSS删格系统而不是HTML删格系统，我写过<a href="https://zellwk.com/blog/migrating-from-bootstrap-to-susy/" target="_blank" rel="external">另一篇文章</a>，如果你感兴趣可以看下。我还写了<a href="https://zellwk.com/blog/from-html-grids-to-css-grids/" target="_blank" rel="external">从HTML删格到CSS删格</a>，如果你有兴趣做个转换，这篇可以帮你从HTML删格系统迁移到CSS删格系统。<br>(这么多文章… 😢)</p>
<p>总之，这就是在建立删格系统之前你需要明确的三件事。概括下就是：</p>
<ol>
<li><p>系统设计</p>
</li>
<li><p>在不同视口的删格表现</p>
</li>
<li><p>是否使用HTML或者CSS删格系统</p>
</li>
</ol>
<p>如果我们有了这些必要知识我们只需要继续前进就行了。这篇文章的剩下部分就是我们接下来要做的事情：</p>
<ol>
<li>这个删格系统有一个1140px的最大宽度，具备12个75px宽的列以及20px的间隔。（参考<a href="https://zellwk.com/blog/designing-grids/" target="_blank" rel="external">设计删格</a>里如何获得这些数值的提示）</li>
<li>当视口大小变了，在间隔保留20px固定大小的同时应该实时重新计算列宽大小。（在<a href="https://zellwk.com/blog/designing-grids/" target="_blank" rel="external">设计删格</a>中我提到了为什么会选择这种展现形式）</li>
<li>我打算使用CSS删格系统（在<a href="https://zellwk.com/blog/migrating-from-bootstrap-to-susy/" target="_blank" rel="external">这篇文章</a>中有我为什么建议用CSS删格的原因）</li>
</ol>
<p>有了这些，让我们开始吧！</p>
<h2 id="建立删格系统"><a href="#建立删格系统" class="headerlink" title="建立删格系统"></a>建立删格系统</h2><p>建立删格系统有八个步骤，概括如下：</p>
<ol>
<li><p>选择一个标准来创建删格宽度</p>
</li>
<li><p>设置<code>box-sizing</code> 为<code>border-box</code></p>
</li>
<li><p>创建一个删格容器</p>
</li>
<li><p>计算列宽</p>
</li>
<li><p>决定间隔定位</p>
</li>
<li><p>创建一个调试网格</p>
</li>
<li><p>让布局变化</p>
</li>
<li><p>让你的布局响应变化</p>
</li>
</ol>
<p>一旦你想明白了，这八个步骤大部分是相对明确简单的。我会展开每个步骤详细说明其中你需要知道每个事项。</p>
<h2 id="Step-1-选择一个标准"><a href="#Step-1-选择一个标准" class="headerlink" title="Step 1: 选择一个标准"></a>Step 1: 选择一个标准</h2><p>使用CSS删格，FlexBox，或者简单原始的floats来创建删格？对每个标准来说你的考虑事项以及实现细节都会有所不同。</p>
<p>CSS删格是到目前为止三种标准中创建网格最好的工具（因为是网格嘛 😎）。遗憾的是，现在支持CSS删格会留下更多需要被解决的问题（原文：support for CSS grid leaves more to be desired right now）。每个浏览器将CSS删格布局隐藏在一个标志后面，这就是为什么我们不会在这篇文章中去碰它。如果你对CSS删格有兴趣，我强烈建议参考<a href="http://gridbyexample.com" target="_blank" rel="external">Rachel Andrew的作品</a>。</p>
<p>接下来，我们来看看Flexbox和Floats。使用这两个标准的注意事项是相似的，所以你可以挑一个继续跟着这篇文章走下去。这里我将使用Floats，因为它对初学者来说更容易解释理解。</p>
<p>但是如果你选择用Flexbox，请记住这里有一些细微的差别你需要调整。</p>
<h2 id="Step-2-设置box-sizing-为border-box"><a href="#Step-2-设置box-sizing-为border-box" class="headerlink" title="Step 2: 设置box-sizing 为border-box"></a>Step 2: 设置<code>box-sizing</code> 为<code>border-box</code></h2><p><code>box-sizing</code>属性可以改变浏览器用来计算<code>width</code> 和<code>height</code> 属性的默认CSS盒模型。通过改变 <code>box-sizing</code> 为<code>border-box</code>，我们可以更轻松地计算列和间隔的大小（你接下来就会明白为什么）。</p>
<p>下面这张图，总结了<code>width</code>在不同的<code>box-sizing</code> 值下是如何计算的。</p>
<p><img src="http://p0.qhimg.com/t010a809db5f1344b8a.jpg" alt="Box sizing property and how it affects width calculations"></p>
<p>box-sizing属性及其如何影响宽度计算</p>
<p>在一个网站上，我通常将所有元素的<code>box-sizing</code> 值都设为 <code>border-box</code>，这样<code>width</code> 和 <code>height</code>计算全部都保持了一致（还有直观）。就这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">  box-sizing: border-box;</div><div class="line">&#125;</div><div class="line"></div><div class="line">*,</div><div class="line">*:before,</div><div class="line">*:after &#123;</div><div class="line">  box-sizing: inherit;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>提示：如果你需要一个更深入理解<code>box-sizing</code>，我建议你看 <a href="https://zellwk.com/blog/understanding-css-box-sizing/" target="_blank" rel="external">这个</a>.</p>
<h2 id="Step-3-创建一个删格容器"><a href="#Step-3-创建一个删格容器" class="headerlink" title="Step 3: 创建一个删格容器"></a>Step 3: 创建一个删格容器</h2><p>每个栅格有一个决定了它最大宽度的容器。我把它取名为<code>.l-wrap</code>。这个<code>.l-</code>前缀表示layout， 这个是我自从读了<a href="https://twitter.com/snookca" target="_blank" rel="external">Jonathan Snook</a>的<a href="https://smacss.com" target="_blank" rel="external">SMACSS</a>之后一直使用的命名约定。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.l-wrap &#123;</div><div class="line">  max-width: 1140px;</div><div class="line">  margin-right: auto;</div><div class="line">  margin-left: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意：出于可访问性和可响应的目的，我强烈建议使用相对单位比如<code>em</code> 或者<code>rem</code>而不是像素。但这篇文章中，我都使用了像素，因为这比较容易理解。</p>
<h2 id="Step-4-计算列宽"><a href="#Step-4-计算列宽" class="headerlink" title="Step 4: 计算列宽"></a>Step 4: 计算列宽</h2><p>记住，我们使用floats来创建列和间隔。用它的时候，我们只有五个属性可以用（如果用flexbox的话会多一些）；这五个是：</p>
<ul>
<li><p>width</p>
</li>
<li><p>margin-right</p>
</li>
<li><p>margin-left</p>
</li>
<li><p>padding-right</p>
</li>
<li><p>padding-left</p>
</li>
</ul>
<p>如果你还记得，CSS栅格系统的HTML是类似这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;l-wrap&quot;&gt;</div><div class="line">  &lt;div class=&quot;three-col-grid&quot;&gt;</div><div class="line">    &lt;div class=&quot;grid-item&quot;&gt;Grid item&lt;/div&gt;</div><div class="line">    &lt;div class=&quot;grid-item&quot;&gt;Grid item&lt;/div&gt;</div><div class="line">    &lt;div class=&quot;grid-item&quot;&gt;Grid item&lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>从这段HTML中我们了解到这个网格有一行三列，也没有额外的创建间隔的元素，这就是说：</p>
<ol>
<li><p>创建列需要<code>width</code> 属性</p>
</li>
<li><p>创建间隔用<code>margin</code> 或者 <code>padding</code> 属性</p>
</li>
</ol>
<p>如果我们同时思考列和间隔，问题就会变得复杂。所以让我们假设我们先创建一个没有间隔的网格。</p>
<p>这样一个网格的输出就会像这样：</p>
<p><img src="http://p0.qhimg.com/t0116898bf2d5242da0.png" alt="Three-column grid without gutters"></p>
<p>没有间隔的三列网格</p>
<p>这里就是我们需要进行一些计算的地方了。我们知道网格有一个1140px的最大宽度，那么每一列的就是380px(<code>1140 ÷ 3</code>)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.three-col-grid .grid-item &#123;</div><div class="line">  width: 380px;</div><div class="line">  float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到目前为止，一切都很顺利。我们创建了一个在大于1140px的屏幕视口上可以良好展示的网格。但不好的是，当视口小于1140px时就不能正常展示了。<br><img src="http://p0.qhimg.com/t010a43be014ae08291.gif" alt="Grid breaks below 1140px"></p>
<p>小于1140px时网格就成这样了</p>
<p>这就意味着对于网格列我们不能使用像素作为单位。我们需要一个单位可以随视口变化而变化。</p>
<p>这就是说我们不能使用像素作为我们的度量方法。我们需要一个可以根据容器宽度重新计算的单位。唯一可以实现这种方式的单位就是百分比(<code>%</code>)。所以，我们用百分比的方式定义宽度：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.three-col-grid .grid-item  &#123;</div><div class="line">  width: 33.33333%;</div><div class="line">  float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码可以得到一个没有任何间隔的简单三列网格。当浏览器窗口大小改变时，这三列会按比例改变。<br><img src="http://p0.qhimg.com/t01d7231f6977e0bd65.gif" alt="Three columns without gutters"></p>
<p>没有间隔的三列网格</p>
<p>在我们继续之前还有一件事。每当所有的子元素在容器中浮动时，容器的高度就会塌陷。这个现象称为 <a href="https://css-tricks.com/all-about-floats/" target="_blank" rel="external">浮动塌陷</a>。就好像这个容器里不包含任何子元素。<br><img src="http://p0.qhimg.com/t012905ece2a920a107.png" alt="Float collapse. Image from CSS Tricks"></p>
<p>浮动塌陷(图片来自CSS Tricks)</p>
<p>为了解决这个问题，我们需要一个clearfix，像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.three-col-grid:after &#123;</div><div class="line">  display: table;</div><div class="line">  clear: both;</div><div class="line">  content: &apos;&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果你使用像Sass那样的预处理，你可以转换到一个mixin里，这样能让你在不同的地方方便引入同样的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// Clearfix</div><div class="line">@mixin clearfix &#123;</div><div class="line">  &amp;:after &#123;</div><div class="line">    display: table;</div><div class="line">    clear: both;</div><div class="line">    content: &apos;&apos;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Usage</div><div class="line">.three-col-grid &#123; @include clearfix; &#125;</div></pre></td></tr></table></figure></p>
<p>只要完成了列数的部分，接下来就是建立一些间隔了。</p>
<h2 id="Step-5-决定间隔位置"><a href="#Step-5-决定间隔位置" class="headerlink" title="Step 5: 决定间隔位置"></a>Step 5: 决定间隔位置</h2><p>目前看来，我们知道应该用<code>margin</code> 或<code>padding</code>来设计间隔。但是我们应该用哪一个呢？</p>
<p>如果你概览一下，就会快速注意到你有四种可能的方式来设计这些间隔。</p>
<ol>
<li><p>间隔可以通过margins放置在一边</p>
</li>
<li><p>间隔可以通过paddings放置在一边</p>
</li>
<li><p>间隔可以通过margins被相等的分隔在两边</p>
</li>
<li><p>间隔可以通过paddings被相等的分隔在两边</p>
</li>
</ol>
<p><img src="http://p0.qhimg.com/t0162dc3c1a3f967494.png" alt="4 possible ways to create columns and gutters"></p>
<p>创建列和间隔的4种方式</p>
<p>从这里就开始变得复杂了。你需要用不同的方式计算列的宽度，这取决于你用的方法。</p>
<p>我们将会一个一个的讲这些方法，看看它们的不同之处。慢慢来体会吧。</p>
<p>开始咯:</p>
<h3 id="Method-1-单边间隔-Margin"><a href="#Method-1-单边间隔-Margin" class="headerlink" title="Method 1: 单边间隔(Margin)"></a>Method 1: 单边间隔(Margin)</h3><p>用这种方法，是通过<code>margin</code>属性来创建间隔。这个间隔是在列的左边还是右边，这取决于你选择哪边。</p>
<p>为了让初学者明白，假设你选择将间隔放在右边，那么你将要做的是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.grid-item &#123;</div><div class="line">  /* Need to recalculate width property */;</div><div class="line">  margin-right: 20px;</div><div class="line">  float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据这张图你要重新计算列宽：<br><img src="http://p0.qhimg.com/t01d6a5947d51a41bcc.png" alt="One-sided gutters using margins"></p>
<p>使用margins实现的单边间隔</p>
<p>从这张图上可以看到1140px等于三列和两个间隔。</p>
<p>这里有个问题…我们需要用百分比表示列宽，但间隔固定是20px，我们没法同时用两个不同的单位进行计算。</p>
<p>好吧，这在以前是不太可能，但今非昔比了。</p>
<p>你可以使用CSS的<code>calc</code> 方法将其他单位和百分比混合使用。它会重新得到百分比的单位值来快速执行计算。</p>
<p>这样一来你可以将width通过一个函数得到，然后浏览器就会自动为你计算这个值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.grid-item &#123;</div><div class="line">  width: calc((100% - 20px * 2) / 3);</div><div class="line">  /* other properties */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很棒吧！</p>
<p>得到列宽后，你需要删除来自最右边网格列的最后一个间隔。你可以这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.grid-item:last-child &#123;</div><div class="line">  margin-right: 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>多数时候，当你去掉最右边项的最后一个间隔时，你也会想将它浮动在右边防止子像素舍入错误将最后一列放到了下一行导致把网格搞的一团糟。这只是会发生在子像素向上舍入的浏览器中。</p>
<p><img src="http://p0.qhimg.com/t01136daedecd5807c4.png" alt="Subpixel rounding errors might break the grid by pushing the final item to the next row"></p>
<p>子像素舍入错误可能会将最后一项放到下一行造成网格混乱。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.grid-item:last-child &#123;</div><div class="line">  margin-right: 0;</div><div class="line">  float: right;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>唉，终于讲到这里了。还有件事。</p>
<p>到现在为止，代码还算不错，如果你的网格只包含一行。但是，如果有多行，这些代码可不会剪切网格。<br><img src="http://p0.qhimg.com/t01d5b2e55f6ef2073c.png" alt="Our code fails if there&#39;s more than one row"></p>
<p>如果有多行，我们的代码就行不通了。<br>我们需要做的是去掉每一行的最右边项的右边距。实现这种最好的方式是用<code>nth-child()</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/* For a 3-column grid */</div><div class="line">.grid-item:nth-child(3n+3) &#123;</div><div class="line">  margin-right: 0;</div><div class="line">  float: right;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这就是用margins实现单边间隔你所需要的所有代码。在codepen上你可以看看。</p>
<p>查看 <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上<a href="http://codepen.io/zellwk/pen/mAYqrL/" target="_blank" rel="external">用margins实现的单边间隔网格</a> by Zell Liew (<a href="http://codepen.io/zellwk" target="_blank" rel="external">@zellwk</a>).</p>
<p>注意：Calc方法在IE8和Opera mini上不起作用。如果你需要支持这两种浏览器的话，可能得考虑其他方法。</p>
<h3 id="Method-2-单边间隔-Padding"><a href="#Method-2-单边间隔-Padding" class="headerlink" title="Method 2: 单边间隔 (Padding)"></a>Method 2: 单边间隔 (Padding)</h3><p>和用margins实现的单边间隔类似，这种方式也是要求你将间隔放在列的一边。假设还是选择的右边。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.grid-item &#123;</div><div class="line">  /* width property */</div><div class="line">  padding-right: 20px;</div><div class="line">  float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后，你可以通过这张图重新计算列宽。<br><img src="http://p0.qhimg.com/t01d4aa991b7f81ed65.png" alt="One-sided gutters using padding"></p>
<p>用padding实现的单边间隔</p>
<p>注意到宽度和上一种方式的不同了么？因为我们把<code>box-sizing</code>属性转换成<code>border-box</code>了。所以现在<code>width</code>的计算包括了<code>padding</code>值。</p>
<p>在这种情况下，三列中前两列比最后一个要宽，这样最终会导致奇怪的计算结果以及难以理解的CSS代码。</p>
<p>我建议千万不要尝试这种方式。（如果你继续这样，代码会变得非常丑陋。请在你风险控制范围内尝试！）</p>
<h2 id="Method-3-拆分间隔-Margin"><a href="#Method-3-拆分间隔-Margin" class="headerlink" title="Method 3: 拆分间隔 (Margin)"></a>Method 3: 拆分间隔 (Margin)</h2><p>用这种方式，你得把间隔分成2个并将它们分别置于在列的两边。代码像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.grid-item &#123;</div><div class="line">  /* Width property */</div><div class="line">  margin-right: 10px;</div><div class="line">  margin-left: 10px;</div><div class="line">  float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后，根据下面这张图计算列宽：<br><img src="http://p0.qhimg.com/t019e52b11aed401609.png" alt="Split gutters with margin"></p>
<p>用margin拆分间隔</p>
<p>根据之前我们了解到的，你需要用<code>calc()</code>方法来计算列宽。对于现在这种情况，你要从100%的宽度里去掉三个间隔，再除以3就得到列宽了。换言之，列宽等于<code>calc((100% - 20px * 3) / 3)</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.grid-item &#123;</div><div class="line">  width: calc((100% - 20px * 3) / 3);</div><div class="line">  margin-right: 10px;</div><div class="line">  margin-left: 10px;</div><div class="line">  float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>就这样！（对于多行网格其实没有其他额外需要做的 😉）。下面是代码展示：<br>查看 <a href="http://codepen.io/zellwk/pen/BLZJza/" target="_blank" rel="external">用margins实现网格间隔拆分</a> by Zell Liew (<a href="http://codepen.io/zellwk" target="_blank" rel="external">@zellwk</a>).</p>
<h2 id="Method-4-拆分间隔-Padding"><a href="#Method-4-拆分间隔-Padding" class="headerlink" title="Method 4: 拆分间隔 (Padding)"></a>Method 4: 拆分间隔 (Padding)</h2><p>这个和上一个类似。也是拆分间隔并分别放在列两边。但这次，是使用padding来替换间隔。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.grid-item &#123;</div><div class="line">  /* width property */</div><div class="line">  padding-right: 10px;</div><div class="line">  padding-left: 10px;</div><div class="line">  float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后，再像下面这样计算列宽：<br><img src="http://p0.qhimg.com/t01cdedfaff45f684a3.png" alt="Split gutters with padding"></p>
<p>通过padding拆分间隔</p>
<p>注意到这次计算列宽是不是简单多了？这就对啦，每一列分界点刚好将网格分成三等份。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.grid-item &#123;</div><div class="line">  width: 33.3333%;</div><div class="line">  padding-right: 10px;</div><div class="line">  padding-left: 10px;</div><div class="line">  float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上代码:</p>
<p>查看 <a href="http://codepen.io/zellwk/pen/ORYzQV/" target="_blank" rel="external">padding实现的拆分间隔网格</a> by Zell Liew (<a href="http://codepen.io/zellwk" target="_blank" rel="external">@zellwk</a>).</p>
<p>在我们继续开始之前，如果你用padding分拆间隔的话给你一个小警告。仔细看一下Codepen上的标签，你就会发现我在.grid-item里添加了一个额外的子元素，如果组件包含背景或者边框的话这个是必须的。</p>
<p>这是因为背景会显示在padding属性上。下面这幅图应该可以解释为什么（希望可以），展示了<code>background</code>和其他属性间的关系。</p>
<p><img src="http://p0.qhimg.com/t0135de77b90cc796de.jpg" alt="Background is shown on the padding property"></p>
<p>背景显示在padding上</p>
<h3 id="我会用什么？"><a href="#我会用什么？" class="headerlink" title="我会用什么？"></a>我会用什么？</h3><p>当我两年前开始写栅格时，我几乎手写栅格，通过<a href="https://zellwk.com/blog/designing-grids/#how-big-should-columns-and-gutters-be-" target="_blank" rel="external">自上而下的分析</a>设计，内置一个<a href="how-the-grid-responds-to-different-viewports">混合系统</a>。在那样的系统/方法里，列宽和间隔值我都是使用的百分比。</p>
<p>在那时候，我喜欢单边设置间隔的简单。对我来说，这样有较少的认知负荷，因为我实在不擅长数学。额外的<code>间隔÷2</code>的计算就可以让我迅速放弃。</p>
<p>我还是感激我继续那样做。尽管CSS看起来比拆分间隔更复杂，但我强迫自己学习<a href="https://css-tricks.com/examples/nth-child-tester/" target="_blank" rel="external">恰当使用nth-child</a>。我还知道了编写 <a href="https://zellwk.com/blog/how-to-write-mobile-first-css/" target="_blank" rel="external">mobile-first CSS</a>的重要性，据我所知，无论对于初学还是有经验的开发者，这仍然是主要障碍。</p>
<p>然而，如果你现在让我选择，<strong>我会选择拆分间隔</strong>而不是单边间隔，因为这样CSS会更简单。同时，<strong>我更愿意用margin</strong>而不是padding，因为这样可以有更干净的标签。（但是padding更容易计算，所以在剩下的篇幅中我会继续使用padding的方式。）</p>
<h2 id="Step-6-创建调试网格"><a href="#Step-6-创建调试网格" class="headerlink" title="Step 6: 创建调试网格"></a>Step 6: 创建调试网格</h2><p>当你开始时，有一个控制网格帮你调试布局会尤其管用。它可以帮助你确保你是在正确地创建东西。</p>
<p>在这一点上，我只知道一个蹩脚的创建调试网格的方式。就是创建HTML元素，再在上面添加样式CSS。HTML如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;fixed-gutter-grid&quot;&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>针对调试网格的CSS如下（为了减少调试网格的标签，我使用的是用margins拆分间隔）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.column &#123;</div><div class="line">  width: calc((100% - 20px * 12) / 12);</div><div class="line">  height: 80px;</div><div class="line">  margin-right: 10px;</div><div class="line">  margin-left: 10px;</div><div class="line">  background: rgba(0, 0, 255, 0.25);</div><div class="line">  float: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>查看代码 <a href="http://codepen.io/zellwk/pen/ALkyAA/" target="_blank" rel="external">Fixed gutter debug grid</a> by Zell Liew (<a href="http://codepen.io/zellwk" target="_blank" rel="external">@zellwk</a>) 。</p>
<p>（边注：Miriam 和 Robson正打造一个<a href="https://github.com/oddbird/susy/issues/609" target="_blank" rel="external">Susy v3上的SVG-背景图片调试网格</a>。这令人超级鸡冻啊，因为你可以用一个简单的函数就能创建调试网格！）</p>
<h2 id="Step-7-创建可变的布局"><a href="#Step-7-创建可变的布局" class="headerlink" title="Step 7: 创建可变的布局"></a>Step 7: 创建可变的布局</h2><p>下一步就是根据内容创建可变的布局。这就是CSS栅格系统闪光的地方。替代了通过写重复的栅格类来创建布局，你可以根据内容创建合理的类名。</p>
<p>比如，假设你有一个只用于客户文章的网格布局。桌面上布局看起来像这样：</p>
<p><img src="http://p0.qhimg.com/t01eb39984bee34faf1.png" alt="Example grid layout that&#39;s only used for guest articles"></p>
<p>仅用于客户文章的网格布局示例</p>
<p>标签组织可以是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;l-guest-article&quot;&gt;</div><div class="line">  &lt;div class=&quot;l-guest&quot;&gt; &lt;!-- Guest profile --&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;l-main&quot;&gt;&lt;!-- main article--&gt;&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;l-sidebar&quot;&gt;&lt;!-- sidebar widgets--&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>看起来很舒服。现在我们有12列。每一列的宽是8.333%<code>(100 ÷ 12)</code>。</p>
<p><code>.l-guest</code>的宽度是两列。所以，就是8.333% 乘2，就这么简单。以此类推。</p>
<p>这里，我建议使用Sass这样的预处理器，这样可以轻松地用<code>percentage</code> 函数计算列宽，就不用手动计算了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">.l-guest-article &#123;</div><div class="line">  @include clearfix;</div><div class="line">  .l-guest &#123;</div><div class="line">    // Ahem. More readable than 16.666% :)</div><div class="line">    width: percentage(2/12);</div><div class="line">    padding-left: 10px;</div><div class="line">    padding-right: 10px;</div><div class="line">    float: left;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  .l-main &#123;</div><div class="line">    width: percentage(7/12);</div><div class="line">    padding-right: 10px;</div><div class="line">    padding-left: 10px;</div><div class="line">    float: left;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  .l-sidebar &#123;</div><div class="line">    width: percentage(3/12);</div><div class="line">    padding-right: 10px;</div><div class="line">    padding-left: 10px;</div><div class="line">    float: left;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>查看代码 <a href="http://codepen.io/zellwk/pen/pEmLzY/" target="_blank" rel="external">Content-sidebar-layout with fixed-gutter grid</a> by Zell Liew (<a href="http://codepen.io/zellwk" target="_blank" rel="external">@zellwk</a>) .</p>
<p>你可能已经发现到现在有很多重复的代码。我们可以通过抽出公共的部分到一个单独的选择器比如<code>.grid-item</code>里来优化它。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.grid-item &#123;</div><div class="line">  padding-left: 10px;</div><div class="line">  padding-right: 10px;</div><div class="line">  float: left;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.l-guest-article &#123;</div><div class="line">  .l-guest &#123; width: percentage(2/12);&#125;</div><div class="line">  .l-main &#123; width: percentage(7/12);&#125;</div><div class="line">  .l-sidebar &#123; width: percentage(3/12); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>干净多了 :)</p>
<h2 id="Step-8-使布局响应"><a href="#Step-8-使布局响应" class="headerlink" title="Step 8: 使布局响应"></a>Step 8: 使布局响应</h2><p>最后一步就是让布局可响应。假设我们的客户文章布局按照下面的方式响应：<br><img src="http://p0.qhimg.com/t01aa5ac18a1c2f5476.png" alt="How guest the guest article layout respond to different viewports"></p>
<p>对于不同视口文章布局如何响应</p>
<p>我们标签不用变。我们现在已经有了可能是最易理解的布局。所以，要改变的完全应该是CSS。</p>
<p>当写响应式布局的CSS时，我强烈建议你写<a href="https://zellwk.com/blog/mobile-first-css/" target="_blank" rel="external">mobile first css</a>，因为它能让你的代码更简单优雅。我们可以开始优先对手机端布局写CSS。<br>上代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.l-guest-article &#123;</div><div class="line">  .l-guest &#123; /* nothing goes here */ &#125;</div><div class="line">  .l-main &#123;</div><div class="line">    margin-top: 20px;</div><div class="line">  &#125;</div><div class="line">  .l-sidebar &#123;</div><div class="line">    margin-top: 20px;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们不需要再做什么，因为每个组件默认是占满宽度。然而，我们可以添加一些上边距到最后两项上，从而使元素相互分开。</p>
<p>接下来，我们移动到平板端的布局。</p>
<p>对于这个，假设在分界点是700px时触发。<code>.l-guest</code>应该是4列（一共12列）， <code>.l-main</code> 和<code>.l-sidebar</code>每个应该是8列。</p>
<p>这里，我需要去掉<code>.l-main</code> 的<code>margin-top</code> 属性，因为它需要和<code>.l-guest</code>排成一行。</p>
<p>而且，如果我们设置<code>.l-sidebar</code>为8列的宽度，那它会自动浮动到第二行，因为第一行没有足够的空间可以容纳它。既然显示在第二行了，我们也需要在<code>.l-sidebar</code> 上添加一些左边距来将它放到合适的位置；要不然，我们将它浮动在右边。（我还是把它浮动在右边吧，这样不需要什么计算）。</p>
<p>最后，一旦我们浮动这些网格项，网格容器就需要一个clearfix来清除它们。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">.l-guest-article &#123;</div><div class="line">  @include clearfix;</div><div class="line">  .l-guest &#123;</div><div class="line">    @media (min-width: 700px) &#123;</div><div class="line">      width: percentage(4/12);</div><div class="line">      float: left;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  .l-main &#123;</div><div class="line">    margin-top: 20px;</div><div class="line">    @media (min-width: 700px) &#123;</div><div class="line">      width: percentage(8/12);</div><div class="line">      margin-top: 0;</div><div class="line">      float: left;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  .l-sidebar &#123;</div><div class="line">    margin-top: 20px;</div><div class="line">    @media (min-width: 700px) &#123;</div><div class="line">      width: percentage(8/12);</div><div class="line">      float: right;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后一点，让我们来看看桌面布局。</p>
<p>对这种布局，我们假设触发的分界点是1200px。<code>.l-guest</code>应该是总宽的2/12,<code>.l-main</code>应该是7/12，<code>.l-sidebar</code> 是3/12.</p>
<p>我们要做的就是在每个网格项上创建一个新的媒体查询，再根据需要改变宽度。得注意也需要去掉<code>&#39;,l-sidebar</code>上的margin-top属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">.l-guest-article &#123;</div><div class="line">  @include clearfix;</div><div class="line">  .l-guest &#123;</div><div class="line">    @media (min-width: 700px) &#123;</div><div class="line">      width: percentage(4/12);</div><div class="line">      float: left;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @media (min-width: 1200px) &#123;</div><div class="line">      width: percentage(2/12);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  .l-main &#123;</div><div class="line">    margin-top: 20px;</div><div class="line">    @media (min-width: 700px) &#123;</div><div class="line">      width: percentage(8/12);</div><div class="line">      margin-top: 0;</div><div class="line">      float: left;</div><div class="line">    &#125;</div><div class="line">    @media (min-width: 1200px) &#123;</div><div class="line">      width: percentage(7/12);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  .l-sidebar &#123;</div><div class="line">    margin-top: 20px;</div><div class="line">    @media (min-width: 700px) &#123;</div><div class="line">      width: percentage(8/12);</div><div class="line">      float: right;</div><div class="line">    &#125;</div><div class="line">    @media (min-width: 1200px) &#123;</div><div class="line">      width: percentage(3/12);</div><div class="line">      margin-top: 0;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终布局的代码：<br>查看<a href="http://codepen.io/zellwk/pen/qaGvxm/" target="_blank" rel="external">guest-article layout with fixed-gutter grid (final)</a> by Zell Liew (<a href="http://codepen.io/zellwk" target="_blank" rel="external">@zellwk</a>).</p>
<p>（噢，顺便说一下，你也可以用Susy实现这些效果。只要记住设置 <a href="https://zellwk.com/blog/susy-gutter-positions/" target="_blank" rel="external">间隔位置</a>为<code>inside-static</code>）</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>哇哦！文章是挺长的。写这篇文章我也是写到死了几次了。（感谢你能从头读到尾。我希望你看下来没有吐血）（ps:其实翻译的有点快吐血了）</p>
<p>正如你看到的，创建一个响应式栅格系统的步骤是相对简单直观的。人们最容易混乱的部分是第五步（决定间隔位置）以及第8步（使布局可响应）。</p>
<p>当你想通了所有可能的方法步骤5还是挺简单的，而且我们已经将所有的方法串在一起讲了。第8步呢，从另一个角度讲，也是容易解决的，一旦你有足够的写<a href="https://zellwk.com/blog/mobile-first-css/" target="_blank" rel="external">优先移动端CSS</a>的实践练习。</p>
<p>希望这篇文章已经教给你建立响应式栅格系统的方法，也希望可以在你下个项目中用到自定义栅格系统。</p>
<p>期待那时的到来！</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@camiler" target="_blank" rel="external">camiler</a><br>链接：<a href="http://www.zcfy.cc/article/1643" target="_blank" rel="external">http://www.zcfy.cc/article/1643</a><br>原文：<a href="https://zellwk.com/blog/responsive-grid-system" target="_blank" rel="external">https://zellwk.com/blog/responsive-grid-system</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[既然写CSS很容易，那为什么大家还是把CSS写的那么烂呢？]]></title>
      <url>http://jsgrblog.win/2016/12/10/%E6%97%A2%E7%84%B6%E5%86%99CSS%E5%BE%88%E5%AE%B9%E6%98%93%EF%BC%8C%E9%82%A3%E4%B8%BA%E4%BB%80%E4%B9%88%E5%A4%A7%E5%AE%B6%E8%BF%98%E6%98%AF%E6%8A%8ACSS%E5%86%99%E7%9A%84%E9%82%A3%E4%B9%88%E7%83%82%E5%91%A2%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>在你开始阅读这篇文章之前，一定要做好心理准备。因为我写的 90％ 都是在发牢骚，只有最后大概 10% 介绍 CSS 技巧之最佳实践。提前给你们打好预防针啦。</p>
<p><img src="http://p0.qhimg.com/t019e6fb41afe19a33f.jpg" alt="important does not fix your bad css"></p>
<a id="more"></a>
<p>前端工程师在职业发展中可能会遇到以下困境：</p>
<ul>
<li><p>某个阶段，感觉(自己所做的)工作没有任何难度</p>
</li>
<li><p>为团队创造的价值越来越低啦</p>
</li>
<li><p>自己做的事情，大家都能做</p>
</li>
</ul>
<p>同意的请举手。如果你确实是这样，（恭喜你）说明你是多数派。</p>
<p>而且说句实在话，CSS 确实很简单。另外我可以保证，就算是傻子也能写出下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">p &#123;</div><div class="line"></div><div class="line">color: red;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么你还有什么好抱怨的？堆纯 CSS 代码，不需要任何技巧。而且只给单个元素添加全局样式，而不用考虑其他 CSS，当然是非常简单的。</p>
<h3 id="那么CSS到底难在哪儿？"><a href="#那么CSS到底难在哪儿？" class="headerlink" title="那么CSS到底难在哪儿？"></a>那么CSS到底难在哪儿？</h3><p><img src="http://p0.qhimg.com/t013a4f67b29c95260f.png" alt="one does not simply mess with css"></p>
<p>后端开发工程师：“虽然我已经完成新功能的开发，但是我弄乱了前端，不过你放心，我已经修好绝大部分，所以你前端只需要对细节进行微调，时间应该不会超过 30 分钟”</p>
<p>于是我打开HTML文件，(吃惊地)发现到处都是弃用的HTML标签，而且丝毫没有考虑过响应式设计。深呼吸，(暗示自己)，他们写的CSS肯定会稍微好点。然而在我打开CSS文件之后，发现(同样)到处都是类似固定(fixed)定位、清除左浮动、右浮动以及!important的代码，于是我慢慢的把鼠标绕在脖子上。（别拦我，让我死）</p>
<p>（安慰自己），也许他们写出的代码不会一直这么糟糕，但是（在现实中）我几乎没见过后端工程师写出能用的前端代码的。也还好啦，写前端代码本来就不是后端工程师的职责所在。但是请后端工程师不要随便写一堆前端代码，然后指望前端工程师帮你擦屁股。</p>
<h3 id="所以好的CSS长啥样？"><a href="#所以好的CSS长啥样？" class="headerlink" title="所以好的CSS长啥样？"></a>所以好的CSS长啥样？</h3><p><img src="http://p0.qhimg.com/t015af266b6ed948282.jpg" alt="you don&#39;t have to put all your sass files in the same folder"></p>
<p>(项目的)组织结构。尤其是当你做过大型项目，就会发现项目的组织结构真的很重要。举个正面例子——Steven Bradley 写的<a href="http://vanseodesign.com/css/sass-directory-structures/" target="_blank" rel="external"><a href="http://vanseodesign.com/css/sass-directory-structures/" target="_blank" rel="external">利于维护代码的目录结构</a></a>，这篇文章是为 SCSS 项目写的，不过也适用于普通的 CSS 项目。它重点强调如何将 CSS 文件模块化，形成便于维护的文件。</p>
<p>规范。这可能是我每天所遇到的最大问题。不幸的是，大部分工程师对<a href="https://developer.mozilla.org/en/docs/Web/CSS/Specificity" target="_blank" rel="external"><a href="https://developer.mozilla.org/en/docs/Web/CSS/Specificity" target="_blank" rel="external">CSS规范</a></a>的理解一知半解，正是因为这样，才导致糟糕的 CSS 代码（如 !important）烂大街。那我们该如何避免呢？下面列出了很多值得参考的命名约定，它们旨在减少写死的（非常依赖文档结构的） CSS 选择器。假设你对此不感冒，我还是要劝你如无必要，避免使用超过 3 层的 CSS 类/元素选择器。</p>
<p>命名约定。恕我直言，对于任何一个大型的 CSS 项目来说，命名约定是标配。没有命名约定，CSS 就会变得既难维护又不可靠。命名约定可以让我们轻松地重用项目中的 CSS，如有必要，还能帮我们剔除项目中多余的 CSS。这里仅列举几种比较流行的命名约定，如：<a href="http://getbem.com/introduction/" target="_blank" rel="external"><a href="http://getbem.com/introduction/" target="_blank" rel="external">BEM</a></a>，<a href="http://oocss.org/" target="_blank" rel="external"><a href="http://oocss.org/" target="_blank" rel="external">OOCSS</a></a>，<a href="https://smacss.com/" target="_blank" rel="external"><a href="https://smacss.com/" target="_blank" rel="external">SMACSS</a></a>以及我自己写的<a href="https://github.com/CrashyBang/hiccup" target="_blank" rel="external"><a href="https://github.com/CrashyBang/hiccup" target="_blank" rel="external">hiccup</a></a>。</p>
<p>测试。在这一点上，绝大多数其它工程师可能都没发现当后端工程师有多爽。 因为后端工程师的开发工作只需要让一个环境（网站所在的服务器）正常即可。你知道作为前端工程师最痛苦的事情是什么吗？5 个以上的浏览器以及上千种移动设备……好的前端测试工作其实是个苦差，且耗时很长。我见过很多项目延期，就因为没有把前端测试考虑进去，而通常前端测试花费的时间会超出常人预期。</p>
<h3 id="所以如何扭转这种对CSS的天真看法？"><a href="#所以如何扭转这种对CSS的天真看法？" class="headerlink" title="所以如何扭转这种对CSS的天真看法？"></a>所以如何扭转这种对CSS的天真看法？</h3><p><img src="http://p0.qhimg.com/t01aeac5c241603c602.jpg" alt="i&#39;m working on css over here!"></p>
<p>在以后工作中，再也不能让后端工程师们抱有侥幸心理。作为前端工程师，我们不会随便把一堆无响应式的 CSS 代码丢给后端工程师，然后撒手不管。所以凭什么他们就能写无用的烂代码，然后在他们的 CSS 代码失效时让我们去打补丁？我不是说要让后端工程师好好写 CSS 代码，而是我们应该告诉后端工程师，如果觉得写 CSS 很难的话，就不要写。别让其他工程师觉得前端很简单，前端才不简单呢，我们前端工程师跟其他人一样努力地工作，别让他们看走眼。</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@liuliangsir" target="_blank" rel="external">liuliangsir</a><br>链接：<a href="http://www.zcfy.cc/article/1683" target="_blank" rel="external">http://www.zcfy.cc/article/1683</a><br>原文：<a href="https://hackernoon.com/if-css-is-so-easy-why-does-everyone-suck-e4442cc9428a#.bq9c1sev1" target="_blank" rel="external">https://hackernoon.com/if-css-is-so-easy-why-does-everyone-suck-e4442cc9428a#.bq9c1sev1</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[流畅web动画的十个法则]]></title>
      <url>http://jsgrblog.win/2016/12/10/%E6%B5%81%E7%95%85web%E5%8A%A8%E7%94%BB%E7%9A%84%E5%8D%81%E4%B8%AA%E6%B3%95%E5%88%99/</url>
      <content type="html"><![CDATA[<p>自从我们去年登陆了<a href="https://gyrosco.pe/" target="_blank" rel="external"><em>Gyroscope</em></a>，许多人都问我有关用在我们网站上的javascript动画库。我们考虑过将此开源，但是这不是魔法真正实现的地方。</p>
<p>我不希望大家认为我们是依靠特殊的javascript插件来解决这些问题的。对于大部分人来说，我们只是充分利用了近来浏览器性能的提升，GPU和CSS3规格.</p>
<p>对于良好的动画性能没有高招，除了将大量的时间放在测试和优化。然而，过了许多年的实验和撞击浏览器性能的极限，我们发现了一系列的设计和代码准则，看上去似乎是良好动画可靠的结果。这些技术让你的页面，在现代桌面和手机浏览器上变得流畅，运行良好。最重要的是，易于维护。</p>
<p><img src="http://p0.qhimg.com/t01127208383af267ed.gif" alt=""><br><a id="more"></a></p>
<p>对每个人来说，技术和实现方式都有所不同，但是大体上的规则对大多是情况都会有帮助。</p>
<h3 id="什么是动画？"><a href="#什么是动画？" class="headerlink" title="什么是动画？"></a>什么是动画？</h3><p>动画在互联网出现之前就已经饱经世故了，并且如果你想做好它，这会是你一生的课题。然而对于应用于互联网的动画，有一些特别的约束和挑战。</p>
<p>对于60帧的流畅动画，每一帧都需要在16ms内渲染！这并没有多少时间，因此为了流畅的性能，我们需要找到非常有效的方法来渲染每一帧。</p>
<p><img src="http://p0.qhimg.com/t013e0b852373af9835.gif" alt=""></p>
<p><img src="http://p0.qhimg.com/t0146d29814a6cdc280.gif" alt=""><br><img src="http://p0.qhimg.com/t01cea2a1a8ba49dadb.gif" alt=""><br><a href="http://the12principles.tumblr.com/" target="_blank" rel="external">一些经典的动画规则</a></p>
<p>T<br>在web上有一打方法做动画。比如，幻灯片是一种方法，在互联网之前就已经流行，通过轻微不同的手绘帧，在一秒内多次置换，来创造运动的视觉效果。</p>
<p>最近Twitter使用这种简单的方法，制作了新的爱心动画，通过切换一组雪碧图切换实现。</p>
<p><img src="http://p0.qhimg.com/t014b3b3c722b70bbf3.png" alt=""></p>
<p>这个效果不能用一堆小元素单独做动画，或者做一个SVG，但是那样会产生十分不必要的复杂以及可能会不流畅。</p>
<p><img src="http://p0.qhimg.com/t01c22edb1dcb830d14.gif" alt=""></p>
<p>在许多例子中，你会想用CSS transition属性来做自动动画。这个技术也同样以“补间动画”闻名，在两个不同的值之间的过渡。这个好处就是，你可以轻易地取消，而不需要建立所有的逻辑。这个对于“一劳永逸”样式的动画是理想的解决方式，就像介绍序列，等等，或者简单如悬停的交互。</p>
<p>延伸阅读: <a href="https://blog.alexmaccaw.com/css-transitions" target="_blank" rel="external">你需要知道关于CSS Transitions的事</a></p>
<p><img src="http://p0.qhimg.com/t01bd1905f5c91073f1.gif" alt=""></p>
<p>在其他例子中，关键帧为基础的CSS动画属性也许对于不间断运行的背景细节是非常理想的。举个例子，在Gyroscope logo上的戒指计划是不间断地旋转。其他受益于CSS动画语法的是齿轮速比。</p>
<p>因此，事不宜迟，这里有些建议能够帮助你很大程度上地提高你的动画性能……</p>
<blockquote>
<p>#1</p>
</blockquote>
<h3 id="不要改变除了opacity和transform之外的参数！"><a href="#不要改变除了opacity和transform之外的参数！" class="headerlink" title="不要改变除了opacity和transform之外的参数！"></a>不要改变除了opacity和transform之外的参数！</h3><p><em>即使你觉得这样ok，也不要这么做!</em></p>
<p>仅仅这一个基本的准则能帮你解决80%的问题，即使是在手机上。你可能在之前听过这个——这不是最初的主意，但是是很少被跟随。这相当于是web的“吃的健康和运动”的相同法则，这个听上去是一个好的建议，但是你可能会无视。</p>
<p>一旦你如此想了，你会发现这个相对简单，但是可能会是一个大跳跃，对这些习惯传统CSS属性的动画。</p>
<p>举个例子，如果你想让元素变小，你可以使用<em>transform: scale()</em>，而不是改变他的宽度。如果你想移动他，不同于用外边距或者内边距混在一起——你可以仅仅使用一个简单的<em>transform: translateX</em>或者<em>transform: translateY</em>。</p>
<h4 id="为什么这个是有效的？"><a href="#为什么这个是有效的？" class="headerlink" title="为什么这个是有效的？"></a>为什么这个是有效的？</h4><p>对于人类来说，改变宽度，外边距或者其他属性，看上去不是很大的交易——因为它更简单，看上去更好——但是电脑需要做的事情和人类比起来简直是天壤之别，他要做的更加多更加槽糕。</p>
<p>浏览器团队花费了很大的力气在优化这些操作。Transforms真的很简单就能提高效率，并且经常能够充分利用你的图形界面，而不用重新渲染元素。</p>
<p>第一次载入页面的时候，你可能会抓狂——在所有的角落，使用图片，在每个元素上加上阴影，如果你觉得特别粗糙，你甚至可以加上一个动态模糊。如果这只发生一次，一些额外的毫秒时间计算并不影响。但是一旦内容重新渲染，你不会想重新计算所有的内容。</p>
<p>延展阅读：<a href="https://www.paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/" target="_blank" rel="external">用translate移动元素 (Paul Irish)</a></p>
<blockquote>
<p>#2</p>
</blockquote>
<h3 id="将内容藏在不起眼的地方"><a href="#将内容藏在不起眼的地方" class="headerlink" title="将内容藏在不起眼的地方"></a><em>将内容藏在不起眼的地方</em></h3><p><em>使用pointer-events:通过透明度为0来隐藏元素</em></p>
<p>这个属性也许会有浏览器兼容的问题，但是如果你只是为webkit或者其他现代浏览器做东西，这会让你的生活更美好。</p>
<p>过去很长一段时间，当动画需要通过jQuery的animate()处理的时候，许多渐变元素的复杂来自切换“display“属性实现的：在一个合</p>
<p>CSS的pointer-events属性（这已经存在了很长时间了，但是不经常用），让元素不回应任何点击和交互，就像他们不在那边一样。它可以简单地通过CSS切换开启和关闭，而不通过打断动画或者以任何方法影响渲染/可见性。</p>
<p>与opacity为0结合使用，他基本上和display：none是一样的效果，但是不触发新的渲染而影响性能。当隐藏元素时，我可以常常只设置opacity为0，并且关闭pointer-events，然后遗忘元素，他会自己照顾自己。</p>
<p>这和绝对定位的元素一起工作地特别好，因为你会十分有信心，它对页面其他的元素完全没有影响。</p>
<p>这也给你更多的回旋余地，因为定时并不完美——这不是世界末日，如果一个元素是可点击的或者在其他元素上遮盖一秒或者更长，或者如果这仅仅能被点一次，然后就隐藏起来了。</p>
<blockquote>
<p>#3</p>
</blockquote>
<h3 id="不要同一时间所有元素都做动画"><a href="#不要同一时间所有元素都做动画" class="headerlink" title="不要同一时间所有元素都做动画"></a>不要同一时间所有元素都做动画</h3><p><em>除非使用编排</em></p>
<p>一个单独的动画自己是流畅的，但是同一时间许多元素都做动画，就会扰乱他们。创建单个的流畅动画很简单——但是一个数量级的动画就很难确保性能达到满分。因此，合理地规划特别重要。</p>
<p>将时间分开，那么所有的元素都不在一个相同的时间开始。典型的是，2，3个可以在同一时间运行，而不需要减速，特别是如果他们在稍不同的时间开始动画。</p>
<p>除非你的页面上只有一个元素，不然理解<em>编排</em>是很重要的。这可能看上去像一个舞蹈编排，但事对于动画接口来说是同样重要的。元素需要在一个合适得位置合适的时间进入。及时他们都是分开的，他们必须感觉是设计好的的一个单元。</p>
<p>Google素材设计在这个主题上又很有意思的建议。这不仅仅是做事的正确方式，也是你需要考虑的事情和测试。</p>
<p><img src="http://p0.qhimg.com/t01ec60db7e77e8df6d.png" alt=""></p>
<p>延伸阅读： <a href="https://material.google.com/motion/material-motion.html" target="_blank" rel="external">Google素材设计 · 动机</a></p>
<blockquote>
<p>#4</p>
</blockquote>
<h3 id="轻微地增加延迟，让编排动作变得简单"><a href="#轻微地增加延迟，让编排动作变得简单" class="headerlink" title="轻微地增加延迟，让编排动作变得简单_"></a>轻微地增加延迟，让编排动作变得简单_</h3><p>编排动画真的十分重要，并且需要十分多的实验和测试才能找到感觉。然而，他的代码并不十分复杂。</p>
<p>我通常会改变父元素上的一个Class（通常是在body上），来触发一系列变化，每一个在特定的时间有自己的过度延迟。从代码观点来说，你只需要关心状态改变，并且不需要在javascript中维护一堆定时。</p>
<p><img src="http://p0.qhimg.com/t01dd5118782727aa5a.gif" alt=""></p>
<p> <a href="https://gyrosco.pe/chrome/" target="_blank" rel="external">Gyroscope Chrome 扩展</a>的动画</p>
<p>交错安排一系列元素，是最简单的编排你的元素的方法。这很强大，因为这同时看上去很好，同时也带来了珍贵的性能——记住只有一小部分元素在同一时间开始。你会将他们分开直至感觉足够流畅，但是不要分得太开，导致整体看上去太慢。足够应该是重叠，这感觉像一个不间断的流，而不是一系列独立的个体元素。</p>
<h4 id="代码样例"><a href="#代码样例" class="headerlink" title="代码样例"></a>代码样例</h4><p>这里有一系列简单的技巧，交错排序你的元素——特别是如果是一长串元素。如果有少于10个元素，或者有一个不可估量的数量（就像在静态页面），然后我通常在CSS指定值。这是最简单的便于维护的方法。</p>
<p><img src="http://p0.qhimg.com/t018e6035e75b69d537.png" alt=""></p>
<p>一个简单的SASS循环</p>
<p>对于很长的元素列表或者一个动态的内容，定时器可能需要通过循环每个元素动态设置。</p>
<p><img src="http://p0.qhimg.com/t0146ff2d14e670a189.png" alt=""></p>
<p>最简单的javascript循环</p>
<p>这里有两个常用变量：你的基本延迟和每个元素之间的延迟。这是一个需要寻找的微妙的平衡，但是当你敲击正确的数字集，这会感觉非常好。</p>
<blockquote>
<p>#5</p>
</blockquote>
<h3 id="使用全局倍数来设计慢动画"><a href="#使用全局倍数来设计慢动画" class="headerlink" title="使用全局倍数来设计慢动画"></a>使用全局倍数来设计慢动画</h3><p><em>然后加速之后所有的元素</em></p>
<p>对于动画设计，定时就是一切。20%的工具是实现他们，并且其他80%是找到正确的参数&amp;让一切同步的间距，以及感觉流畅。</p>
<p>特别是在编排一系列元素的时候，尝试压榨性能和页面并发性，看看所有的元素在慢动作下会让事情变得简单。</p>
<p>无论你是否用javascript，或者一些CSS预处理器，如Sass（我的最爱），这都需要直接做些额外的算数，和创建变量。</p>
<p>你必须确认尝试一些不用的速度或者定时是很方便的。比如，如果一个动画在十分之一的速度下都很卡顿，那么有可能从根本上就有问题。如果将它调至50倍速度依然流畅，那么问题就是要找到他所能达到的最快的速度。在全速之下，5毫秒的问题很难察觉，但是如果你降低了整体的速度，那么他们就会变得特别明显。</p>
<p>特别对于十分复杂的动画，或者解决棘手性能的瓶颈，在慢动作下查看元素的能力可能十分有用。</p>
<p>最主要的问题是，你想包装许多完美的细节，当它变得慢的时候，然后提高整体的速度，因此这感觉是十分棒的。这十分微妙，但是用户会察觉流畅以及细节。</p>
<p>这些特性只是OS X的一部分——如果你点击shift按钮来减小按钮或者一个app图标，你会看到他在慢速运行。在这一点上，当你按shift按钮的时候，我们甚至可以在Gyroscope实现激活慢动画。</p>
<p><img src="http://p0.qhimg.com/t01aeef50b97627fdeb.jpg" alt=""></p>
<blockquote>
<p>#6</p>
</blockquote>
<h3 id="拍下你的UI，并且重放他们，以获取有价值的第三方关点。"><a href="#拍下你的UI，并且重放他们，以获取有价值的第三方关点。" class="headerlink" title="拍下你的UI，并且重放他们，以获取有价值的第三方关点。"></a>拍下你的UI，并且重放他们，以获取有价值的第三方关点。</h3><p>有时候一个不同的关点，能帮助你看事物更透彻，并且视频是一个极佳总这件事的方法。</p>
<p>一些人在AE中创建视频，并且尝试将他们在网站上实现。我经常换做其他的方式，然后尝试做一个来自网站的UI好视频。</p>
<p><img src="http://p0.qhimg.com/t016da3be3ddbaa201d.jpg" alt=""></p>
<p>能够发表vine或者一些video，是十分高杆的。有一天，我十分激动于我做的东西，并且尝试做成视频，分享给一些小伙伴。</p>
<p>然而，当我再看一次的时候，我发现有一堆东西不够完美。有一个大的滞后阻碍了之后的动画，并且所以的定时器都有一些问题。这让我有些担心，我最后没有发表它而是意识到我还有许多工作要做。</p>
<p>当要在正式环境使用它的时候粉饰这些很容易，但是看在视频上的动画——一遍又一遍或者在一个很慢的速度——让所有的问题都变得十分明显。</p>
<p><img src="http://p0.qhimg.com/t017cf7418c05cdfcf4.jpg" alt=""></p>
<p>他们说相机加了10磅。也许这也增加了10帧。</p>
<p><img src="http://p0.qhimg.com/t019d5f3ec63d3322e1.jpg" alt=""></p>
<p>I<br>这现在也变成了我工作流中重要的一部分，查看页面慢动画视频，以及如果有任何帧让我感觉不对，就马上做些改变。要怪罪于慢浏览器很容易，但是在一些更加优化的浏览器上，测试，有可能解决了所有的问题。</p>
<p>一旦你在视频上捕捉滞后停顿不觉得尴尬的时候，并且感觉视频够好，能够分享了，那么页面差不多就可以准备上线了。</p>
<blockquote>
<p>#7</p>
</blockquote>
<h3 id="网络活动导致滞后"><a href="#网络活动导致滞后" class="headerlink" title="网络活动导致滞后"></a>网络活动导致滞后</h3><p><em>你需要提前或者滞后加载大的http请求</em></p>
<p>图片是这个问题的最黑祸首们，是否一些大家伙（也许是一个大的背景）或者大量地小图片（想象50个表情符加载），或者仅仅有许多内容（一个很长的到底都有图片的页面）。</p>
<p>当页面第一次加载，大量的东西初始化和下载。有统计，广告和其他的第三方脚本让事情变得更糟糕。有时候，延迟所有的动画到加载完几百毫秒之后对性能有极大的帮助。</p>
<p>除非必要，不要过度优化，但是一个复杂的页面也许需要十分准确的延迟和内容定时，然后才能运行路畅。通常上来说，你想要在开始加载尽可能少的内容，一旦重的部分和简介动画做完之后，不断地加载页面其余的部分。</p>
<p>有许多数据的页面，加载所有的元素的工作量似乎是巨大的。一旦在做动画的同时开始加载真实数据，一个动画和静态页面运行地很好也许看上去是分开的。如果一些东西看上去应该工作或者有时候工作地流畅其他时间不流畅。我建议减产网络活动，确认你没有在同一时间做其他事情。</p>
<blockquote>
<p>#8</p>
</blockquote>
<h3 id="不要直接绑定滚动"><a href="#不要直接绑定滚动" class="headerlink" title="不要直接绑定滚动"></a>不要直接绑定滚动</h3><p><em>看上去是一个很酷的主意，但实际上不是。</em></p>
<p>在过去几年中，滚动为基础的动画很受欢迎，特别是在视差或者其他特殊效果中。是否是好设计，有待辩论，但是有一些好或者槽糕的方法去实现他们。</p>
<p>在这个类别中，适度的优化做些的事是将达到滚动到一定距离作为一个事件——并且仅仅运行一次。除非你真的了解你在做什么，我会建议避免这个类别，因为这很容易出问题而且真的很难维护。</p>
<p>更加糟糕的是，创建你自己的滚动条功能，而不是用默认的——也就是<em>scrolljacking</em>。请不要做么做！</p>
<p>这条建议对手机来说特别有用，但是也可能是用户体验的好实践。</p>
<p>如果你确实有一个特别的体验，你想专注在滚动或者其他特殊事件，我会建议创建一个快速原型，以确保这在花费大时间设计的时候，能够运行良好。</p>
<blockquote>
<p>#9</p>
</blockquote>
<h3 id="尽早-amp-经常在手机上测试。"><a href="#尽早-amp-经常在手机上测试。" class="headerlink" title="尽早&amp;经常在手机上测试。"></a>尽早&amp;经常在手机上测试。</h3><p>大多数网站是在电脑上创建的，并且很有可能在他们创建的相同机器上运行测试。因此手机体验和动画性能经常是后知后觉的。一些技术（比如canvas）或者动画技术在手机并没有运行地这么好。</p>
<p>然而，如果编写&amp;优化适当（看规则#1），一个手机体验可能会比电脑体验还要好。手机优化是一个非常棘手的课题，但是新的iPhone现在比大多数手提都要快！如果你按照之前的建议编写，你会发现你做的东西在手机上有着极佳的性能。</p>
<p><a href="https://gyrosco.pe/app/" target="_blank" rel="external"><img src="http://p0.qhimg.com/t01a8e36a629ced0700.jpg" alt=""></a></p>
<p>手机用法会是对于大多数网站都是一个非常大而且重要的部分。这看上去和极端，但是对于一整个项目，我会建议将手机从你的项目中分离出来。这不应该感觉像是一个惩罚去做手机版本，虽然经常会这样。</p>
<p>保持设计进步&amp;性能加强，知道这感觉被打磨流畅已经像网站的大版本那样方便。</p>
<p>如果你强迫自己只用手机网站一个礼拜，你很可能就会将它优化得向大型网站一样，有着的极佳体验。经常懊恼地使用是值得的，这意味着在你的用户体验之前解决问题。</p>
<blockquote>
<p>#10</p>
</blockquote>
<h3 id="在不同的设备上经常测试"><a href="#在不同的设备上经常测试" class="headerlink" title="在不同的设备上经常测试"></a>在不同的设备上经常测试</h3><p><em>屏幕大小，像素，或者设备都有着极大的暗示</em><br>.<br>除了手机vs桌面，有许多关键点会彻底影响性能，就像是否屏幕是“retina”屏，窗口的总像素，硬盘多老了，等等。</p>
<p>即使Chrome和Safari都是webkit的浏览器，有着相同的语法，他们也都有各自怪异行为。每一次chrome更新都会修复一些东西以及引入新的bug，因此你需要一直保持警觉。</p>
<p>当然，你不仅仅只希望创建最低水准的性能，因此找到最机智的方法来渐进添加或者移除增强功能会十分有用。</p>
<p>我经常在我的小Macbook和大的iMac之间切换，并且每次切换都引出了一些小问题并且做些改进——特别是依据动画性能，但是对于总体设计，信息密度，可读性，等等。</p>
<p>媒体查询，常常是强大的工具来处理这些不同环节样式，通过不同的高度或者宽度是最基础的媒体查询的用法。找出OS和设备的类型会很有用，因为手机性能特性和电脑很不一样。</p>
<p><a href="https://gyrosco.pe/" target="_blank" rel="external"><img src="http://p0.qhimg.com/t0192465868d2b8776c.gif" alt=""></a></p>
<p>我希望你在你的下一个项目中，会找到有用的技巧。好运！</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@cherryvenus" target="_blank" rel="external">cherryvenus</a><br>链接：<a href="http://www.zcfy.cc/article/1765" target="_blank" rel="external">http://www.zcfy.cc/article/1765</a><br>原文：<a href="https://blog.gyrosco.pe/smooth-css-animations-7d8ffc2c1d29?gi=7abf2b452ec#.8obfitru3?utm_source=CSS-Weekly&amp;utm_campaign=Issue-238&amp;utm_medium=email" target="_blank" rel="external">https://blog.gyrosco.pe/smooth-css-animations-7d8ffc2c1d29?gi=7abf2b452ec#.8obfitru3?utm_source=CSS-Weekly&amp;utm_campaign=Issue-238&amp;utm_medium=email</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML 5.1 里的新东西]]></title>
      <url>http://jsgrblog.win/2016/12/10/H5-1%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>两年前HTML5标准的发布对于web开发社区来说是一件大事。不仅是因为它包含了一系列让人印象深刻的新特性, 还因为它是1999年发布的HTML4.01标准以后，对HTML的第一个大版本更新。你现在依然可以看到一些网站夸耀他们在使用“现代”的HTML5标准。<br><img src="http://p0.qhimg.com/t01c6cd825f03ce294a.png" alt="A HTML 5.1 knight in shining armor!"><br><a id="more"></a></p>
<p>幸运的是我们不需为下一次HTML标准的更新等待那么长时间。2015年10月，W3C开始着手HTML5.1草案，其目标是修复一些HTML5遗留的问题。多次迭代后, 草案于2016年6月达到“候选建议（Candidate Recommendation）”阶段，2016年9月达到“提议建议（Proposed Recommendation）”，最终2016年11月发布<a href="https://www.w3.org/TR/html/" target="_blank" rel="external">W3C 建议</a>。关注新标准的人可能注意到了，这是一段曲折之路。很多开始提出的HTML5.1特性因为不好的设计或者缺少浏览器厂商支持而被废弃了。</p>
<p>尽管HTML5.1仍然在发展, W3C已经开始着手<a href="https://www.w3.org/TR/html52/" target="_blank" rel="external">HTML5.2草案</a>，该标准预计2017年末发布。本文是对HTML5.1一些有趣的新特性和提升的概览。浏览器对这些特性依然缺乏支持，但是至少我们会告诉你一些支持这些特性的浏览器，用来测试每个例子。</p>
<h3 id="上下文菜单使用menu和menuitems元素"><a href="#上下文菜单使用menu和menuitems元素" class="headerlink" title="上下文菜单使用menu和menuitems元素"></a>上下文菜单使用<code>menu</code>和<code>menuitems</code>元素</h3><p>HTML5.1草案介绍了两种不同的<code>menu</code>元素: <code>context</code>和<code>toolbar</code>。前者用来扩展本地上下文菜单，通常被页面上的鼠标右击激活；后者用来定义一个普通的菜单组件。在发展过程中，<code>toolbar</code> 被放弃了，但是<code>context</code>菜单保存了下来。</p>
<p>可以使用 <a href="https://www.w3.org/TR/html/interactive-elements.html#the-menu-element" target="_blank" rel="external"><code>&lt;menu&gt;</code></a> 标签来定义一个包含一个或几个 <a href="https://www.w3.org/TR/html/interactive-elements.html#the-menuitem-element" target="_blank" rel="external"><code>&lt;menuitem&gt;</code></a> 元素的菜单，然后把它绑定到任何使用<a href="https://www.w3.org/TR/html/interactive-elements.html#element-attrdef-global-contextmenu" target="_blank" rel="external"><code>contextmenu</code></a> 属性的元素上。</p>
<p>每个 <code>&lt;menuitem&gt;</code> 可以是以下三种类型之一:</p>
<ul>
<li><p><code>checkbox</code> – 允许选择或者取消选择一个选项(option);</p>
</li>
<li><p><code>command</code> – 允许在单击鼠标时执行一个动作;</p>
</li>
<li><p><code>radio</code> – 允许在一组选项中选择一个.</p>
</li>
</ul>
<p>这里有一个基本的使用例子，可以在Firefox49中运行， 但是Chrome54目前不行。</p>
<p>请看SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="external">@SitePoint</a>)在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上<a href="http://codepen.io/SitePoint/pen/bBrvRP/" target="_blank" rel="external">HTML5.1菜单例子</a>。</p>
<p>在一个支持的浏览器上，这个上下文菜单的例子应该看起来这样：</p>
<p><img src="http://p0.qhimg.com/t012b201ff03692f462.png" alt="A HTML 5.1 context menu"></p>
<p>上下文菜单中有自定义项。</p>
<h3 id="细节（Details）和总结（Summary）元素"><a href="#细节（Details）和总结（Summary）元素" class="headerlink" title="细节（Details）和总结（Summary）元素"></a>细节（Details）和总结（Summary）元素</h3><p>新的<a href="https://www.w3.org/TR/html/interactive-elements.html#the-details-element" target="_blank" rel="external"><code>&lt;details&gt;</code></a>和<a href="https://www.w3.org/TR/html/interactive-elements.html#the-summary-element" target="_blank" rel="external"><code>&lt;summary&gt;</code></a>元素可以通过鼠标点击实现附加信息的展示和隐藏。这是使用JavaScript时候经常在干的事，现在可以使用<code>&lt;details&gt;</code>元素和<code>&lt;summary&gt;</code>元素代劳了。点击<code>&lt;summary&gt;</code>元素可以展示和隐藏<code>details</code>元素的其余部分.</p>
<p>下面的例子可以在Firefox和Chrome中进行测试。</p>
<p>请看SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="external">@SitePoint</a>)在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上<a href="http://codepen.io/SitePoint/pen/rWzgzg/" target="_blank" rel="external">HTML5.1 细节和总结 demo</a>。</p>
<p>这个demo在支持的浏览器上应该是下面这样：</p>
<p><img src="http://p0.qhimg.com/t01800aaa24cc973da6.png" alt="Details and summary elements"></p>
<h3 id="更多的input类型-month，week-和-datetime-local"><a href="#更多的input类型-month，week-和-datetime-local" class="headerlink" title="更多的input类型 - month，week 和 datetime-local"></a>更多的input类型 - <code>month</code>，<code>week</code> 和 <code>datetime-local</code></h3><p>input扩展了三种类型: <a href="https://www.w3.org/TR/html/sec-forms.html#month-state-typemonth" target="_blank" rel="external"><code>month</code></a>， <a href="https://www.w3.org/TR/html/index.html#contents" target="_blank" rel="external"><code>week</code></a> 和<a href="https://www.w3.org/TR/html/sec-forms.html#local-date-and-time-state-typedatetimelocal" target="_blank" rel="external"><code>datetime-local</code></a>。</p>
<p>前两种类型让你可以选择周或者月。在Chrome中两者都渲染成下拉的日历，可以选择某周或者某月。当你用JavaScript获得它们的值，你将得到一个大致这样的字符串： <code>&quot;2016-W43&quot;</code>（<code>week</code> input）； <code>&quot;2016-10&quot;</code> （<code>month</code> input）。</p>
<p>最初，HTML5.1草案介绍了两种日期类型input — <code>datetime</code>和<code>datetime-local</code>。不同的是，<code>datetime-local</code> 使用用户时区, 而<code>datetime</code>允许你选择时区。发展过程中，<code>datetime</code> 被放弃了，现在只有<code>datetime-local</code>存在。<code>datetime-local</code> input由两部分组成 — 日期，可以像<code>week</code> 和 <code>month</code>一样进行选择；时间, 可以单独输入。</p>
<p>下面是关于所有新类型input的例子，它在chrome中可以正常展示，但是firfox不行。</p>
<p>请看SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="external">@SitePoint</a>)在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上<a href="http://codepen.io/SitePoint/pen/xRLowg/" target="_blank" rel="external">HTML 5.1 week, month 和 datetime inputs</a>。</p>
<p>这个demo在支持的浏览器上应该是下面这样：</p>
<p><img src="http://p0.qhimg.com/t018be52a398d1db7cd.png" alt="Week, month and datetime-local inputs"></p>
<h3 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h3><p>HTML5.1包括几个在不使用CSS情况下实现响应式图片的新特性。每个特性都有自己单独的使用场景。</p>
<h4 id="srcset属性"><a href="#srcset属性" class="headerlink" title="srcset属性"></a><code>srcset</code>属性</h4><p><a href="https://www.w3.org/TR/html/single-page.html#element-attrdef-img-srcset" target="_blank" rel="external"><code>srcset</code></a>图像属性允许列出多个可用于替代的图片数据源，这些数据源的像素密度不同。这使得浏览器可以针对用户设备选择合适质量的图片（由设备的像素密度、缩放比例或者网速决定）。例如，在低速手机网络和小屏幕手机的情况下，应该为用户提供低像素的图片。</p>
<p><code>srcset</code>属性接受一个用逗号分隔的URL列表，每个URL带有一个表示最接近所请求图片像素比（一个CSS像素所代表的物理像素数量）的修饰<code>x</code>。下面是一个简单的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;images/low-res.jpg&quot; srcset=&quot;</div><div class="line">  images/low-res.jpg 1x, </div><div class="line">  images/high-res.jpg 2x, </div><div class="line">  images/ultra-high-res.jpg 3x&quot;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>在这个例子中，如果用户设备的像素比是1，图片<code>low-res</code>将会被展示；如果是2，图片<code>high-res</code>将会被展示；如果是3或者更大，图片<code>ultra-high-res</code>将会被展示。</p>
<p>或者，你可以选择将图片展示成不同尺寸。这需要使用<code>w</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;images/low-res.jpg&quot; srcset=&quot;</div><div class="line">  images/low-res.jpg 600w, </div><div class="line">  images/high-res.jpg 1000w, </div><div class="line">  images/ultra-high-res.jpg 1400w&quot;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>在这个例子中，图片<code>low-res</code>被定义成600px宽，图片<code>high-res</code>被定义成1000px宽，<code>ultra-high-res</code>是1400px宽。</p>
<h4 id="sizes属性"><a href="#sizes属性" class="headerlink" title="sizes属性"></a><code>sizes</code>属性</h4><p>你可能想根据用户屏幕尺寸来使用不同方式展示图片。例如，你可能想在宽屏幕上用两栏展示图片，窄一些的屏幕上用一栏。这点用<code>sizes</code>属性就可以实现。它允许你为图片分配屏幕的宽度，然后通过<code>srcset</code>属性选择合适的图片。下面是一个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;images/low-res.jpg&quot; sizes=&quot;(max-width: 40em) 100vw, 50vw&quot; </div><div class="line">  srcset=&quot;images/low-res.jpg 600w, </div><div class="line">  images/high-res.jpg 1000w, </div><div class="line">  images/ultra-high-res.jpg 1400w&quot;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>当视口宽度大于40em时，<code>sizes</code>属性把图片的宽度定义为视口宽度的50%；当视口（viewport）宽度小于或者等于40em时，把图片宽度定义为视口宽度的100%。</p>
<h4 id="picture元素"><a href="#picture元素" class="headerlink" title="picture元素"></a><code>picture</code>元素</h4><p>如果根据屏幕不同改变图片的尺寸还是不能满足需求，你想根据屏幕不同展示不同的图片，那就需要使用<a href="https://www.w3.org/TR/html/single-page.html#elementdef-picture" target="_blank" rel="external"><code>picture</code></a>元素。它允许你通过用<code>&lt;picture&gt;</code>指定多个不同<code>&lt;source&gt;</code>元素，来为不同尺寸的屏幕定义不同资源的图片。<code>&lt;source&gt;</code>元素作为URL加载图片的来源。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;picture&gt;</div><div class="line">  &lt;source media=&quot;(max-width: 20em)&quot; srcset=&quot;</div><div class="line">    images/small/low-res.jpg 1x,</div><div class="line">    images/small/high-res.jpg 2x, </div><div class="line">    images/small/ultra-high-res.jpg 3x</div><div class="line">  &quot;&gt;</div><div class="line">  &lt;source media=&quot;(max-width: 40em)&quot; srcset=&quot;</div><div class="line">    images/large/low-res.jpg 1x,</div><div class="line">    images/large/high-res.jpg 2x, </div><div class="line">    images/large/ultra-high-res.jpg 3x</div><div class="line">  &quot;&gt;</div><div class="line"></div><div class="line">  &lt;img src=&quot;images/large/low-res.jpg&quot;&gt;</div><div class="line">&lt;/picture&gt;</div></pre></td></tr></table></figure>
<p>如果你想知道更多关于响应式图片的东西，请戳<a href="https://www.sitepoint.com/how-to-build-responsive-images-with-srcset" target="_blank" rel="external">How to Build Responsive Images with <code>srcset</code></a>.</p>
<h3 id="用form-reportValidity-验证表单"><a href="#用form-reportValidity-验证表单" class="headerlink" title="用form.reportValidity()验证表单"></a>用<code>form.reportValidity()</code>验证表单</h3><p>HTML5定义的<a href="https://www.w3.org/TR/html/single-page.html#dom-htmlobjectelement-checkvalidity" target="_blank" rel="external"><code>form.checkValidity()</code></a>方法可以检查表单是否符合事先定义好的验证器然后返回一个布尔值。新的<a href="https://www.w3.org/TR/html/single-page.html#dom-htmlformelement-reportvalidity" target="_blank" rel="external"><code>reportValidity()</code></a> 方法很相似 — 它也可以检验一个表单并返回结果，但是它还能为用户报告错误。下面是一个例子（请在Firefox或Chrome中测试）：</p>
<p>请在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上看SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="external">@SitePoint</a>)的例子<a href="http://codepen.io/SitePoint/pen/eBEwjg/" target="_blank" rel="external">HTML 5.1 report validity demo</a>。</p>
<p>“First name”输入框被要求非空，如果不填写它将被标记有错误。如果符合预期，它将是这样：</p>
<p><img src="http://p0.qhimg.com/t01f231808cf20572c6.png" alt="Working form validation with a message"></p>
<h3 id="frames的AllowfullscreenFrames的Allowfullscreen属性"><a href="#frames的AllowfullscreenFrames的Allowfullscreen属性" class="headerlink" title="frames的AllowfullscreenFrames的Allowfullscreen属性"></a>frames的<code>Allowfullscreen</code>Frames的<code>Allowfullscreen</code>属性</h3><p>frames新的布尔属性<a href="https://www.w3.org/TR/html/single-page.html#element-attrdef-iframe-allowfullscreen" target="_blank" rel="external"><code>allowfullscreen</code></a>可以控制内容是否可以通过<a href="https://fullscreen.spec.whatwg.org/#dom-element-requestfullscreen" target="_blank" rel="external"><code>requestFullscreen()</code></a>方法来全屏展示内容。</p>
<h3 id="使用element-forceSpellCheck-进行拼写检查"><a href="#使用element-forceSpellCheck-进行拼写检查" class="headerlink" title="使用element.forceSpellCheck()进行拼写检查"></a>使用<code>element.forceSpellCheck()</code>进行拼写检查</h3><p>新的<a href="https://html.spec.whatwg.org/multipage/interaction.html#dom-forcespellcheck" target="_blank" rel="external"><code>element.forceSpellCheck()</code></a>方法允许你在text元素上触发拼写检查。这也是本文所列出的所有特性中第一个还不被任何浏览器支持的特性。也许，这可以用来进行检查还没有被用户直接编辑的元素。</p>
<h3 id="没有写进HTML5-1的特性"><a href="#没有写进HTML5-1的特性" class="headerlink" title="没有写进HTML5.1的特性"></a>没有写进HTML5.1的特性</h3><p>一些特性在第一版的草案中被定义但是最终被删除了，大部分原因是浏览器厂商缺乏兴趣。下面是其中一些有趣的方法：</p>
<h4 id="inert属性"><a href="#inert属性" class="headerlink" title="inert属性"></a><code>inert</code>属性</h4><p><code>inert</code>属性可以禁用所有子元素的用户交互，就像给所有子元素都加了<code>disabled</code>属性。</p>
<h4 id="dialog元素"><a href="#dialog元素" class="headerlink" title="dialog元素"></a><code>dialog</code>元素</h4><p><code>&lt;dialog&gt;</code>元素提供一个原生的弹出框，它甚至有一个方便的表单集合 - 在<code>&lt;dialog&gt;</code>上使用<code>method</code>属性可以阻止表单提交到服务器上，而是关闭弹出框并把结果返回给弹出框的建立者。</p>
<p>这个特性似乎在firfox仍然支持，所以可以看看下面这个例子（译者注：firfox V49.0.2不支持：</p>
<p>请看SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="external">@SitePoint</a>)在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>的例子 <a href="http://codepen.io/SitePoint/pen/XNaLOg/" target="_blank" rel="external">HTML dialog element</a>。</p>
<h3 id="作者的更多文章"><a href="#作者的更多文章" class="headerlink" title="作者的更多文章"></a>作者的更多文章</h3><ul>
<li><p><a href="https://www.sitepoint.com/up-and-running-with-eslint-the-pluggable-javascript-linter/?utm_source=sitepoint&amp;utm_medium=relatedinline&amp;utm_term=&amp;utm_campaign=relatedauthor" target="_blank" rel="external">Up and Running with ESLint — the Pluggable JavaScript Linter</a></p>
</li>
<li><p><a href="https://www.sitepoint.com/visual-regression-testing-with-phantomcss/?utm_source=sitepoint&amp;utm_medium=relatedinline&amp;utm_term=&amp;utm_campaign=relatedauthor" target="_blank" rel="external">Visual Regression Testing with PhantomCSS</a></p>
</li>
</ul>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>这不是一个关于HTML5.1所有新特性的文章。有许多小的新特性、改变已经从现行标准中删除，还有一些从未使用的特性也被删除了。如果你想知道HTML5.1的所有改变，请戳[Changes](<a href="https://www.w3.org/TR/html/changes.html#changes。同时，让我们一起期待浏览器厂商尽快支持这些新特性!" target="_blank" rel="external">https://www.w3.org/TR/html/changes.html#changes。同时，让我们一起期待浏览器厂商尽快支持这些新特性!</a></p>
<p>HTML5.1哪些方面最令你激动？通过评论告诉我们吧!</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@CynthiaLYY" target="_blank" rel="external">柒青衿</a><br>链接：<a href="http://www.zcfy.cc/article/1899" target="_blank" rel="external">http://www.zcfy.cc/article/1899</a><br>原文：<a href="https://www.sitepoint.com/whats-new-in-html-5-1/" target="_blank" rel="external">https://www.sitepoint.com/whats-new-in-html-5-1/</a></p>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
