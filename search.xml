<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[流畅web动画的十个法则]]></title>
      <url>http://jsgrblog.win/2016/12/10/%E6%B5%81%E7%95%85web%E5%8A%A8%E7%94%BB%E7%9A%84%E5%8D%81%E4%B8%AA%E6%B3%95%E5%88%99/</url>
      <content type="html"><![CDATA[<p>自从我们去年登陆了<a href="https://gyrosco.pe/" target="_blank" rel="external"><em>Gyroscope</em></a>，许多人都问我有关用在我们网站上的javascript动画库。我们考虑过将此开源，但是这不是魔法真正实现的地方。</p>
<p>我不希望大家认为我们是依靠特殊的javascript插件来解决这些问题的。对于大部分人来说，我们只是充分利用了近来浏览器性能的提升，GPU和CSS3规格.</p>
<p>对于良好的动画性能没有高招，除了将大量的时间放在测试和优化。然而，过了许多年的实验和撞击浏览器性能的极限，我们发现了一系列的设计和代码准则，看上去似乎是良好动画可靠的结果。这些技术让你的页面，在现代桌面和手机浏览器上变得流畅，运行良好。最重要的是，易于维护。<br><a id="more"></a></p>
<p><img src="http://p0.qhimg.com/t01127208383af267ed.gif" alt=""></p>
<p>对每个人来说，技术和实现方式都有所不同，但是大体上的规则对大多是情况都会有帮助。</p>
<h3 id="什么是动画？"><a href="#什么是动画？" class="headerlink" title="什么是动画？"></a>什么是动画？</h3><p>动画在互联网出现之前就已经饱经世故了，并且如果你想做好它，这会是你一生的课题。然而对于应用于互联网的动画，有一些特别的约束和挑战。</p>
<p>对于60帧的流畅动画，每一帧都需要在16ms内渲染！这并没有多少时间，因此为了流畅的性能，我们需要找到非常有效的方法来渲染每一帧。</p>
<p><img src="http://p0.qhimg.com/t013e0b852373af9835.gif" alt=""></p>
<p><img src="http://p0.qhimg.com/t0146d29814a6cdc280.gif" alt=""><br><img src="http://p0.qhimg.com/t01cea2a1a8ba49dadb.gif" alt=""><br><a href="http://the12principles.tumblr.com/" target="_blank" rel="external">一些经典的动画规则</a></p>
<p>T<br>在web上有一打方法做动画。比如，幻灯片是一种方法，在互联网之前就已经流行，通过轻微不同的手绘帧，在一秒内多次置换，来创造运动的视觉效果。</p>
<p>最近Twitter使用这种简单的方法，制作了新的爱心动画，通过切换一组雪碧图切换实现。</p>
<p><img src="http://p0.qhimg.com/t014b3b3c722b70bbf3.png" alt=""></p>
<p>这个效果不能用一堆小元素单独做动画，或者做一个SVG，但是那样会产生十分不必要的复杂以及可能会不流畅。</p>
<p><img src="http://p0.qhimg.com/t01c22edb1dcb830d14.gif" alt=""></p>
<p>在许多例子中，你会想用CSS transition属性来做自动动画。这个技术也同样以“补间动画”闻名，在两个不同的值之间的过渡。这个好处就是，你可以轻易地取消，而不需要建立所有的逻辑。这个对于“一劳永逸”样式的动画是理想的解决方式，就像介绍序列，等等，或者简单如悬停的交互。</p>
<p>延伸阅读: <a href="https://blog.alexmaccaw.com/css-transitions" target="_blank" rel="external">你需要知道关于CSS Transitions的事</a></p>
<p><img src="http://p0.qhimg.com/t01bd1905f5c91073f1.gif" alt=""></p>
<p>在其他例子中，关键帧为基础的CSS动画属性也许对于不间断运行的背景细节是非常理想的。举个例子，在Gyroscope logo上的戒指计划是不间断地旋转。其他受益于CSS动画语法的是齿轮速比。</p>
<p>因此，事不宜迟，这里有些建议能够帮助你很大程度上地提高你的动画性能……</p>
<blockquote>
<p>#1</p>
</blockquote>
<h3 id="不要改变除了opacity和transform之外的参数！"><a href="#不要改变除了opacity和transform之外的参数！" class="headerlink" title="不要改变除了opacity和transform之外的参数！"></a>不要改变除了opacity和transform之外的参数！</h3><p><em>即使你觉得这样ok，也不要这么做!</em></p>
<p>仅仅这一个基本的准则能帮你解决80%的问题，即使是在手机上。你可能在之前听过这个——这不是最初的主意，但是是很少被跟随。这相当于是web的“吃的健康和运动”的相同法则，这个听上去是一个好的建议，但是你可能会无视。</p>
<p>一旦你如此想了，你会发现这个相对简单，但是可能会是一个大跳跃，对这些习惯传统CSS属性的动画。</p>
<p>举个例子，如果你想让元素变小，你可以使用<em>transform: scale()</em>，而不是改变他的宽度。如果你想移动他，不同于用外边距或者内边距混在一起——你可以仅仅使用一个简单的<em>transform: translateX</em>或者<em>transform: translateY</em>。</p>
<h4 id="为什么这个是有效的？"><a href="#为什么这个是有效的？" class="headerlink" title="为什么这个是有效的？"></a>为什么这个是有效的？</h4><p>对于人类来说，改变宽度，外边距或者其他属性，看上去不是很大的交易——因为它更简单，看上去更好——但是电脑需要做的事情和人类比起来简直是天壤之别，他要做的更加多更加槽糕。</p>
<p>浏览器团队花费了很大的力气在优化这些操作。Transforms真的很简单就能提高效率，并且经常能够充分利用你的图形界面，而不用重新渲染元素。</p>
<p>第一次载入页面的时候，你可能会抓狂——在所有的角落，使用图片，在每个元素上加上阴影，如果你觉得特别粗糙，你甚至可以加上一个动态模糊。如果这只发生一次，一些额外的毫秒时间计算并不影响。但是一旦内容重新渲染，你不会想重新计算所有的内容。</p>
<p>延展阅读：<a href="https://www.paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/" target="_blank" rel="external">用translate移动元素 (Paul Irish)</a></p>
<blockquote>
<p>#2</p>
</blockquote>
<h3 id="将内容藏在不起眼的地方"><a href="#将内容藏在不起眼的地方" class="headerlink" title="将内容藏在不起眼的地方"></a><em>将内容藏在不起眼的地方</em></h3><p><em>使用pointer-events:通过透明度为0来隐藏元素</em></p>
<p>这个属性也许会有浏览器兼容的问题，但是如果你只是为webkit或者其他现代浏览器做东西，这会让你的生活更美好。</p>
<p>过去很长一段时间，当动画需要通过jQuery的animate()处理的时候，许多渐变元素的复杂来自切换“display“属性实现的：在一个合</p>
<p>CSS的pointer-events属性（这已经存在了很长时间了，但是不经常用），让元素不回应任何点击和交互，就像他们不在那边一样。它可以简单地通过CSS切换开启和关闭，而不通过打断动画或者以任何方法影响渲染/可见性。</p>
<p>与opacity为0结合使用，他基本上和display：none是一样的效果，但是不触发新的渲染而影响性能。当隐藏元素时，我可以常常只设置opacity为0，并且关闭pointer-events，然后遗忘元素，他会自己照顾自己。</p>
<p>这和绝对定位的元素一起工作地特别好，因为你会十分有信心，它对页面其他的元素完全没有影响。</p>
<p>这也给你更多的回旋余地，因为定时并不完美——这不是世界末日，如果一个元素是可点击的或者在其他元素上遮盖一秒或者更长，或者如果这仅仅能被点一次，然后就隐藏起来了。</p>
<blockquote>
<p>#3</p>
</blockquote>
<h3 id="不要同一时间所有元素都做动画"><a href="#不要同一时间所有元素都做动画" class="headerlink" title="不要同一时间所有元素都做动画"></a>不要同一时间所有元素都做动画</h3><p><em>除非使用编排</em></p>
<p>一个单独的动画自己是流畅的，但是同一时间许多元素都做动画，就会扰乱他们。创建单个的流畅动画很简单——但是一个数量级的动画就很难确保性能达到满分。因此，合理地规划特别重要。</p>
<p>将时间分开，那么所有的元素都不在一个相同的时间开始。典型的是，2，3个可以在同一时间运行，而不需要减速，特别是如果他们在稍不同的时间开始动画。</p>
<p>除非你的页面上只有一个元素，不然理解<em>编排</em>是很重要的。这可能看上去像一个舞蹈编排，但事对于动画接口来说是同样重要的。元素需要在一个合适得位置合适的时间进入。及时他们都是分开的，他们必须感觉是设计好的的一个单元。</p>
<p>Google素材设计在这个主题上又很有意思的建议。这不仅仅是做事的正确方式，也是你需要考虑的事情和测试。</p>
<p><img src="http://p0.qhimg.com/t01ec60db7e77e8df6d.png" alt=""></p>
<p>延伸阅读： <a href="https://material.google.com/motion/material-motion.html" target="_blank" rel="external">Google素材设计 · 动机</a></p>
<blockquote>
<p>#4</p>
</blockquote>
<h3 id="轻微地增加延迟，让编排动作变得简单"><a href="#轻微地增加延迟，让编排动作变得简单" class="headerlink" title="轻微地增加延迟，让编排动作变得简单_"></a>轻微地增加延迟，让编排动作变得简单_</h3><p>编排动画真的十分重要，并且需要十分多的实验和测试才能找到感觉。然而，他的代码并不十分复杂。</p>
<p>我通常会改变父元素上的一个Class（通常是在body上），来触发一系列变化，每一个在特定的时间有自己的过度延迟。从代码观点来说，你只需要关心状态改变，并且不需要在javascript中维护一堆定时。</p>
<p><img src="http://p0.qhimg.com/t01dd5118782727aa5a.gif" alt=""></p>
<p> <a href="https://gyrosco.pe/chrome/" target="_blank" rel="external">Gyroscope Chrome 扩展</a>的动画</p>
<p>交错安排一系列元素，是最简单的编排你的元素的方法。这很强大，因为这同时看上去很好，同时也带来了珍贵的性能——记住只有一小部分元素在同一时间开始。你会将他们分开直至感觉足够流畅，但是不要分得太开，导致整体看上去太慢。足够应该是重叠，这感觉像一个不间断的流，而不是一系列独立的个体元素。</p>
<h4 id="代码样例"><a href="#代码样例" class="headerlink" title="代码样例"></a>代码样例</h4><p>这里有一系列简单的技巧，交错排序你的元素——特别是如果是一长串元素。如果有少于10个元素，或者有一个不可估量的数量（就像在静态页面），然后我通常在CSS指定值。这是最简单的便于维护的方法。</p>
<p><img src="http://p0.qhimg.com/t018e6035e75b69d537.png" alt=""></p>
<p>一个简单的SASS循环</p>
<p>对于很长的元素列表或者一个动态的内容，定时器可能需要通过循环每个元素动态设置。</p>
<p><img src="http://p0.qhimg.com/t0146ff2d14e670a189.png" alt=""></p>
<p>最简单的javascript循环</p>
<p>这里有两个常用变量：你的基本延迟和每个元素之间的延迟。这是一个需要寻找的微妙的平衡，但是当你敲击正确的数字集，这会感觉非常好。</p>
<blockquote>
<p>#5</p>
</blockquote>
<h3 id="使用全局倍数来设计慢动画"><a href="#使用全局倍数来设计慢动画" class="headerlink" title="使用全局倍数来设计慢动画"></a>使用全局倍数来设计慢动画</h3><p><em>然后加速之后所有的元素</em></p>
<p>对于动画设计，定时就是一切。20%的工具是实现他们，并且其他80%是找到正确的参数&amp;让一切同步的间距，以及感觉流畅。</p>
<p>特别是在编排一系列元素的时候，尝试压榨性能和页面并发性，看看所有的元素在慢动作下会让事情变得简单。</p>
<p>无论你是否用javascript，或者一些CSS预处理器，如Sass（我的最爱），这都需要直接做些额外的算数，和创建变量。</p>
<p>你必须确认尝试一些不用的速度或者定时是很方便的。比如，如果一个动画在十分之一的速度下都很卡顿，那么有可能从根本上就有问题。如果将它调至50倍速度依然流畅，那么问题就是要找到他所能达到的最快的速度。在全速之下，5毫秒的问题很难察觉，但是如果你降低了整体的速度，那么他们就会变得特别明显。</p>
<p>特别对于十分复杂的动画，或者解决棘手性能的瓶颈，在慢动作下查看元素的能力可能十分有用。</p>
<p>最主要的问题是，你想包装许多完美的细节，当它变得慢的时候，然后提高整体的速度，因此这感觉是十分棒的。这十分微妙，但是用户会察觉流畅以及细节。</p>
<p>这些特性只是OS X的一部分——如果你点击shift按钮来减小按钮或者一个app图标，你会看到他在慢速运行。在这一点上，当你按shift按钮的时候，我们甚至可以在Gyroscope实现激活慢动画。</p>
<p><img src="http://p0.qhimg.com/t01aeef50b97627fdeb.jpg" alt=""></p>
<blockquote>
<p>#6</p>
</blockquote>
<h3 id="拍下你的UI，并且重放他们，以获取有价值的第三方关点。"><a href="#拍下你的UI，并且重放他们，以获取有价值的第三方关点。" class="headerlink" title="拍下你的UI，并且重放他们，以获取有价值的第三方关点。"></a>拍下你的UI，并且重放他们，以获取有价值的第三方关点。</h3><p>有时候一个不同的关点，能帮助你看事物更透彻，并且视频是一个极佳总这件事的方法。</p>
<p>一些人在AE中创建视频，并且尝试将他们在网站上实现。我经常换做其他的方式，然后尝试做一个来自网站的UI好视频。</p>
<p><img src="http://p0.qhimg.com/t016da3be3ddbaa201d.jpg" alt=""></p>
<p>能够发表vine或者一些video，是十分高杆的。有一天，我十分激动于我做的东西，并且尝试做成视频，分享给一些小伙伴。</p>
<p>然而，当我再看一次的时候，我发现有一堆东西不够完美。有一个大的滞后阻碍了之后的动画，并且所以的定时器都有一些问题。这让我有些担心，我最后没有发表它而是意识到我还有许多工作要做。</p>
<p>当要在正式环境使用它的时候粉饰这些很容易，但是看在视频上的动画——一遍又一遍或者在一个很慢的速度——让所有的问题都变得十分明显。</p>
<p><img src="http://p0.qhimg.com/t017cf7418c05cdfcf4.jpg" alt=""></p>
<p>他们说相机加了10磅。也许这也增加了10帧。</p>
<p><img src="http://p0.qhimg.com/t019d5f3ec63d3322e1.jpg" alt=""></p>
<p>I<br>这现在也变成了我工作流中重要的一部分，查看页面慢动画视频，以及如果有任何帧让我感觉不对，就马上做些改变。要怪罪于慢浏览器很容易，但是在一些更加优化的浏览器上，测试，有可能解决了所有的问题。</p>
<p>一旦你在视频上捕捉滞后停顿不觉得尴尬的时候，并且感觉视频够好，能够分享了，那么页面差不多就可以准备上线了。</p>
<blockquote>
<p>#7</p>
</blockquote>
<h3 id="网络活动导致滞后"><a href="#网络活动导致滞后" class="headerlink" title="网络活动导致滞后"></a>网络活动导致滞后</h3><p><em>你需要提前或者滞后加载大的http请求</em></p>
<p>图片是这个问题的最黑祸首们，是否一些大家伙（也许是一个大的背景）或者大量地小图片（想象50个表情符加载），或者仅仅有许多内容（一个很长的到底都有图片的页面）。</p>
<p>当页面第一次加载，大量的东西初始化和下载。有统计，广告和其他的第三方脚本让事情变得更糟糕。有时候，延迟所有的动画到加载完几百毫秒之后对性能有极大的帮助。</p>
<p>除非必要，不要过度优化，但是一个复杂的页面也许需要十分准确的延迟和内容定时，然后才能运行路畅。通常上来说，你想要在开始加载尽可能少的内容，一旦重的部分和简介动画做完之后，不断地加载页面其余的部分。</p>
<p>有许多数据的页面，加载所有的元素的工作量似乎是巨大的。一旦在做动画的同时开始加载真实数据，一个动画和静态页面运行地很好也许看上去是分开的。如果一些东西看上去应该工作或者有时候工作地流畅其他时间不流畅。我建议减产网络活动，确认你没有在同一时间做其他事情。</p>
<blockquote>
<p>#8</p>
</blockquote>
<h3 id="不要直接绑定滚动"><a href="#不要直接绑定滚动" class="headerlink" title="不要直接绑定滚动"></a>不要直接绑定滚动</h3><p><em>看上去是一个很酷的主意，但实际上不是。</em></p>
<p>在过去几年中，滚动为基础的动画很受欢迎，特别是在视差或者其他特殊效果中。是否是好设计，有待辩论，但是有一些好或者槽糕的方法去实现他们。</p>
<p>在这个类别中，适度的优化做些的事是将达到滚动到一定距离作为一个事件——并且仅仅运行一次。除非你真的了解你在做什么，我会建议避免这个类别，因为这很容易出问题而且真的很难维护。</p>
<p>更加糟糕的是，创建你自己的滚动条功能，而不是用默认的——也就是<em>scrolljacking</em>。请不要做么做！</p>
<p>这条建议对手机来说特别有用，但是也可能是用户体验的好实践。</p>
<p>如果你确实有一个特别的体验，你想专注在滚动或者其他特殊事件，我会建议创建一个快速原型，以确保这在花费大时间设计的时候，能够运行良好。</p>
<blockquote>
<p>#9</p>
</blockquote>
<h3 id="尽早-amp-经常在手机上测试。"><a href="#尽早-amp-经常在手机上测试。" class="headerlink" title="尽早&amp;经常在手机上测试。"></a>尽早&amp;经常在手机上测试。</h3><p>大多数网站是在电脑上创建的，并且很有可能在他们创建的相同机器上运行测试。因此手机体验和动画性能经常是后知后觉的。一些技术（比如canvas）或者动画技术在手机并没有运行地这么好。</p>
<p>然而，如果编写&amp;优化适当（看规则#1），一个手机体验可能会比电脑体验还要好。手机优化是一个非常棘手的课题，但是新的iPhone现在比大多数手提都要快！如果你按照之前的建议编写，你会发现你做的东西在手机上有着极佳的性能。</p>
<p><a href="https://gyrosco.pe/app/" target="_blank" rel="external"><img src="http://p0.qhimg.com/t01a8e36a629ced0700.jpg" alt=""></a></p>
<p>手机用法会是对于大多数网站都是一个非常大而且重要的部分。这看上去和极端，但是对于一整个项目，我会建议将手机从你的项目中分离出来。这不应该感觉像是一个惩罚去做手机版本，虽然经常会这样。</p>
<p>保持设计进步&amp;性能加强，知道这感觉被打磨流畅已经像网站的大版本那样方便。</p>
<p>如果你强迫自己只用手机网站一个礼拜，你很可能就会将它优化得向大型网站一样，有着的极佳体验。经常懊恼地使用是值得的，这意味着在你的用户体验之前解决问题。</p>
<blockquote>
<p>#10</p>
</blockquote>
<h3 id="在不同的设备上经常测试"><a href="#在不同的设备上经常测试" class="headerlink" title="在不同的设备上经常测试"></a>在不同的设备上经常测试</h3><p><em>屏幕大小，像素，或者设备都有着极大的暗示</em><br>.<br>除了手机vs桌面，有许多关键点会彻底影响性能，就像是否屏幕是“retina”屏，窗口的总像素，硬盘多老了，等等。</p>
<p>即使Chrome和Safari都是webkit的浏览器，有着相同的语法，他们也都有各自怪异行为。每一次chrome更新都会修复一些东西以及引入新的bug，因此你需要一直保持警觉。</p>
<p>当然，你不仅仅只希望创建最低水准的性能，因此找到最机智的方法来渐进添加或者移除增强功能会十分有用。</p>
<p>我经常在我的小Macbook和大的iMac之间切换，并且每次切换都引出了一些小问题并且做些改进——特别是依据动画性能，但是对于总体设计，信息密度，可读性，等等。</p>
<p>媒体查询，常常是强大的工具来处理这些不同环节样式，通过不同的高度或者宽度是最基础的媒体查询的用法。找出OS和设备的类型会很有用，因为手机性能特性和电脑很不一样。</p>
<p><a href="https://gyrosco.pe/" target="_blank" rel="external"><img src="http://p0.qhimg.com/t0192465868d2b8776c.gif" alt=""></a></p>
<p>我希望你在你的下一个项目中，会找到有用的技巧。好运！</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@cherryvenus" target="_blank" rel="external">cherryvenus</a><br>链接：<a href="http://www.zcfy.cc/article/1765" target="_blank" rel="external">http://www.zcfy.cc/article/1765</a><br>原文：<a href="https://blog.gyrosco.pe/smooth-css-animations-7d8ffc2c1d29?gi=7abf2b452ec#.8obfitru3?utm_source=CSS-Weekly&amp;utm_campaign=Issue-238&amp;utm_medium=email" target="_blank" rel="external">https://blog.gyrosco.pe/smooth-css-animations-7d8ffc2c1d29?gi=7abf2b452ec#.8obfitru3?utm_source=CSS-Weekly&amp;utm_campaign=Issue-238&amp;utm_medium=email</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML 5.1 里的新东西]]></title>
      <url>http://jsgrblog.win/2016/12/10/H5-1%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>两年前HTML5标准的发布对于web开发社区来说是一件大事。不仅是因为它包含了一系列让人印象深刻的新特性, 还因为它是1999年发布的HTML4.01标准以后，对HTML的第一个大版本更新。你现在依然可以看到一些网站夸耀他们在使用“现代”的HTML5标准。<br><img src="http://p0.qhimg.com/t01c6cd825f03ce294a.png" alt="A HTML 5.1 knight in shining armor!"><br><a id="more"></a></p>
<p>幸运的是我们不需为下一次HTML标准的更新等待那么长时间。2015年10月，W3C开始着手HTML5.1草案，其目标是修复一些HTML5遗留的问题。多次迭代后, 草案于2016年6月达到“候选建议（Candidate Recommendation）”阶段，2016年9月达到“提议建议（Proposed Recommendation）”，最终2016年11月发布<a href="https://www.w3.org/TR/html/" target="_blank" rel="external">W3C 建议</a>。关注新标准的人可能注意到了，这是一段曲折之路。很多开始提出的HTML5.1特性因为不好的设计或者缺少浏览器厂商支持而被废弃了。</p>
<p>尽管HTML5.1仍然在发展, W3C已经开始着手<a href="https://www.w3.org/TR/html52/" target="_blank" rel="external">HTML5.2草案</a>，该标准预计2017年末发布。本文是对HTML5.1一些有趣的新特性和提升的概览。浏览器对这些特性依然缺乏支持，但是至少我们会告诉你一些支持这些特性的浏览器，用来测试每个例子。</p>
<h3 id="上下文菜单使用menu和menuitems元素"><a href="#上下文菜单使用menu和menuitems元素" class="headerlink" title="上下文菜单使用menu和menuitems元素"></a>上下文菜单使用<code>menu</code>和<code>menuitems</code>元素</h3><p>HTML5.1草案介绍了两种不同的<code>menu</code>元素: <code>context</code>和<code>toolbar</code>。前者用来扩展本地上下文菜单，通常被页面上的鼠标右击激活；后者用来定义一个普通的菜单组件。在发展过程中，<code>toolbar</code> 被放弃了，但是<code>context</code>菜单保存了下来。</p>
<p>可以使用 <a href="https://www.w3.org/TR/html/interactive-elements.html#the-menu-element" target="_blank" rel="external"><code>&lt;menu&gt;</code></a> 标签来定义一个包含一个或几个 <a href="https://www.w3.org/TR/html/interactive-elements.html#the-menuitem-element" target="_blank" rel="external"><code>&lt;menuitem&gt;</code></a> 元素的菜单，然后把它绑定到任何使用<a href="https://www.w3.org/TR/html/interactive-elements.html#element-attrdef-global-contextmenu" target="_blank" rel="external"><code>contextmenu</code></a> 属性的元素上。</p>
<p>每个 <code>&lt;menuitem&gt;</code> 可以是以下三种类型之一:</p>
<ul>
<li><p><code>checkbox</code> – 允许选择或者取消选择一个选项(option);</p>
</li>
<li><p><code>command</code> – 允许在单击鼠标时执行一个动作;</p>
</li>
<li><p><code>radio</code> – 允许在一组选项中选择一个.</p>
</li>
</ul>
<p>这里有一个基本的使用例子，可以在Firefox49中运行， 但是Chrome54目前不行。</p>
<p>请看SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="external">@SitePoint</a>)在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上<a href="http://codepen.io/SitePoint/pen/bBrvRP/" target="_blank" rel="external">HTML5.1菜单例子</a>。</p>
<p>在一个支持的浏览器上，这个上下文菜单的例子应该看起来这样：</p>
<p><img src="http://p0.qhimg.com/t012b201ff03692f462.png" alt="A HTML 5.1 context menu"></p>
<p>上下文菜单中有自定义项。</p>
<h3 id="细节（Details）和总结（Summary）元素"><a href="#细节（Details）和总结（Summary）元素" class="headerlink" title="细节（Details）和总结（Summary）元素"></a>细节（Details）和总结（Summary）元素</h3><p>新的<a href="https://www.w3.org/TR/html/interactive-elements.html#the-details-element" target="_blank" rel="external"><code>&lt;details&gt;</code></a>和<a href="https://www.w3.org/TR/html/interactive-elements.html#the-summary-element" target="_blank" rel="external"><code>&lt;summary&gt;</code></a>元素可以通过鼠标点击实现附加信息的展示和隐藏。这是使用JavaScript时候经常在干的事，现在可以使用<code>&lt;details&gt;</code>元素和<code>&lt;summary&gt;</code>元素代劳了。点击<code>&lt;summary&gt;</code>元素可以展示和隐藏<code>details</code>元素的其余部分.</p>
<p>下面的例子可以在Firefox和Chrome中进行测试。</p>
<p>请看SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="external">@SitePoint</a>)在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上<a href="http://codepen.io/SitePoint/pen/rWzgzg/" target="_blank" rel="external">HTML5.1 细节和总结 demo</a>。</p>
<p>这个demo在支持的浏览器上应该是下面这样：</p>
<p><img src="http://p0.qhimg.com/t01800aaa24cc973da6.png" alt="Details and summary elements"></p>
<h3 id="更多的input类型-month，week-和-datetime-local"><a href="#更多的input类型-month，week-和-datetime-local" class="headerlink" title="更多的input类型 - month，week 和 datetime-local"></a>更多的input类型 - <code>month</code>，<code>week</code> 和 <code>datetime-local</code></h3><p>input扩展了三种类型: <a href="https://www.w3.org/TR/html/sec-forms.html#month-state-typemonth" target="_blank" rel="external"><code>month</code></a>， <a href="https://www.w3.org/TR/html/index.html#contents" target="_blank" rel="external"><code>week</code></a> 和<a href="https://www.w3.org/TR/html/sec-forms.html#local-date-and-time-state-typedatetimelocal" target="_blank" rel="external"><code>datetime-local</code></a>。</p>
<p>前两种类型让你可以选择周或者月。在Chrome中两者都渲染成下拉的日历，可以选择某周或者某月。当你用JavaScript获得它们的值，你将得到一个大致这样的字符串： <code>&quot;2016-W43&quot;</code>（<code>week</code> input）； <code>&quot;2016-10&quot;</code> （<code>month</code> input）。</p>
<p>最初，HTML5.1草案介绍了两种日期类型input — <code>datetime</code>和<code>datetime-local</code>。不同的是，<code>datetime-local</code> 使用用户时区, 而<code>datetime</code>允许你选择时区。发展过程中，<code>datetime</code> 被放弃了，现在只有<code>datetime-local</code>存在。<code>datetime-local</code> input由两部分组成 — 日期，可以像<code>week</code> 和 <code>month</code>一样进行选择；时间, 可以单独输入。</p>
<p>下面是关于所有新类型input的例子，它在chrome中可以正常展示，但是firfox不行。</p>
<p>请看SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="external">@SitePoint</a>)在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上<a href="http://codepen.io/SitePoint/pen/xRLowg/" target="_blank" rel="external">HTML 5.1 week, month 和 datetime inputs</a>。</p>
<p>这个demo在支持的浏览器上应该是下面这样：</p>
<p><img src="http://p0.qhimg.com/t018be52a398d1db7cd.png" alt="Week, month and datetime-local inputs"></p>
<h3 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h3><p>HTML5.1包括几个在不使用CSS情况下实现响应式图片的新特性。每个特性都有自己单独的使用场景。</p>
<h4 id="srcset属性"><a href="#srcset属性" class="headerlink" title="srcset属性"></a><code>srcset</code>属性</h4><p><a href="https://www.w3.org/TR/html/single-page.html#element-attrdef-img-srcset" target="_blank" rel="external"><code>srcset</code></a>图像属性允许列出多个可用于替代的图片数据源，这些数据源的像素密度不同。这使得浏览器可以针对用户设备选择合适质量的图片（由设备的像素密度、缩放比例或者网速决定）。例如，在低速手机网络和小屏幕手机的情况下，应该为用户提供低像素的图片。</p>
<p><code>srcset</code>属性接受一个用逗号分隔的URL列表，每个URL带有一个表示最接近所请求图片像素比（一个CSS像素所代表的物理像素数量）的修饰<code>x</code>。下面是一个简单的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;images/low-res.jpg&quot; srcset=&quot;</div><div class="line">  images/low-res.jpg 1x, </div><div class="line">  images/high-res.jpg 2x, </div><div class="line">  images/ultra-high-res.jpg 3x&quot;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>在这个例子中，如果用户设备的像素比是1，图片<code>low-res</code>将会被展示；如果是2，图片<code>high-res</code>将会被展示；如果是3或者更大，图片<code>ultra-high-res</code>将会被展示。</p>
<p>或者，你可以选择将图片展示成不同尺寸。这需要使用<code>w</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;images/low-res.jpg&quot; srcset=&quot;</div><div class="line">  images/low-res.jpg 600w, </div><div class="line">  images/high-res.jpg 1000w, </div><div class="line">  images/ultra-high-res.jpg 1400w&quot;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>在这个例子中，图片<code>low-res</code>被定义成600px宽，图片<code>high-res</code>被定义成1000px宽，<code>ultra-high-res</code>是1400px宽。</p>
<h4 id="sizes属性"><a href="#sizes属性" class="headerlink" title="sizes属性"></a><code>sizes</code>属性</h4><p>你可能想根据用户屏幕尺寸来使用不同方式展示图片。例如，你可能想在宽屏幕上用两栏展示图片，窄一些的屏幕上用一栏。这点用<code>sizes</code>属性就可以实现。它允许你为图片分配屏幕的宽度，然后通过<code>srcset</code>属性选择合适的图片。下面是一个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;images/low-res.jpg&quot; sizes=&quot;(max-width: 40em) 100vw, 50vw&quot; </div><div class="line">  srcset=&quot;images/low-res.jpg 600w, </div><div class="line">  images/high-res.jpg 1000w, </div><div class="line">  images/ultra-high-res.jpg 1400w&quot;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>当视口宽度大于40em时，<code>sizes</code>属性把图片的宽度定义为视口宽度的50%；当视口（viewport）宽度小于或者等于40em时，把图片宽度定义为视口宽度的100%。</p>
<h4 id="picture元素"><a href="#picture元素" class="headerlink" title="picture元素"></a><code>picture</code>元素</h4><p>如果根据屏幕不同改变图片的尺寸还是不能满足需求，你想根据屏幕不同展示不同的图片，那就需要使用<a href="https://www.w3.org/TR/html/single-page.html#elementdef-picture" target="_blank" rel="external"><code>picture</code></a>元素。它允许你通过用<code>&lt;picture&gt;</code>指定多个不同<code>&lt;source&gt;</code>元素，来为不同尺寸的屏幕定义不同资源的图片。<code>&lt;source&gt;</code>元素作为URL加载图片的来源。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;picture&gt;</div><div class="line">  &lt;source media=&quot;(max-width: 20em)&quot; srcset=&quot;</div><div class="line">    images/small/low-res.jpg 1x,</div><div class="line">    images/small/high-res.jpg 2x, </div><div class="line">    images/small/ultra-high-res.jpg 3x</div><div class="line">  &quot;&gt;</div><div class="line">  &lt;source media=&quot;(max-width: 40em)&quot; srcset=&quot;</div><div class="line">    images/large/low-res.jpg 1x,</div><div class="line">    images/large/high-res.jpg 2x, </div><div class="line">    images/large/ultra-high-res.jpg 3x</div><div class="line">  &quot;&gt;</div><div class="line"></div><div class="line">  &lt;img src=&quot;images/large/low-res.jpg&quot;&gt;</div><div class="line">&lt;/picture&gt;</div></pre></td></tr></table></figure>
<p>如果你想知道更多关于响应式图片的东西，请戳<a href="https://www.sitepoint.com/how-to-build-responsive-images-with-srcset" target="_blank" rel="external">How to Build Responsive Images with <code>srcset</code></a>.</p>
<h3 id="用form-reportValidity-验证表单"><a href="#用form-reportValidity-验证表单" class="headerlink" title="用form.reportValidity()验证表单"></a>用<code>form.reportValidity()</code>验证表单</h3><p>HTML5定义的<a href="https://www.w3.org/TR/html/single-page.html#dom-htmlobjectelement-checkvalidity" target="_blank" rel="external"><code>form.checkValidity()</code></a>方法可以检查表单是否符合事先定义好的验证器然后返回一个布尔值。新的<a href="https://www.w3.org/TR/html/single-page.html#dom-htmlformelement-reportvalidity" target="_blank" rel="external"><code>reportValidity()</code></a> 方法很相似 — 它也可以检验一个表单并返回结果，但是它还能为用户报告错误。下面是一个例子（请在Firefox或Chrome中测试）：</p>
<p>请在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>上看SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="external">@SitePoint</a>)的例子<a href="http://codepen.io/SitePoint/pen/eBEwjg/" target="_blank" rel="external">HTML 5.1 report validity demo</a>。</p>
<p>“First name”输入框被要求非空，如果不填写它将被标记有错误。如果符合预期，它将是这样：</p>
<p><img src="http://p0.qhimg.com/t01f231808cf20572c6.png" alt="Working form validation with a message"></p>
<h3 id="frames的AllowfullscreenFrames的Allowfullscreen属性"><a href="#frames的AllowfullscreenFrames的Allowfullscreen属性" class="headerlink" title="frames的AllowfullscreenFrames的Allowfullscreen属性"></a>frames的<code>Allowfullscreen</code>Frames的<code>Allowfullscreen</code>属性</h3><p>frames新的布尔属性<a href="https://www.w3.org/TR/html/single-page.html#element-attrdef-iframe-allowfullscreen" target="_blank" rel="external"><code>allowfullscreen</code></a>可以控制内容是否可以通过<a href="https://fullscreen.spec.whatwg.org/#dom-element-requestfullscreen" target="_blank" rel="external"><code>requestFullscreen()</code></a>方法来全屏展示内容。</p>
<h3 id="使用element-forceSpellCheck-进行拼写检查"><a href="#使用element-forceSpellCheck-进行拼写检查" class="headerlink" title="使用element.forceSpellCheck()进行拼写检查"></a>使用<code>element.forceSpellCheck()</code>进行拼写检查</h3><p>新的<a href="https://html.spec.whatwg.org/multipage/interaction.html#dom-forcespellcheck" target="_blank" rel="external"><code>element.forceSpellCheck()</code></a>方法允许你在text元素上触发拼写检查。这也是本文所列出的所有特性中第一个还不被任何浏览器支持的特性。也许，这可以用来进行检查还没有被用户直接编辑的元素。</p>
<h3 id="没有写进HTML5-1的特性"><a href="#没有写进HTML5-1的特性" class="headerlink" title="没有写进HTML5.1的特性"></a>没有写进HTML5.1的特性</h3><p>一些特性在第一版的草案中被定义但是最终被删除了，大部分原因是浏览器厂商缺乏兴趣。下面是其中一些有趣的方法：</p>
<h4 id="inert属性"><a href="#inert属性" class="headerlink" title="inert属性"></a><code>inert</code>属性</h4><p><code>inert</code>属性可以禁用所有子元素的用户交互，就像给所有子元素都加了<code>disabled</code>属性。</p>
<h4 id="dialog元素"><a href="#dialog元素" class="headerlink" title="dialog元素"></a><code>dialog</code>元素</h4><p><code>&lt;dialog&gt;</code>元素提供一个原生的弹出框，它甚至有一个方便的表单集合 - 在<code>&lt;dialog&gt;</code>上使用<code>method</code>属性可以阻止表单提交到服务器上，而是关闭弹出框并把结果返回给弹出框的建立者。</p>
<p>这个特性似乎在firfox仍然支持，所以可以看看下面这个例子（译者注：firfox V49.0.2不支持：</p>
<p>请看SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="external">@SitePoint</a>)在<a href="http://codepen.io" target="_blank" rel="external">CodePen</a>的例子 <a href="http://codepen.io/SitePoint/pen/XNaLOg/" target="_blank" rel="external">HTML dialog element</a>。</p>
<h3 id="作者的更多文章"><a href="#作者的更多文章" class="headerlink" title="作者的更多文章"></a>作者的更多文章</h3><ul>
<li><p><a href="https://www.sitepoint.com/up-and-running-with-eslint-the-pluggable-javascript-linter/?utm_source=sitepoint&amp;utm_medium=relatedinline&amp;utm_term=&amp;utm_campaign=relatedauthor" target="_blank" rel="external">Up and Running with ESLint — the Pluggable JavaScript Linter</a></p>
</li>
<li><p><a href="https://www.sitepoint.com/visual-regression-testing-with-phantomcss/?utm_source=sitepoint&amp;utm_medium=relatedinline&amp;utm_term=&amp;utm_campaign=relatedauthor" target="_blank" rel="external">Visual Regression Testing with PhantomCSS</a></p>
</li>
</ul>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>这不是一个关于HTML5.1所有新特性的文章。有许多小的新特性、改变已经从现行标准中删除，还有一些从未使用的特性也被删除了。如果你想知道HTML5.1的所有改变，请戳[Changes](<a href="https://www.w3.org/TR/html/changes.html#changes。同时，让我们一起期待浏览器厂商尽快支持这些新特性!" target="_blank" rel="external">https://www.w3.org/TR/html/changes.html#changes。同时，让我们一起期待浏览器厂商尽快支持这些新特性!</a></p>
<p>HTML5.1哪些方面最令你激动？通过评论告诉我们吧!</p>
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@CynthiaLYY" target="_blank" rel="external">柒青衿</a><br>链接：<a href="http://www.zcfy.cc/article/1899" target="_blank" rel="external">http://www.zcfy.cc/article/1899</a><br>原文：<a href="https://www.sitepoint.com/whats-new-in-html-5-1/" target="_blank" rel="external">https://www.sitepoint.com/whats-new-in-html-5-1/</a></p>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
